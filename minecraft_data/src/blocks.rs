// This code was generated using data provided by PrismarineJS/minecraft-data

use crate::ConstrainedInt;
use crate::Values;
use crate::BlockProperties;
use serde::de::MapAccess;
use std::collections::HashMap;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub enum Block {
	Air(Air),
	Stone(Stone),
	Granite(Granite),
	PolishedGranite(PolishedGranite),
	Diorite(Diorite),
	PolishedDiorite(PolishedDiorite),
	Andesite(Andesite),
	PolishedAndesite(PolishedAndesite),
	GrassBlock(GrassBlock),
	Dirt(Dirt),
	CoarseDirt(CoarseDirt),
	Podzol(Podzol),
	Cobblestone(Cobblestone),
	OakPlanks(OakPlanks),
	SprucePlanks(SprucePlanks),
	BirchPlanks(BirchPlanks),
	JunglePlanks(JunglePlanks),
	AcaciaPlanks(AcaciaPlanks),
	DarkOakPlanks(DarkOakPlanks),
	MangrovePlanks(MangrovePlanks),
	OakSapling(OakSapling),
	SpruceSapling(SpruceSapling),
	BirchSapling(BirchSapling),
	JungleSapling(JungleSapling),
	AcaciaSapling(AcaciaSapling),
	DarkOakSapling(DarkOakSapling),
	MangrovePropagule(MangrovePropagule),
	Bedrock(Bedrock),
	Water(Water),
	Lava(Lava),
	Sand(Sand),
	RedSand(RedSand),
	Gravel(Gravel),
	GoldOre(GoldOre),
	DeepslateGoldOre(DeepslateGoldOre),
	IronOre(IronOre),
	DeepslateIronOre(DeepslateIronOre),
	CoalOre(CoalOre),
	DeepslateCoalOre(DeepslateCoalOre),
	NetherGoldOre(NetherGoldOre),
	OakLog(OakLog),
	SpruceLog(SpruceLog),
	BirchLog(BirchLog),
	JungleLog(JungleLog),
	AcaciaLog(AcaciaLog),
	DarkOakLog(DarkOakLog),
	MangroveLog(MangroveLog),
	MangroveRoots(MangroveRoots),
	MuddyMangroveRoots(MuddyMangroveRoots),
	StrippedSpruceLog(StrippedSpruceLog),
	StrippedBirchLog(StrippedBirchLog),
	StrippedJungleLog(StrippedJungleLog),
	StrippedAcaciaLog(StrippedAcaciaLog),
	StrippedDarkOakLog(StrippedDarkOakLog),
	StrippedOakLog(StrippedOakLog),
	StrippedMangroveLog(StrippedMangroveLog),
	OakWood(OakWood),
	SpruceWood(SpruceWood),
	BirchWood(BirchWood),
	JungleWood(JungleWood),
	AcaciaWood(AcaciaWood),
	DarkOakWood(DarkOakWood),
	MangroveWood(MangroveWood),
	StrippedOakWood(StrippedOakWood),
	StrippedSpruceWood(StrippedSpruceWood),
	StrippedBirchWood(StrippedBirchWood),
	StrippedJungleWood(StrippedJungleWood),
	StrippedAcaciaWood(StrippedAcaciaWood),
	StrippedDarkOakWood(StrippedDarkOakWood),
	StrippedMangroveWood(StrippedMangroveWood),
	OakLeaves(OakLeaves),
	SpruceLeaves(SpruceLeaves),
	BirchLeaves(BirchLeaves),
	JungleLeaves(JungleLeaves),
	AcaciaLeaves(AcaciaLeaves),
	DarkOakLeaves(DarkOakLeaves),
	MangroveLeaves(MangroveLeaves),
	AzaleaLeaves(AzaleaLeaves),
	FloweringAzaleaLeaves(FloweringAzaleaLeaves),
	Sponge(Sponge),
	WetSponge(WetSponge),
	Glass(Glass),
	LapisOre(LapisOre),
	DeepslateLapisOre(DeepslateLapisOre),
	LapisBlock(LapisBlock),
	Dispenser(Dispenser),
	Sandstone(Sandstone),
	ChiseledSandstone(ChiseledSandstone),
	CutSandstone(CutSandstone),
	NoteBlock(NoteBlock),
	WhiteBed(WhiteBed),
	OrangeBed(OrangeBed),
	MagentaBed(MagentaBed),
	LightBlueBed(LightBlueBed),
	YellowBed(YellowBed),
	LimeBed(LimeBed),
	PinkBed(PinkBed),
	GrayBed(GrayBed),
	LightGrayBed(LightGrayBed),
	CyanBed(CyanBed),
	PurpleBed(PurpleBed),
	BlueBed(BlueBed),
	BrownBed(BrownBed),
	GreenBed(GreenBed),
	RedBed(RedBed),
	BlackBed(BlackBed),
	PoweredRail(PoweredRail),
	DetectorRail(DetectorRail),
	StickyPiston(StickyPiston),
	Cobweb(Cobweb),
	Grass(Grass),
	Fern(Fern),
	DeadBush(DeadBush),
	Seagrass(Seagrass),
	TallSeagrass(TallSeagrass),
	Piston(Piston),
	PistonHead(PistonHead),
	WhiteWool(WhiteWool),
	OrangeWool(OrangeWool),
	MagentaWool(MagentaWool),
	LightBlueWool(LightBlueWool),
	YellowWool(YellowWool),
	LimeWool(LimeWool),
	PinkWool(PinkWool),
	GrayWool(GrayWool),
	LightGrayWool(LightGrayWool),
	CyanWool(CyanWool),
	PurpleWool(PurpleWool),
	BlueWool(BlueWool),
	BrownWool(BrownWool),
	GreenWool(GreenWool),
	RedWool(RedWool),
	BlackWool(BlackWool),
	MovingPiston(MovingPiston),
	Dandelion(Dandelion),
	Poppy(Poppy),
	BlueOrchid(BlueOrchid),
	Allium(Allium),
	AzureBluet(AzureBluet),
	RedTulip(RedTulip),
	OrangeTulip(OrangeTulip),
	WhiteTulip(WhiteTulip),
	PinkTulip(PinkTulip),
	OxeyeDaisy(OxeyeDaisy),
	Cornflower(Cornflower),
	WitherRose(WitherRose),
	LilyOfTheValley(LilyOfTheValley),
	BrownMushroom(BrownMushroom),
	RedMushroom(RedMushroom),
	GoldBlock(GoldBlock),
	IronBlock(IronBlock),
	Bricks(Bricks),
	Tnt(Tnt),
	Bookshelf(Bookshelf),
	MossyCobblestone(MossyCobblestone),
	Obsidian(Obsidian),
	Torch(Torch),
	WallTorch(WallTorch),
	Fire(Fire),
	SoulFire(SoulFire),
	Spawner(Spawner),
	OakStairs(OakStairs),
	Chest(Chest),
	RedstoneWire(RedstoneWire),
	DiamondOre(DiamondOre),
	DeepslateDiamondOre(DeepslateDiamondOre),
	DiamondBlock(DiamondBlock),
	CraftingTable(CraftingTable),
	Wheat(Wheat),
	Farmland(Farmland),
	Furnace(Furnace),
	OakSign(OakSign),
	SpruceSign(SpruceSign),
	BirchSign(BirchSign),
	AcaciaSign(AcaciaSign),
	JungleSign(JungleSign),
	DarkOakSign(DarkOakSign),
	MangroveSign(MangroveSign),
	OakDoor(OakDoor),
	Ladder(Ladder),
	Rail(Rail),
	CobblestoneStairs(CobblestoneStairs),
	OakWallSign(OakWallSign),
	SpruceWallSign(SpruceWallSign),
	BirchWallSign(BirchWallSign),
	AcaciaWallSign(AcaciaWallSign),
	JungleWallSign(JungleWallSign),
	DarkOakWallSign(DarkOakWallSign),
	MangroveWallSign(MangroveWallSign),
	Lever(Lever),
	StonePressurePlate(StonePressurePlate),
	IronDoor(IronDoor),
	OakPressurePlate(OakPressurePlate),
	SprucePressurePlate(SprucePressurePlate),
	BirchPressurePlate(BirchPressurePlate),
	JunglePressurePlate(JunglePressurePlate),
	AcaciaPressurePlate(AcaciaPressurePlate),
	DarkOakPressurePlate(DarkOakPressurePlate),
	MangrovePressurePlate(MangrovePressurePlate),
	RedstoneOre(RedstoneOre),
	DeepslateRedstoneOre(DeepslateRedstoneOre),
	RedstoneTorch(RedstoneTorch),
	RedstoneWallTorch(RedstoneWallTorch),
	StoneButton(StoneButton),
	Snow(Snow),
	Ice(Ice),
	SnowBlock(SnowBlock),
	Cactus(Cactus),
	Clay(Clay),
	SugarCane(SugarCane),
	Jukebox(Jukebox),
	OakFence(OakFence),
	Pumpkin(Pumpkin),
	Netherrack(Netherrack),
	SoulSand(SoulSand),
	SoulSoil(SoulSoil),
	Basalt(Basalt),
	PolishedBasalt(PolishedBasalt),
	SoulTorch(SoulTorch),
	SoulWallTorch(SoulWallTorch),
	Glowstone(Glowstone),
	NetherPortal(NetherPortal),
	CarvedPumpkin(CarvedPumpkin),
	JackOLantern(JackOLantern),
	Cake(Cake),
	Repeater(Repeater),
	WhiteStainedGlass(WhiteStainedGlass),
	OrangeStainedGlass(OrangeStainedGlass),
	MagentaStainedGlass(MagentaStainedGlass),
	LightBlueStainedGlass(LightBlueStainedGlass),
	YellowStainedGlass(YellowStainedGlass),
	LimeStainedGlass(LimeStainedGlass),
	PinkStainedGlass(PinkStainedGlass),
	GrayStainedGlass(GrayStainedGlass),
	LightGrayStainedGlass(LightGrayStainedGlass),
	CyanStainedGlass(CyanStainedGlass),
	PurpleStainedGlass(PurpleStainedGlass),
	BlueStainedGlass(BlueStainedGlass),
	BrownStainedGlass(BrownStainedGlass),
	GreenStainedGlass(GreenStainedGlass),
	RedStainedGlass(RedStainedGlass),
	BlackStainedGlass(BlackStainedGlass),
	OakTrapdoor(OakTrapdoor),
	SpruceTrapdoor(SpruceTrapdoor),
	BirchTrapdoor(BirchTrapdoor),
	JungleTrapdoor(JungleTrapdoor),
	AcaciaTrapdoor(AcaciaTrapdoor),
	DarkOakTrapdoor(DarkOakTrapdoor),
	MangroveTrapdoor(MangroveTrapdoor),
	StoneBricks(StoneBricks),
	MossyStoneBricks(MossyStoneBricks),
	CrackedStoneBricks(CrackedStoneBricks),
	ChiseledStoneBricks(ChiseledStoneBricks),
	PackedMud(PackedMud),
	MudBricks(MudBricks),
	InfestedStone(InfestedStone),
	InfestedCobblestone(InfestedCobblestone),
	InfestedStoneBricks(InfestedStoneBricks),
	InfestedMossyStoneBricks(InfestedMossyStoneBricks),
	InfestedCrackedStoneBricks(InfestedCrackedStoneBricks),
	InfestedChiseledStoneBricks(InfestedChiseledStoneBricks),
	BrownMushroomBlock(BrownMushroomBlock),
	RedMushroomBlock(RedMushroomBlock),
	MushroomStem(MushroomStem),
	IronBars(IronBars),
	Chain(Chain),
	GlassPane(GlassPane),
	Melon(Melon),
	AttachedPumpkinStem(AttachedPumpkinStem),
	AttachedMelonStem(AttachedMelonStem),
	PumpkinStem(PumpkinStem),
	MelonStem(MelonStem),
	Vine(Vine),
	GlowLichen(GlowLichen),
	OakFenceGate(OakFenceGate),
	BrickStairs(BrickStairs),
	StoneBrickStairs(StoneBrickStairs),
	MudBrickStairs(MudBrickStairs),
	Mycelium(Mycelium),
	LilyPad(LilyPad),
	NetherBricks(NetherBricks),
	NetherBrickFence(NetherBrickFence),
	NetherBrickStairs(NetherBrickStairs),
	NetherWart(NetherWart),
	EnchantingTable(EnchantingTable),
	BrewingStand(BrewingStand),
	Cauldron(Cauldron),
	WaterCauldron(WaterCauldron),
	LavaCauldron(LavaCauldron),
	PowderSnowCauldron(PowderSnowCauldron),
	EndPortal(EndPortal),
	EndPortalFrame(EndPortalFrame),
	EndStone(EndStone),
	DragonEgg(DragonEgg),
	RedstoneLamp(RedstoneLamp),
	Cocoa(Cocoa),
	SandstoneStairs(SandstoneStairs),
	EmeraldOre(EmeraldOre),
	DeepslateEmeraldOre(DeepslateEmeraldOre),
	EnderChest(EnderChest),
	TripwireHook(TripwireHook),
	Tripwire(Tripwire),
	EmeraldBlock(EmeraldBlock),
	SpruceStairs(SpruceStairs),
	BirchStairs(BirchStairs),
	JungleStairs(JungleStairs),
	CommandBlock(CommandBlock),
	Beacon(Beacon),
	CobblestoneWall(CobblestoneWall),
	MossyCobblestoneWall(MossyCobblestoneWall),
	FlowerPot(FlowerPot),
	PottedOakSapling(PottedOakSapling),
	PottedSpruceSapling(PottedSpruceSapling),
	PottedBirchSapling(PottedBirchSapling),
	PottedJungleSapling(PottedJungleSapling),
	PottedAcaciaSapling(PottedAcaciaSapling),
	PottedDarkOakSapling(PottedDarkOakSapling),
	PottedMangrovePropagule(PottedMangrovePropagule),
	PottedFern(PottedFern),
	PottedDandelion(PottedDandelion),
	PottedPoppy(PottedPoppy),
	PottedBlueOrchid(PottedBlueOrchid),
	PottedAllium(PottedAllium),
	PottedAzureBluet(PottedAzureBluet),
	PottedRedTulip(PottedRedTulip),
	PottedOrangeTulip(PottedOrangeTulip),
	PottedWhiteTulip(PottedWhiteTulip),
	PottedPinkTulip(PottedPinkTulip),
	PottedOxeyeDaisy(PottedOxeyeDaisy),
	PottedCornflower(PottedCornflower),
	PottedLilyOfTheValley(PottedLilyOfTheValley),
	PottedWitherRose(PottedWitherRose),
	PottedRedMushroom(PottedRedMushroom),
	PottedBrownMushroom(PottedBrownMushroom),
	PottedDeadBush(PottedDeadBush),
	PottedCactus(PottedCactus),
	Carrots(Carrots),
	Potatoes(Potatoes),
	OakButton(OakButton),
	SpruceButton(SpruceButton),
	BirchButton(BirchButton),
	JungleButton(JungleButton),
	AcaciaButton(AcaciaButton),
	DarkOakButton(DarkOakButton),
	MangroveButton(MangroveButton),
	SkeletonSkull(SkeletonSkull),
	SkeletonWallSkull(SkeletonWallSkull),
	WitherSkeletonSkull(WitherSkeletonSkull),
	WitherSkeletonWallSkull(WitherSkeletonWallSkull),
	ZombieHead(ZombieHead),
	ZombieWallHead(ZombieWallHead),
	PlayerHead(PlayerHead),
	PlayerWallHead(PlayerWallHead),
	CreeperHead(CreeperHead),
	CreeperWallHead(CreeperWallHead),
	DragonHead(DragonHead),
	DragonWallHead(DragonWallHead),
	Anvil(Anvil),
	ChippedAnvil(ChippedAnvil),
	DamagedAnvil(DamagedAnvil),
	TrappedChest(TrappedChest),
	LightWeightedPressurePlate(LightWeightedPressurePlate),
	HeavyWeightedPressurePlate(HeavyWeightedPressurePlate),
	Comparator(Comparator),
	DaylightDetector(DaylightDetector),
	RedstoneBlock(RedstoneBlock),
	NetherQuartzOre(NetherQuartzOre),
	Hopper(Hopper),
	QuartzBlock(QuartzBlock),
	ChiseledQuartzBlock(ChiseledQuartzBlock),
	QuartzPillar(QuartzPillar),
	QuartzStairs(QuartzStairs),
	ActivatorRail(ActivatorRail),
	Dropper(Dropper),
	WhiteTerracotta(WhiteTerracotta),
	OrangeTerracotta(OrangeTerracotta),
	MagentaTerracotta(MagentaTerracotta),
	LightBlueTerracotta(LightBlueTerracotta),
	YellowTerracotta(YellowTerracotta),
	LimeTerracotta(LimeTerracotta),
	PinkTerracotta(PinkTerracotta),
	GrayTerracotta(GrayTerracotta),
	LightGrayTerracotta(LightGrayTerracotta),
	CyanTerracotta(CyanTerracotta),
	PurpleTerracotta(PurpleTerracotta),
	BlueTerracotta(BlueTerracotta),
	BrownTerracotta(BrownTerracotta),
	GreenTerracotta(GreenTerracotta),
	RedTerracotta(RedTerracotta),
	BlackTerracotta(BlackTerracotta),
	WhiteStainedGlassPane(WhiteStainedGlassPane),
	OrangeStainedGlassPane(OrangeStainedGlassPane),
	MagentaStainedGlassPane(MagentaStainedGlassPane),
	LightBlueStainedGlassPane(LightBlueStainedGlassPane),
	YellowStainedGlassPane(YellowStainedGlassPane),
	LimeStainedGlassPane(LimeStainedGlassPane),
	PinkStainedGlassPane(PinkStainedGlassPane),
	GrayStainedGlassPane(GrayStainedGlassPane),
	LightGrayStainedGlassPane(LightGrayStainedGlassPane),
	CyanStainedGlassPane(CyanStainedGlassPane),
	PurpleStainedGlassPane(PurpleStainedGlassPane),
	BlueStainedGlassPane(BlueStainedGlassPane),
	BrownStainedGlassPane(BrownStainedGlassPane),
	GreenStainedGlassPane(GreenStainedGlassPane),
	RedStainedGlassPane(RedStainedGlassPane),
	BlackStainedGlassPane(BlackStainedGlassPane),
	AcaciaStairs(AcaciaStairs),
	DarkOakStairs(DarkOakStairs),
	MangroveStairs(MangroveStairs),
	SlimeBlock(SlimeBlock),
	Barrier(Barrier),
	Light(Light),
	IronTrapdoor(IronTrapdoor),
	Prismarine(Prismarine),
	PrismarineBricks(PrismarineBricks),
	DarkPrismarine(DarkPrismarine),
	PrismarineStairs(PrismarineStairs),
	PrismarineBrickStairs(PrismarineBrickStairs),
	DarkPrismarineStairs(DarkPrismarineStairs),
	PrismarineSlab(PrismarineSlab),
	PrismarineBrickSlab(PrismarineBrickSlab),
	DarkPrismarineSlab(DarkPrismarineSlab),
	SeaLantern(SeaLantern),
	HayBlock(HayBlock),
	WhiteCarpet(WhiteCarpet),
	OrangeCarpet(OrangeCarpet),
	MagentaCarpet(MagentaCarpet),
	LightBlueCarpet(LightBlueCarpet),
	YellowCarpet(YellowCarpet),
	LimeCarpet(LimeCarpet),
	PinkCarpet(PinkCarpet),
	GrayCarpet(GrayCarpet),
	LightGrayCarpet(LightGrayCarpet),
	CyanCarpet(CyanCarpet),
	PurpleCarpet(PurpleCarpet),
	BlueCarpet(BlueCarpet),
	BrownCarpet(BrownCarpet),
	GreenCarpet(GreenCarpet),
	RedCarpet(RedCarpet),
	BlackCarpet(BlackCarpet),
	Terracotta(Terracotta),
	CoalBlock(CoalBlock),
	PackedIce(PackedIce),
	Sunflower(Sunflower),
	Lilac(Lilac),
	RoseBush(RoseBush),
	Peony(Peony),
	TallGrass(TallGrass),
	LargeFern(LargeFern),
	WhiteBanner(WhiteBanner),
	OrangeBanner(OrangeBanner),
	MagentaBanner(MagentaBanner),
	LightBlueBanner(LightBlueBanner),
	YellowBanner(YellowBanner),
	LimeBanner(LimeBanner),
	PinkBanner(PinkBanner),
	GrayBanner(GrayBanner),
	LightGrayBanner(LightGrayBanner),
	CyanBanner(CyanBanner),
	PurpleBanner(PurpleBanner),
	BlueBanner(BlueBanner),
	BrownBanner(BrownBanner),
	GreenBanner(GreenBanner),
	RedBanner(RedBanner),
	BlackBanner(BlackBanner),
	WhiteWallBanner(WhiteWallBanner),
	OrangeWallBanner(OrangeWallBanner),
	MagentaWallBanner(MagentaWallBanner),
	LightBlueWallBanner(LightBlueWallBanner),
	YellowWallBanner(YellowWallBanner),
	LimeWallBanner(LimeWallBanner),
	PinkWallBanner(PinkWallBanner),
	GrayWallBanner(GrayWallBanner),
	LightGrayWallBanner(LightGrayWallBanner),
	CyanWallBanner(CyanWallBanner),
	PurpleWallBanner(PurpleWallBanner),
	BlueWallBanner(BlueWallBanner),
	BrownWallBanner(BrownWallBanner),
	GreenWallBanner(GreenWallBanner),
	RedWallBanner(RedWallBanner),
	BlackWallBanner(BlackWallBanner),
	RedSandstone(RedSandstone),
	ChiseledRedSandstone(ChiseledRedSandstone),
	CutRedSandstone(CutRedSandstone),
	RedSandstoneStairs(RedSandstoneStairs),
	OakSlab(OakSlab),
	SpruceSlab(SpruceSlab),
	BirchSlab(BirchSlab),
	JungleSlab(JungleSlab),
	AcaciaSlab(AcaciaSlab),
	DarkOakSlab(DarkOakSlab),
	MangroveSlab(MangroveSlab),
	StoneSlab(StoneSlab),
	SmoothStoneSlab(SmoothStoneSlab),
	SandstoneSlab(SandstoneSlab),
	CutSandstoneSlab(CutSandstoneSlab),
	PetrifiedOakSlab(PetrifiedOakSlab),
	CobblestoneSlab(CobblestoneSlab),
	BrickSlab(BrickSlab),
	StoneBrickSlab(StoneBrickSlab),
	MudBrickSlab(MudBrickSlab),
	NetherBrickSlab(NetherBrickSlab),
	QuartzSlab(QuartzSlab),
	RedSandstoneSlab(RedSandstoneSlab),
	CutRedSandstoneSlab(CutRedSandstoneSlab),
	PurpurSlab(PurpurSlab),
	SmoothStone(SmoothStone),
	SmoothSandstone(SmoothSandstone),
	SmoothQuartz(SmoothQuartz),
	SmoothRedSandstone(SmoothRedSandstone),
	SpruceFenceGate(SpruceFenceGate),
	BirchFenceGate(BirchFenceGate),
	JungleFenceGate(JungleFenceGate),
	AcaciaFenceGate(AcaciaFenceGate),
	DarkOakFenceGate(DarkOakFenceGate),
	MangroveFenceGate(MangroveFenceGate),
	SpruceFence(SpruceFence),
	BirchFence(BirchFence),
	JungleFence(JungleFence),
	AcaciaFence(AcaciaFence),
	DarkOakFence(DarkOakFence),
	MangroveFence(MangroveFence),
	SpruceDoor(SpruceDoor),
	BirchDoor(BirchDoor),
	JungleDoor(JungleDoor),
	AcaciaDoor(AcaciaDoor),
	DarkOakDoor(DarkOakDoor),
	MangroveDoor(MangroveDoor),
	EndRod(EndRod),
	ChorusPlant(ChorusPlant),
	ChorusFlower(ChorusFlower),
	PurpurBlock(PurpurBlock),
	PurpurPillar(PurpurPillar),
	PurpurStairs(PurpurStairs),
	EndStoneBricks(EndStoneBricks),
	Beetroots(Beetroots),
	DirtPath(DirtPath),
	EndGateway(EndGateway),
	RepeatingCommandBlock(RepeatingCommandBlock),
	ChainCommandBlock(ChainCommandBlock),
	FrostedIce(FrostedIce),
	MagmaBlock(MagmaBlock),
	NetherWartBlock(NetherWartBlock),
	RedNetherBricks(RedNetherBricks),
	BoneBlock(BoneBlock),
	StructureVoid(StructureVoid),
	Observer(Observer),
	ShulkerBox(ShulkerBox),
	WhiteShulkerBox(WhiteShulkerBox),
	OrangeShulkerBox(OrangeShulkerBox),
	MagentaShulkerBox(MagentaShulkerBox),
	LightBlueShulkerBox(LightBlueShulkerBox),
	YellowShulkerBox(YellowShulkerBox),
	LimeShulkerBox(LimeShulkerBox),
	PinkShulkerBox(PinkShulkerBox),
	GrayShulkerBox(GrayShulkerBox),
	LightGrayShulkerBox(LightGrayShulkerBox),
	CyanShulkerBox(CyanShulkerBox),
	PurpleShulkerBox(PurpleShulkerBox),
	BlueShulkerBox(BlueShulkerBox),
	BrownShulkerBox(BrownShulkerBox),
	GreenShulkerBox(GreenShulkerBox),
	RedShulkerBox(RedShulkerBox),
	BlackShulkerBox(BlackShulkerBox),
	WhiteGlazedTerracotta(WhiteGlazedTerracotta),
	OrangeGlazedTerracotta(OrangeGlazedTerracotta),
	MagentaGlazedTerracotta(MagentaGlazedTerracotta),
	LightBlueGlazedTerracotta(LightBlueGlazedTerracotta),
	YellowGlazedTerracotta(YellowGlazedTerracotta),
	LimeGlazedTerracotta(LimeGlazedTerracotta),
	PinkGlazedTerracotta(PinkGlazedTerracotta),
	GrayGlazedTerracotta(GrayGlazedTerracotta),
	LightGrayGlazedTerracotta(LightGrayGlazedTerracotta),
	CyanGlazedTerracotta(CyanGlazedTerracotta),
	PurpleGlazedTerracotta(PurpleGlazedTerracotta),
	BlueGlazedTerracotta(BlueGlazedTerracotta),
	BrownGlazedTerracotta(BrownGlazedTerracotta),
	GreenGlazedTerracotta(GreenGlazedTerracotta),
	RedGlazedTerracotta(RedGlazedTerracotta),
	BlackGlazedTerracotta(BlackGlazedTerracotta),
	WhiteConcrete(WhiteConcrete),
	OrangeConcrete(OrangeConcrete),
	MagentaConcrete(MagentaConcrete),
	LightBlueConcrete(LightBlueConcrete),
	YellowConcrete(YellowConcrete),
	LimeConcrete(LimeConcrete),
	PinkConcrete(PinkConcrete),
	GrayConcrete(GrayConcrete),
	LightGrayConcrete(LightGrayConcrete),
	CyanConcrete(CyanConcrete),
	PurpleConcrete(PurpleConcrete),
	BlueConcrete(BlueConcrete),
	BrownConcrete(BrownConcrete),
	GreenConcrete(GreenConcrete),
	RedConcrete(RedConcrete),
	BlackConcrete(BlackConcrete),
	WhiteConcretePowder(WhiteConcretePowder),
	OrangeConcretePowder(OrangeConcretePowder),
	MagentaConcretePowder(MagentaConcretePowder),
	LightBlueConcretePowder(LightBlueConcretePowder),
	YellowConcretePowder(YellowConcretePowder),
	LimeConcretePowder(LimeConcretePowder),
	PinkConcretePowder(PinkConcretePowder),
	GrayConcretePowder(GrayConcretePowder),
	LightGrayConcretePowder(LightGrayConcretePowder),
	CyanConcretePowder(CyanConcretePowder),
	PurpleConcretePowder(PurpleConcretePowder),
	BlueConcretePowder(BlueConcretePowder),
	BrownConcretePowder(BrownConcretePowder),
	GreenConcretePowder(GreenConcretePowder),
	RedConcretePowder(RedConcretePowder),
	BlackConcretePowder(BlackConcretePowder),
	Kelp(Kelp),
	KelpPlant(KelpPlant),
	DriedKelpBlock(DriedKelpBlock),
	TurtleEgg(TurtleEgg),
	DeadTubeCoralBlock(DeadTubeCoralBlock),
	DeadBrainCoralBlock(DeadBrainCoralBlock),
	DeadBubbleCoralBlock(DeadBubbleCoralBlock),
	DeadFireCoralBlock(DeadFireCoralBlock),
	DeadHornCoralBlock(DeadHornCoralBlock),
	TubeCoralBlock(TubeCoralBlock),
	BrainCoralBlock(BrainCoralBlock),
	BubbleCoralBlock(BubbleCoralBlock),
	FireCoralBlock(FireCoralBlock),
	HornCoralBlock(HornCoralBlock),
	DeadTubeCoral(DeadTubeCoral),
	DeadBrainCoral(DeadBrainCoral),
	DeadBubbleCoral(DeadBubbleCoral),
	DeadFireCoral(DeadFireCoral),
	DeadHornCoral(DeadHornCoral),
	TubeCoral(TubeCoral),
	BrainCoral(BrainCoral),
	BubbleCoral(BubbleCoral),
	FireCoral(FireCoral),
	HornCoral(HornCoral),
	DeadTubeCoralFan(DeadTubeCoralFan),
	DeadBrainCoralFan(DeadBrainCoralFan),
	DeadBubbleCoralFan(DeadBubbleCoralFan),
	DeadFireCoralFan(DeadFireCoralFan),
	DeadHornCoralFan(DeadHornCoralFan),
	TubeCoralFan(TubeCoralFan),
	BrainCoralFan(BrainCoralFan),
	BubbleCoralFan(BubbleCoralFan),
	FireCoralFan(FireCoralFan),
	HornCoralFan(HornCoralFan),
	DeadTubeCoralWallFan(DeadTubeCoralWallFan),
	DeadBrainCoralWallFan(DeadBrainCoralWallFan),
	DeadBubbleCoralWallFan(DeadBubbleCoralWallFan),
	DeadFireCoralWallFan(DeadFireCoralWallFan),
	DeadHornCoralWallFan(DeadHornCoralWallFan),
	TubeCoralWallFan(TubeCoralWallFan),
	BrainCoralWallFan(BrainCoralWallFan),
	BubbleCoralWallFan(BubbleCoralWallFan),
	FireCoralWallFan(FireCoralWallFan),
	HornCoralWallFan(HornCoralWallFan),
	SeaPickle(SeaPickle),
	BlueIce(BlueIce),
	Conduit(Conduit),
	BambooSapling(BambooSapling),
	Bamboo(Bamboo),
	PottedBamboo(PottedBamboo),
	VoidAir(VoidAir),
	CaveAir(CaveAir),
	BubbleColumn(BubbleColumn),
	PolishedGraniteStairs(PolishedGraniteStairs),
	SmoothRedSandstoneStairs(SmoothRedSandstoneStairs),
	MossyStoneBrickStairs(MossyStoneBrickStairs),
	PolishedDioriteStairs(PolishedDioriteStairs),
	MossyCobblestoneStairs(MossyCobblestoneStairs),
	EndStoneBrickStairs(EndStoneBrickStairs),
	StoneStairs(StoneStairs),
	SmoothSandstoneStairs(SmoothSandstoneStairs),
	SmoothQuartzStairs(SmoothQuartzStairs),
	GraniteStairs(GraniteStairs),
	AndesiteStairs(AndesiteStairs),
	RedNetherBrickStairs(RedNetherBrickStairs),
	PolishedAndesiteStairs(PolishedAndesiteStairs),
	DioriteStairs(DioriteStairs),
	PolishedGraniteSlab(PolishedGraniteSlab),
	SmoothRedSandstoneSlab(SmoothRedSandstoneSlab),
	MossyStoneBrickSlab(MossyStoneBrickSlab),
	PolishedDioriteSlab(PolishedDioriteSlab),
	MossyCobblestoneSlab(MossyCobblestoneSlab),
	EndStoneBrickSlab(EndStoneBrickSlab),
	SmoothSandstoneSlab(SmoothSandstoneSlab),
	SmoothQuartzSlab(SmoothQuartzSlab),
	GraniteSlab(GraniteSlab),
	AndesiteSlab(AndesiteSlab),
	RedNetherBrickSlab(RedNetherBrickSlab),
	PolishedAndesiteSlab(PolishedAndesiteSlab),
	DioriteSlab(DioriteSlab),
	BrickWall(BrickWall),
	PrismarineWall(PrismarineWall),
	RedSandstoneWall(RedSandstoneWall),
	MossyStoneBrickWall(MossyStoneBrickWall),
	GraniteWall(GraniteWall),
	StoneBrickWall(StoneBrickWall),
	MudBrickWall(MudBrickWall),
	NetherBrickWall(NetherBrickWall),
	AndesiteWall(AndesiteWall),
	RedNetherBrickWall(RedNetherBrickWall),
	SandstoneWall(SandstoneWall),
	EndStoneBrickWall(EndStoneBrickWall),
	DioriteWall(DioriteWall),
	Scaffolding(Scaffolding),
	Loom(Loom),
	Barrel(Barrel),
	Smoker(Smoker),
	BlastFurnace(BlastFurnace),
	CartographyTable(CartographyTable),
	FletchingTable(FletchingTable),
	Grindstone(Grindstone),
	Lectern(Lectern),
	SmithingTable(SmithingTable),
	Stonecutter(Stonecutter),
	Bell(Bell),
	Lantern(Lantern),
	SoulLantern(SoulLantern),
	Campfire(Campfire),
	SoulCampfire(SoulCampfire),
	SweetBerryBush(SweetBerryBush),
	WarpedStem(WarpedStem),
	StrippedWarpedStem(StrippedWarpedStem),
	WarpedHyphae(WarpedHyphae),
	StrippedWarpedHyphae(StrippedWarpedHyphae),
	WarpedNylium(WarpedNylium),
	WarpedFungus(WarpedFungus),
	WarpedWartBlock(WarpedWartBlock),
	WarpedRoots(WarpedRoots),
	NetherSprouts(NetherSprouts),
	CrimsonStem(CrimsonStem),
	StrippedCrimsonStem(StrippedCrimsonStem),
	CrimsonHyphae(CrimsonHyphae),
	StrippedCrimsonHyphae(StrippedCrimsonHyphae),
	CrimsonNylium(CrimsonNylium),
	CrimsonFungus(CrimsonFungus),
	Shroomlight(Shroomlight),
	WeepingVines(WeepingVines),
	WeepingVinesPlant(WeepingVinesPlant),
	TwistingVines(TwistingVines),
	TwistingVinesPlant(TwistingVinesPlant),
	CrimsonRoots(CrimsonRoots),
	CrimsonPlanks(CrimsonPlanks),
	WarpedPlanks(WarpedPlanks),
	CrimsonSlab(CrimsonSlab),
	WarpedSlab(WarpedSlab),
	CrimsonPressurePlate(CrimsonPressurePlate),
	WarpedPressurePlate(WarpedPressurePlate),
	CrimsonFence(CrimsonFence),
	WarpedFence(WarpedFence),
	CrimsonTrapdoor(CrimsonTrapdoor),
	WarpedTrapdoor(WarpedTrapdoor),
	CrimsonFenceGate(CrimsonFenceGate),
	WarpedFenceGate(WarpedFenceGate),
	CrimsonStairs(CrimsonStairs),
	WarpedStairs(WarpedStairs),
	CrimsonButton(CrimsonButton),
	WarpedButton(WarpedButton),
	CrimsonDoor(CrimsonDoor),
	WarpedDoor(WarpedDoor),
	CrimsonSign(CrimsonSign),
	WarpedSign(WarpedSign),
	CrimsonWallSign(CrimsonWallSign),
	WarpedWallSign(WarpedWallSign),
	StructureBlock(StructureBlock),
	Jigsaw(Jigsaw),
	Composter(Composter),
	Target(Target),
	BeeNest(BeeNest),
	Beehive(Beehive),
	HoneyBlock(HoneyBlock),
	HoneycombBlock(HoneycombBlock),
	NetheriteBlock(NetheriteBlock),
	AncientDebris(AncientDebris),
	CryingObsidian(CryingObsidian),
	RespawnAnchor(RespawnAnchor),
	PottedCrimsonFungus(PottedCrimsonFungus),
	PottedWarpedFungus(PottedWarpedFungus),
	PottedCrimsonRoots(PottedCrimsonRoots),
	PottedWarpedRoots(PottedWarpedRoots),
	Lodestone(Lodestone),
	Blackstone(Blackstone),
	BlackstoneStairs(BlackstoneStairs),
	BlackstoneWall(BlackstoneWall),
	BlackstoneSlab(BlackstoneSlab),
	PolishedBlackstone(PolishedBlackstone),
	PolishedBlackstoneBricks(PolishedBlackstoneBricks),
	CrackedPolishedBlackstoneBricks(CrackedPolishedBlackstoneBricks),
	ChiseledPolishedBlackstone(ChiseledPolishedBlackstone),
	PolishedBlackstoneBrickSlab(PolishedBlackstoneBrickSlab),
	PolishedBlackstoneBrickStairs(PolishedBlackstoneBrickStairs),
	PolishedBlackstoneBrickWall(PolishedBlackstoneBrickWall),
	GildedBlackstone(GildedBlackstone),
	PolishedBlackstoneStairs(PolishedBlackstoneStairs),
	PolishedBlackstoneSlab(PolishedBlackstoneSlab),
	PolishedBlackstonePressurePlate(PolishedBlackstonePressurePlate),
	PolishedBlackstoneButton(PolishedBlackstoneButton),
	PolishedBlackstoneWall(PolishedBlackstoneWall),
	ChiseledNetherBricks(ChiseledNetherBricks),
	CrackedNetherBricks(CrackedNetherBricks),
	QuartzBricks(QuartzBricks),
	Candle(Candle),
	WhiteCandle(WhiteCandle),
	OrangeCandle(OrangeCandle),
	MagentaCandle(MagentaCandle),
	LightBlueCandle(LightBlueCandle),
	YellowCandle(YellowCandle),
	LimeCandle(LimeCandle),
	PinkCandle(PinkCandle),
	GrayCandle(GrayCandle),
	LightGrayCandle(LightGrayCandle),
	CyanCandle(CyanCandle),
	PurpleCandle(PurpleCandle),
	BlueCandle(BlueCandle),
	BrownCandle(BrownCandle),
	GreenCandle(GreenCandle),
	RedCandle(RedCandle),
	BlackCandle(BlackCandle),
	CandleCake(CandleCake),
	WhiteCandleCake(WhiteCandleCake),
	OrangeCandleCake(OrangeCandleCake),
	MagentaCandleCake(MagentaCandleCake),
	LightBlueCandleCake(LightBlueCandleCake),
	YellowCandleCake(YellowCandleCake),
	LimeCandleCake(LimeCandleCake),
	PinkCandleCake(PinkCandleCake),
	GrayCandleCake(GrayCandleCake),
	LightGrayCandleCake(LightGrayCandleCake),
	CyanCandleCake(CyanCandleCake),
	PurpleCandleCake(PurpleCandleCake),
	BlueCandleCake(BlueCandleCake),
	BrownCandleCake(BrownCandleCake),
	GreenCandleCake(GreenCandleCake),
	RedCandleCake(RedCandleCake),
	BlackCandleCake(BlackCandleCake),
	AmethystBlock(AmethystBlock),
	BuddingAmethyst(BuddingAmethyst),
	AmethystCluster(AmethystCluster),
	LargeAmethystBud(LargeAmethystBud),
	MediumAmethystBud(MediumAmethystBud),
	SmallAmethystBud(SmallAmethystBud),
	Tuff(Tuff),
	Calcite(Calcite),
	TintedGlass(TintedGlass),
	PowderSnow(PowderSnow),
	SculkSensor(SculkSensor),
	Sculk(Sculk),
	SculkVein(SculkVein),
	SculkCatalyst(SculkCatalyst),
	SculkShrieker(SculkShrieker),
	OxidizedCopper(OxidizedCopper),
	WeatheredCopper(WeatheredCopper),
	ExposedCopper(ExposedCopper),
	CopperBlock(CopperBlock),
	CopperOre(CopperOre),
	DeepslateCopperOre(DeepslateCopperOre),
	OxidizedCutCopper(OxidizedCutCopper),
	WeatheredCutCopper(WeatheredCutCopper),
	ExposedCutCopper(ExposedCutCopper),
	CutCopper(CutCopper),
	OxidizedCutCopperStairs(OxidizedCutCopperStairs),
	WeatheredCutCopperStairs(WeatheredCutCopperStairs),
	ExposedCutCopperStairs(ExposedCutCopperStairs),
	CutCopperStairs(CutCopperStairs),
	OxidizedCutCopperSlab(OxidizedCutCopperSlab),
	WeatheredCutCopperSlab(WeatheredCutCopperSlab),
	ExposedCutCopperSlab(ExposedCutCopperSlab),
	CutCopperSlab(CutCopperSlab),
	WaxedCopperBlock(WaxedCopperBlock),
	WaxedWeatheredCopper(WaxedWeatheredCopper),
	WaxedExposedCopper(WaxedExposedCopper),
	WaxedOxidizedCopper(WaxedOxidizedCopper),
	WaxedOxidizedCutCopper(WaxedOxidizedCutCopper),
	WaxedWeatheredCutCopper(WaxedWeatheredCutCopper),
	WaxedExposedCutCopper(WaxedExposedCutCopper),
	WaxedCutCopper(WaxedCutCopper),
	WaxedOxidizedCutCopperStairs(WaxedOxidizedCutCopperStairs),
	WaxedWeatheredCutCopperStairs(WaxedWeatheredCutCopperStairs),
	WaxedExposedCutCopperStairs(WaxedExposedCutCopperStairs),
	WaxedCutCopperStairs(WaxedCutCopperStairs),
	WaxedOxidizedCutCopperSlab(WaxedOxidizedCutCopperSlab),
	WaxedWeatheredCutCopperSlab(WaxedWeatheredCutCopperSlab),
	WaxedExposedCutCopperSlab(WaxedExposedCutCopperSlab),
	WaxedCutCopperSlab(WaxedCutCopperSlab),
	LightningRod(LightningRod),
	PointedDripstone(PointedDripstone),
	DripstoneBlock(DripstoneBlock),
	CaveVines(CaveVines),
	CaveVinesPlant(CaveVinesPlant),
	SporeBlossom(SporeBlossom),
	Azalea(Azalea),
	FloweringAzalea(FloweringAzalea),
	MossCarpet(MossCarpet),
	MossBlock(MossBlock),
	BigDripleaf(BigDripleaf),
	BigDripleafStem(BigDripleafStem),
	SmallDripleaf(SmallDripleaf),
	HangingRoots(HangingRoots),
	RootedDirt(RootedDirt),
	Mud(Mud),
	Deepslate(Deepslate),
	CobbledDeepslate(CobbledDeepslate),
	CobbledDeepslateStairs(CobbledDeepslateStairs),
	CobbledDeepslateSlab(CobbledDeepslateSlab),
	CobbledDeepslateWall(CobbledDeepslateWall),
	PolishedDeepslate(PolishedDeepslate),
	PolishedDeepslateStairs(PolishedDeepslateStairs),
	PolishedDeepslateSlab(PolishedDeepslateSlab),
	PolishedDeepslateWall(PolishedDeepslateWall),
	DeepslateTiles(DeepslateTiles),
	DeepslateTileStairs(DeepslateTileStairs),
	DeepslateTileSlab(DeepslateTileSlab),
	DeepslateTileWall(DeepslateTileWall),
	DeepslateBricks(DeepslateBricks),
	DeepslateBrickStairs(DeepslateBrickStairs),
	DeepslateBrickSlab(DeepslateBrickSlab),
	DeepslateBrickWall(DeepslateBrickWall),
	ChiseledDeepslate(ChiseledDeepslate),
	CrackedDeepslateBricks(CrackedDeepslateBricks),
	CrackedDeepslateTiles(CrackedDeepslateTiles),
	InfestedDeepslate(InfestedDeepslate),
	SmoothBasalt(SmoothBasalt),
	RawIronBlock(RawIronBlock),
	RawCopperBlock(RawCopperBlock),
	RawGoldBlock(RawGoldBlock),
	PottedAzaleaBush(PottedAzaleaBush),
	PottedFloweringAzaleaBush(PottedFloweringAzaleaBush),
	OchreFroglight(OchreFroglight),
	VerdantFroglight(VerdantFroglight),
	PearlescentFroglight(PearlescentFroglight),
	Frogspawn(Frogspawn),
	ReinforcedDeepslate(ReinforcedDeepslate),
}

impl Block {
	pub fn get_display_name(&self) -> &'static str {
		match self {
			Block::Air(_) => Air::DISPLAY_NAME,
			Block::Stone(_) => Stone::DISPLAY_NAME,
			Block::Granite(_) => Granite::DISPLAY_NAME,
			Block::PolishedGranite(_) => PolishedGranite::DISPLAY_NAME,
			Block::Diorite(_) => Diorite::DISPLAY_NAME,
			Block::PolishedDiorite(_) => PolishedDiorite::DISPLAY_NAME,
			Block::Andesite(_) => Andesite::DISPLAY_NAME,
			Block::PolishedAndesite(_) => PolishedAndesite::DISPLAY_NAME,
			Block::GrassBlock(_) => GrassBlock::DISPLAY_NAME,
			Block::Dirt(_) => Dirt::DISPLAY_NAME,
			Block::CoarseDirt(_) => CoarseDirt::DISPLAY_NAME,
			Block::Podzol(_) => Podzol::DISPLAY_NAME,
			Block::Cobblestone(_) => Cobblestone::DISPLAY_NAME,
			Block::OakPlanks(_) => OakPlanks::DISPLAY_NAME,
			Block::SprucePlanks(_) => SprucePlanks::DISPLAY_NAME,
			Block::BirchPlanks(_) => BirchPlanks::DISPLAY_NAME,
			Block::JunglePlanks(_) => JunglePlanks::DISPLAY_NAME,
			Block::AcaciaPlanks(_) => AcaciaPlanks::DISPLAY_NAME,
			Block::DarkOakPlanks(_) => DarkOakPlanks::DISPLAY_NAME,
			Block::MangrovePlanks(_) => MangrovePlanks::DISPLAY_NAME,
			Block::OakSapling(_) => OakSapling::DISPLAY_NAME,
			Block::SpruceSapling(_) => SpruceSapling::DISPLAY_NAME,
			Block::BirchSapling(_) => BirchSapling::DISPLAY_NAME,
			Block::JungleSapling(_) => JungleSapling::DISPLAY_NAME,
			Block::AcaciaSapling(_) => AcaciaSapling::DISPLAY_NAME,
			Block::DarkOakSapling(_) => DarkOakSapling::DISPLAY_NAME,
			Block::MangrovePropagule(_) => MangrovePropagule::DISPLAY_NAME,
			Block::Bedrock(_) => Bedrock::DISPLAY_NAME,
			Block::Water(_) => Water::DISPLAY_NAME,
			Block::Lava(_) => Lava::DISPLAY_NAME,
			Block::Sand(_) => Sand::DISPLAY_NAME,
			Block::RedSand(_) => RedSand::DISPLAY_NAME,
			Block::Gravel(_) => Gravel::DISPLAY_NAME,
			Block::GoldOre(_) => GoldOre::DISPLAY_NAME,
			Block::DeepslateGoldOre(_) => DeepslateGoldOre::DISPLAY_NAME,
			Block::IronOre(_) => IronOre::DISPLAY_NAME,
			Block::DeepslateIronOre(_) => DeepslateIronOre::DISPLAY_NAME,
			Block::CoalOre(_) => CoalOre::DISPLAY_NAME,
			Block::DeepslateCoalOre(_) => DeepslateCoalOre::DISPLAY_NAME,
			Block::NetherGoldOre(_) => NetherGoldOre::DISPLAY_NAME,
			Block::OakLog(_) => OakLog::DISPLAY_NAME,
			Block::SpruceLog(_) => SpruceLog::DISPLAY_NAME,
			Block::BirchLog(_) => BirchLog::DISPLAY_NAME,
			Block::JungleLog(_) => JungleLog::DISPLAY_NAME,
			Block::AcaciaLog(_) => AcaciaLog::DISPLAY_NAME,
			Block::DarkOakLog(_) => DarkOakLog::DISPLAY_NAME,
			Block::MangroveLog(_) => MangroveLog::DISPLAY_NAME,
			Block::MangroveRoots(_) => MangroveRoots::DISPLAY_NAME,
			Block::MuddyMangroveRoots(_) => MuddyMangroveRoots::DISPLAY_NAME,
			Block::StrippedSpruceLog(_) => StrippedSpruceLog::DISPLAY_NAME,
			Block::StrippedBirchLog(_) => StrippedBirchLog::DISPLAY_NAME,
			Block::StrippedJungleLog(_) => StrippedJungleLog::DISPLAY_NAME,
			Block::StrippedAcaciaLog(_) => StrippedAcaciaLog::DISPLAY_NAME,
			Block::StrippedDarkOakLog(_) => StrippedDarkOakLog::DISPLAY_NAME,
			Block::StrippedOakLog(_) => StrippedOakLog::DISPLAY_NAME,
			Block::StrippedMangroveLog(_) => StrippedMangroveLog::DISPLAY_NAME,
			Block::OakWood(_) => OakWood::DISPLAY_NAME,
			Block::SpruceWood(_) => SpruceWood::DISPLAY_NAME,
			Block::BirchWood(_) => BirchWood::DISPLAY_NAME,
			Block::JungleWood(_) => JungleWood::DISPLAY_NAME,
			Block::AcaciaWood(_) => AcaciaWood::DISPLAY_NAME,
			Block::DarkOakWood(_) => DarkOakWood::DISPLAY_NAME,
			Block::MangroveWood(_) => MangroveWood::DISPLAY_NAME,
			Block::StrippedOakWood(_) => StrippedOakWood::DISPLAY_NAME,
			Block::StrippedSpruceWood(_) => StrippedSpruceWood::DISPLAY_NAME,
			Block::StrippedBirchWood(_) => StrippedBirchWood::DISPLAY_NAME,
			Block::StrippedJungleWood(_) => StrippedJungleWood::DISPLAY_NAME,
			Block::StrippedAcaciaWood(_) => StrippedAcaciaWood::DISPLAY_NAME,
			Block::StrippedDarkOakWood(_) => StrippedDarkOakWood::DISPLAY_NAME,
			Block::StrippedMangroveWood(_) => StrippedMangroveWood::DISPLAY_NAME,
			Block::OakLeaves(_) => OakLeaves::DISPLAY_NAME,
			Block::SpruceLeaves(_) => SpruceLeaves::DISPLAY_NAME,
			Block::BirchLeaves(_) => BirchLeaves::DISPLAY_NAME,
			Block::JungleLeaves(_) => JungleLeaves::DISPLAY_NAME,
			Block::AcaciaLeaves(_) => AcaciaLeaves::DISPLAY_NAME,
			Block::DarkOakLeaves(_) => DarkOakLeaves::DISPLAY_NAME,
			Block::MangroveLeaves(_) => MangroveLeaves::DISPLAY_NAME,
			Block::AzaleaLeaves(_) => AzaleaLeaves::DISPLAY_NAME,
			Block::FloweringAzaleaLeaves(_) => FloweringAzaleaLeaves::DISPLAY_NAME,
			Block::Sponge(_) => Sponge::DISPLAY_NAME,
			Block::WetSponge(_) => WetSponge::DISPLAY_NAME,
			Block::Glass(_) => Glass::DISPLAY_NAME,
			Block::LapisOre(_) => LapisOre::DISPLAY_NAME,
			Block::DeepslateLapisOre(_) => DeepslateLapisOre::DISPLAY_NAME,
			Block::LapisBlock(_) => LapisBlock::DISPLAY_NAME,
			Block::Dispenser(_) => Dispenser::DISPLAY_NAME,
			Block::Sandstone(_) => Sandstone::DISPLAY_NAME,
			Block::ChiseledSandstone(_) => ChiseledSandstone::DISPLAY_NAME,
			Block::CutSandstone(_) => CutSandstone::DISPLAY_NAME,
			Block::NoteBlock(_) => NoteBlock::DISPLAY_NAME,
			Block::WhiteBed(_) => WhiteBed::DISPLAY_NAME,
			Block::OrangeBed(_) => OrangeBed::DISPLAY_NAME,
			Block::MagentaBed(_) => MagentaBed::DISPLAY_NAME,
			Block::LightBlueBed(_) => LightBlueBed::DISPLAY_NAME,
			Block::YellowBed(_) => YellowBed::DISPLAY_NAME,
			Block::LimeBed(_) => LimeBed::DISPLAY_NAME,
			Block::PinkBed(_) => PinkBed::DISPLAY_NAME,
			Block::GrayBed(_) => GrayBed::DISPLAY_NAME,
			Block::LightGrayBed(_) => LightGrayBed::DISPLAY_NAME,
			Block::CyanBed(_) => CyanBed::DISPLAY_NAME,
			Block::PurpleBed(_) => PurpleBed::DISPLAY_NAME,
			Block::BlueBed(_) => BlueBed::DISPLAY_NAME,
			Block::BrownBed(_) => BrownBed::DISPLAY_NAME,
			Block::GreenBed(_) => GreenBed::DISPLAY_NAME,
			Block::RedBed(_) => RedBed::DISPLAY_NAME,
			Block::BlackBed(_) => BlackBed::DISPLAY_NAME,
			Block::PoweredRail(_) => PoweredRail::DISPLAY_NAME,
			Block::DetectorRail(_) => DetectorRail::DISPLAY_NAME,
			Block::StickyPiston(_) => StickyPiston::DISPLAY_NAME,
			Block::Cobweb(_) => Cobweb::DISPLAY_NAME,
			Block::Grass(_) => Grass::DISPLAY_NAME,
			Block::Fern(_) => Fern::DISPLAY_NAME,
			Block::DeadBush(_) => DeadBush::DISPLAY_NAME,
			Block::Seagrass(_) => Seagrass::DISPLAY_NAME,
			Block::TallSeagrass(_) => TallSeagrass::DISPLAY_NAME,
			Block::Piston(_) => Piston::DISPLAY_NAME,
			Block::PistonHead(_) => PistonHead::DISPLAY_NAME,
			Block::WhiteWool(_) => WhiteWool::DISPLAY_NAME,
			Block::OrangeWool(_) => OrangeWool::DISPLAY_NAME,
			Block::MagentaWool(_) => MagentaWool::DISPLAY_NAME,
			Block::LightBlueWool(_) => LightBlueWool::DISPLAY_NAME,
			Block::YellowWool(_) => YellowWool::DISPLAY_NAME,
			Block::LimeWool(_) => LimeWool::DISPLAY_NAME,
			Block::PinkWool(_) => PinkWool::DISPLAY_NAME,
			Block::GrayWool(_) => GrayWool::DISPLAY_NAME,
			Block::LightGrayWool(_) => LightGrayWool::DISPLAY_NAME,
			Block::CyanWool(_) => CyanWool::DISPLAY_NAME,
			Block::PurpleWool(_) => PurpleWool::DISPLAY_NAME,
			Block::BlueWool(_) => BlueWool::DISPLAY_NAME,
			Block::BrownWool(_) => BrownWool::DISPLAY_NAME,
			Block::GreenWool(_) => GreenWool::DISPLAY_NAME,
			Block::RedWool(_) => RedWool::DISPLAY_NAME,
			Block::BlackWool(_) => BlackWool::DISPLAY_NAME,
			Block::MovingPiston(_) => MovingPiston::DISPLAY_NAME,
			Block::Dandelion(_) => Dandelion::DISPLAY_NAME,
			Block::Poppy(_) => Poppy::DISPLAY_NAME,
			Block::BlueOrchid(_) => BlueOrchid::DISPLAY_NAME,
			Block::Allium(_) => Allium::DISPLAY_NAME,
			Block::AzureBluet(_) => AzureBluet::DISPLAY_NAME,
			Block::RedTulip(_) => RedTulip::DISPLAY_NAME,
			Block::OrangeTulip(_) => OrangeTulip::DISPLAY_NAME,
			Block::WhiteTulip(_) => WhiteTulip::DISPLAY_NAME,
			Block::PinkTulip(_) => PinkTulip::DISPLAY_NAME,
			Block::OxeyeDaisy(_) => OxeyeDaisy::DISPLAY_NAME,
			Block::Cornflower(_) => Cornflower::DISPLAY_NAME,
			Block::WitherRose(_) => WitherRose::DISPLAY_NAME,
			Block::LilyOfTheValley(_) => LilyOfTheValley::DISPLAY_NAME,
			Block::BrownMushroom(_) => BrownMushroom::DISPLAY_NAME,
			Block::RedMushroom(_) => RedMushroom::DISPLAY_NAME,
			Block::GoldBlock(_) => GoldBlock::DISPLAY_NAME,
			Block::IronBlock(_) => IronBlock::DISPLAY_NAME,
			Block::Bricks(_) => Bricks::DISPLAY_NAME,
			Block::Tnt(_) => Tnt::DISPLAY_NAME,
			Block::Bookshelf(_) => Bookshelf::DISPLAY_NAME,
			Block::MossyCobblestone(_) => MossyCobblestone::DISPLAY_NAME,
			Block::Obsidian(_) => Obsidian::DISPLAY_NAME,
			Block::Torch(_) => Torch::DISPLAY_NAME,
			Block::WallTorch(_) => WallTorch::DISPLAY_NAME,
			Block::Fire(_) => Fire::DISPLAY_NAME,
			Block::SoulFire(_) => SoulFire::DISPLAY_NAME,
			Block::Spawner(_) => Spawner::DISPLAY_NAME,
			Block::OakStairs(_) => OakStairs::DISPLAY_NAME,
			Block::Chest(_) => Chest::DISPLAY_NAME,
			Block::RedstoneWire(_) => RedstoneWire::DISPLAY_NAME,
			Block::DiamondOre(_) => DiamondOre::DISPLAY_NAME,
			Block::DeepslateDiamondOre(_) => DeepslateDiamondOre::DISPLAY_NAME,
			Block::DiamondBlock(_) => DiamondBlock::DISPLAY_NAME,
			Block::CraftingTable(_) => CraftingTable::DISPLAY_NAME,
			Block::Wheat(_) => Wheat::DISPLAY_NAME,
			Block::Farmland(_) => Farmland::DISPLAY_NAME,
			Block::Furnace(_) => Furnace::DISPLAY_NAME,
			Block::OakSign(_) => OakSign::DISPLAY_NAME,
			Block::SpruceSign(_) => SpruceSign::DISPLAY_NAME,
			Block::BirchSign(_) => BirchSign::DISPLAY_NAME,
			Block::AcaciaSign(_) => AcaciaSign::DISPLAY_NAME,
			Block::JungleSign(_) => JungleSign::DISPLAY_NAME,
			Block::DarkOakSign(_) => DarkOakSign::DISPLAY_NAME,
			Block::MangroveSign(_) => MangroveSign::DISPLAY_NAME,
			Block::OakDoor(_) => OakDoor::DISPLAY_NAME,
			Block::Ladder(_) => Ladder::DISPLAY_NAME,
			Block::Rail(_) => Rail::DISPLAY_NAME,
			Block::CobblestoneStairs(_) => CobblestoneStairs::DISPLAY_NAME,
			Block::OakWallSign(_) => OakWallSign::DISPLAY_NAME,
			Block::SpruceWallSign(_) => SpruceWallSign::DISPLAY_NAME,
			Block::BirchWallSign(_) => BirchWallSign::DISPLAY_NAME,
			Block::AcaciaWallSign(_) => AcaciaWallSign::DISPLAY_NAME,
			Block::JungleWallSign(_) => JungleWallSign::DISPLAY_NAME,
			Block::DarkOakWallSign(_) => DarkOakWallSign::DISPLAY_NAME,
			Block::MangroveWallSign(_) => MangroveWallSign::DISPLAY_NAME,
			Block::Lever(_) => Lever::DISPLAY_NAME,
			Block::StonePressurePlate(_) => StonePressurePlate::DISPLAY_NAME,
			Block::IronDoor(_) => IronDoor::DISPLAY_NAME,
			Block::OakPressurePlate(_) => OakPressurePlate::DISPLAY_NAME,
			Block::SprucePressurePlate(_) => SprucePressurePlate::DISPLAY_NAME,
			Block::BirchPressurePlate(_) => BirchPressurePlate::DISPLAY_NAME,
			Block::JunglePressurePlate(_) => JunglePressurePlate::DISPLAY_NAME,
			Block::AcaciaPressurePlate(_) => AcaciaPressurePlate::DISPLAY_NAME,
			Block::DarkOakPressurePlate(_) => DarkOakPressurePlate::DISPLAY_NAME,
			Block::MangrovePressurePlate(_) => MangrovePressurePlate::DISPLAY_NAME,
			Block::RedstoneOre(_) => RedstoneOre::DISPLAY_NAME,
			Block::DeepslateRedstoneOre(_) => DeepslateRedstoneOre::DISPLAY_NAME,
			Block::RedstoneTorch(_) => RedstoneTorch::DISPLAY_NAME,
			Block::RedstoneWallTorch(_) => RedstoneWallTorch::DISPLAY_NAME,
			Block::StoneButton(_) => StoneButton::DISPLAY_NAME,
			Block::Snow(_) => Snow::DISPLAY_NAME,
			Block::Ice(_) => Ice::DISPLAY_NAME,
			Block::SnowBlock(_) => SnowBlock::DISPLAY_NAME,
			Block::Cactus(_) => Cactus::DISPLAY_NAME,
			Block::Clay(_) => Clay::DISPLAY_NAME,
			Block::SugarCane(_) => SugarCane::DISPLAY_NAME,
			Block::Jukebox(_) => Jukebox::DISPLAY_NAME,
			Block::OakFence(_) => OakFence::DISPLAY_NAME,
			Block::Pumpkin(_) => Pumpkin::DISPLAY_NAME,
			Block::Netherrack(_) => Netherrack::DISPLAY_NAME,
			Block::SoulSand(_) => SoulSand::DISPLAY_NAME,
			Block::SoulSoil(_) => SoulSoil::DISPLAY_NAME,
			Block::Basalt(_) => Basalt::DISPLAY_NAME,
			Block::PolishedBasalt(_) => PolishedBasalt::DISPLAY_NAME,
			Block::SoulTorch(_) => SoulTorch::DISPLAY_NAME,
			Block::SoulWallTorch(_) => SoulWallTorch::DISPLAY_NAME,
			Block::Glowstone(_) => Glowstone::DISPLAY_NAME,
			Block::NetherPortal(_) => NetherPortal::DISPLAY_NAME,
			Block::CarvedPumpkin(_) => CarvedPumpkin::DISPLAY_NAME,
			Block::JackOLantern(_) => JackOLantern::DISPLAY_NAME,
			Block::Cake(_) => Cake::DISPLAY_NAME,
			Block::Repeater(_) => Repeater::DISPLAY_NAME,
			Block::WhiteStainedGlass(_) => WhiteStainedGlass::DISPLAY_NAME,
			Block::OrangeStainedGlass(_) => OrangeStainedGlass::DISPLAY_NAME,
			Block::MagentaStainedGlass(_) => MagentaStainedGlass::DISPLAY_NAME,
			Block::LightBlueStainedGlass(_) => LightBlueStainedGlass::DISPLAY_NAME,
			Block::YellowStainedGlass(_) => YellowStainedGlass::DISPLAY_NAME,
			Block::LimeStainedGlass(_) => LimeStainedGlass::DISPLAY_NAME,
			Block::PinkStainedGlass(_) => PinkStainedGlass::DISPLAY_NAME,
			Block::GrayStainedGlass(_) => GrayStainedGlass::DISPLAY_NAME,
			Block::LightGrayStainedGlass(_) => LightGrayStainedGlass::DISPLAY_NAME,
			Block::CyanStainedGlass(_) => CyanStainedGlass::DISPLAY_NAME,
			Block::PurpleStainedGlass(_) => PurpleStainedGlass::DISPLAY_NAME,
			Block::BlueStainedGlass(_) => BlueStainedGlass::DISPLAY_NAME,
			Block::BrownStainedGlass(_) => BrownStainedGlass::DISPLAY_NAME,
			Block::GreenStainedGlass(_) => GreenStainedGlass::DISPLAY_NAME,
			Block::RedStainedGlass(_) => RedStainedGlass::DISPLAY_NAME,
			Block::BlackStainedGlass(_) => BlackStainedGlass::DISPLAY_NAME,
			Block::OakTrapdoor(_) => OakTrapdoor::DISPLAY_NAME,
			Block::SpruceTrapdoor(_) => SpruceTrapdoor::DISPLAY_NAME,
			Block::BirchTrapdoor(_) => BirchTrapdoor::DISPLAY_NAME,
			Block::JungleTrapdoor(_) => JungleTrapdoor::DISPLAY_NAME,
			Block::AcaciaTrapdoor(_) => AcaciaTrapdoor::DISPLAY_NAME,
			Block::DarkOakTrapdoor(_) => DarkOakTrapdoor::DISPLAY_NAME,
			Block::MangroveTrapdoor(_) => MangroveTrapdoor::DISPLAY_NAME,
			Block::StoneBricks(_) => StoneBricks::DISPLAY_NAME,
			Block::MossyStoneBricks(_) => MossyStoneBricks::DISPLAY_NAME,
			Block::CrackedStoneBricks(_) => CrackedStoneBricks::DISPLAY_NAME,
			Block::ChiseledStoneBricks(_) => ChiseledStoneBricks::DISPLAY_NAME,
			Block::PackedMud(_) => PackedMud::DISPLAY_NAME,
			Block::MudBricks(_) => MudBricks::DISPLAY_NAME,
			Block::InfestedStone(_) => InfestedStone::DISPLAY_NAME,
			Block::InfestedCobblestone(_) => InfestedCobblestone::DISPLAY_NAME,
			Block::InfestedStoneBricks(_) => InfestedStoneBricks::DISPLAY_NAME,
			Block::InfestedMossyStoneBricks(_) => InfestedMossyStoneBricks::DISPLAY_NAME,
			Block::InfestedCrackedStoneBricks(_) => InfestedCrackedStoneBricks::DISPLAY_NAME,
			Block::InfestedChiseledStoneBricks(_) => InfestedChiseledStoneBricks::DISPLAY_NAME,
			Block::BrownMushroomBlock(_) => BrownMushroomBlock::DISPLAY_NAME,
			Block::RedMushroomBlock(_) => RedMushroomBlock::DISPLAY_NAME,
			Block::MushroomStem(_) => MushroomStem::DISPLAY_NAME,
			Block::IronBars(_) => IronBars::DISPLAY_NAME,
			Block::Chain(_) => Chain::DISPLAY_NAME,
			Block::GlassPane(_) => GlassPane::DISPLAY_NAME,
			Block::Melon(_) => Melon::DISPLAY_NAME,
			Block::AttachedPumpkinStem(_) => AttachedPumpkinStem::DISPLAY_NAME,
			Block::AttachedMelonStem(_) => AttachedMelonStem::DISPLAY_NAME,
			Block::PumpkinStem(_) => PumpkinStem::DISPLAY_NAME,
			Block::MelonStem(_) => MelonStem::DISPLAY_NAME,
			Block::Vine(_) => Vine::DISPLAY_NAME,
			Block::GlowLichen(_) => GlowLichen::DISPLAY_NAME,
			Block::OakFenceGate(_) => OakFenceGate::DISPLAY_NAME,
			Block::BrickStairs(_) => BrickStairs::DISPLAY_NAME,
			Block::StoneBrickStairs(_) => StoneBrickStairs::DISPLAY_NAME,
			Block::MudBrickStairs(_) => MudBrickStairs::DISPLAY_NAME,
			Block::Mycelium(_) => Mycelium::DISPLAY_NAME,
			Block::LilyPad(_) => LilyPad::DISPLAY_NAME,
			Block::NetherBricks(_) => NetherBricks::DISPLAY_NAME,
			Block::NetherBrickFence(_) => NetherBrickFence::DISPLAY_NAME,
			Block::NetherBrickStairs(_) => NetherBrickStairs::DISPLAY_NAME,
			Block::NetherWart(_) => NetherWart::DISPLAY_NAME,
			Block::EnchantingTable(_) => EnchantingTable::DISPLAY_NAME,
			Block::BrewingStand(_) => BrewingStand::DISPLAY_NAME,
			Block::Cauldron(_) => Cauldron::DISPLAY_NAME,
			Block::WaterCauldron(_) => WaterCauldron::DISPLAY_NAME,
			Block::LavaCauldron(_) => LavaCauldron::DISPLAY_NAME,
			Block::PowderSnowCauldron(_) => PowderSnowCauldron::DISPLAY_NAME,
			Block::EndPortal(_) => EndPortal::DISPLAY_NAME,
			Block::EndPortalFrame(_) => EndPortalFrame::DISPLAY_NAME,
			Block::EndStone(_) => EndStone::DISPLAY_NAME,
			Block::DragonEgg(_) => DragonEgg::DISPLAY_NAME,
			Block::RedstoneLamp(_) => RedstoneLamp::DISPLAY_NAME,
			Block::Cocoa(_) => Cocoa::DISPLAY_NAME,
			Block::SandstoneStairs(_) => SandstoneStairs::DISPLAY_NAME,
			Block::EmeraldOre(_) => EmeraldOre::DISPLAY_NAME,
			Block::DeepslateEmeraldOre(_) => DeepslateEmeraldOre::DISPLAY_NAME,
			Block::EnderChest(_) => EnderChest::DISPLAY_NAME,
			Block::TripwireHook(_) => TripwireHook::DISPLAY_NAME,
			Block::Tripwire(_) => Tripwire::DISPLAY_NAME,
			Block::EmeraldBlock(_) => EmeraldBlock::DISPLAY_NAME,
			Block::SpruceStairs(_) => SpruceStairs::DISPLAY_NAME,
			Block::BirchStairs(_) => BirchStairs::DISPLAY_NAME,
			Block::JungleStairs(_) => JungleStairs::DISPLAY_NAME,
			Block::CommandBlock(_) => CommandBlock::DISPLAY_NAME,
			Block::Beacon(_) => Beacon::DISPLAY_NAME,
			Block::CobblestoneWall(_) => CobblestoneWall::DISPLAY_NAME,
			Block::MossyCobblestoneWall(_) => MossyCobblestoneWall::DISPLAY_NAME,
			Block::FlowerPot(_) => FlowerPot::DISPLAY_NAME,
			Block::PottedOakSapling(_) => PottedOakSapling::DISPLAY_NAME,
			Block::PottedSpruceSapling(_) => PottedSpruceSapling::DISPLAY_NAME,
			Block::PottedBirchSapling(_) => PottedBirchSapling::DISPLAY_NAME,
			Block::PottedJungleSapling(_) => PottedJungleSapling::DISPLAY_NAME,
			Block::PottedAcaciaSapling(_) => PottedAcaciaSapling::DISPLAY_NAME,
			Block::PottedDarkOakSapling(_) => PottedDarkOakSapling::DISPLAY_NAME,
			Block::PottedMangrovePropagule(_) => PottedMangrovePropagule::DISPLAY_NAME,
			Block::PottedFern(_) => PottedFern::DISPLAY_NAME,
			Block::PottedDandelion(_) => PottedDandelion::DISPLAY_NAME,
			Block::PottedPoppy(_) => PottedPoppy::DISPLAY_NAME,
			Block::PottedBlueOrchid(_) => PottedBlueOrchid::DISPLAY_NAME,
			Block::PottedAllium(_) => PottedAllium::DISPLAY_NAME,
			Block::PottedAzureBluet(_) => PottedAzureBluet::DISPLAY_NAME,
			Block::PottedRedTulip(_) => PottedRedTulip::DISPLAY_NAME,
			Block::PottedOrangeTulip(_) => PottedOrangeTulip::DISPLAY_NAME,
			Block::PottedWhiteTulip(_) => PottedWhiteTulip::DISPLAY_NAME,
			Block::PottedPinkTulip(_) => PottedPinkTulip::DISPLAY_NAME,
			Block::PottedOxeyeDaisy(_) => PottedOxeyeDaisy::DISPLAY_NAME,
			Block::PottedCornflower(_) => PottedCornflower::DISPLAY_NAME,
			Block::PottedLilyOfTheValley(_) => PottedLilyOfTheValley::DISPLAY_NAME,
			Block::PottedWitherRose(_) => PottedWitherRose::DISPLAY_NAME,
			Block::PottedRedMushroom(_) => PottedRedMushroom::DISPLAY_NAME,
			Block::PottedBrownMushroom(_) => PottedBrownMushroom::DISPLAY_NAME,
			Block::PottedDeadBush(_) => PottedDeadBush::DISPLAY_NAME,
			Block::PottedCactus(_) => PottedCactus::DISPLAY_NAME,
			Block::Carrots(_) => Carrots::DISPLAY_NAME,
			Block::Potatoes(_) => Potatoes::DISPLAY_NAME,
			Block::OakButton(_) => OakButton::DISPLAY_NAME,
			Block::SpruceButton(_) => SpruceButton::DISPLAY_NAME,
			Block::BirchButton(_) => BirchButton::DISPLAY_NAME,
			Block::JungleButton(_) => JungleButton::DISPLAY_NAME,
			Block::AcaciaButton(_) => AcaciaButton::DISPLAY_NAME,
			Block::DarkOakButton(_) => DarkOakButton::DISPLAY_NAME,
			Block::MangroveButton(_) => MangroveButton::DISPLAY_NAME,
			Block::SkeletonSkull(_) => SkeletonSkull::DISPLAY_NAME,
			Block::SkeletonWallSkull(_) => SkeletonWallSkull::DISPLAY_NAME,
			Block::WitherSkeletonSkull(_) => WitherSkeletonSkull::DISPLAY_NAME,
			Block::WitherSkeletonWallSkull(_) => WitherSkeletonWallSkull::DISPLAY_NAME,
			Block::ZombieHead(_) => ZombieHead::DISPLAY_NAME,
			Block::ZombieWallHead(_) => ZombieWallHead::DISPLAY_NAME,
			Block::PlayerHead(_) => PlayerHead::DISPLAY_NAME,
			Block::PlayerWallHead(_) => PlayerWallHead::DISPLAY_NAME,
			Block::CreeperHead(_) => CreeperHead::DISPLAY_NAME,
			Block::CreeperWallHead(_) => CreeperWallHead::DISPLAY_NAME,
			Block::DragonHead(_) => DragonHead::DISPLAY_NAME,
			Block::DragonWallHead(_) => DragonWallHead::DISPLAY_NAME,
			Block::Anvil(_) => Anvil::DISPLAY_NAME,
			Block::ChippedAnvil(_) => ChippedAnvil::DISPLAY_NAME,
			Block::DamagedAnvil(_) => DamagedAnvil::DISPLAY_NAME,
			Block::TrappedChest(_) => TrappedChest::DISPLAY_NAME,
			Block::LightWeightedPressurePlate(_) => LightWeightedPressurePlate::DISPLAY_NAME,
			Block::HeavyWeightedPressurePlate(_) => HeavyWeightedPressurePlate::DISPLAY_NAME,
			Block::Comparator(_) => Comparator::DISPLAY_NAME,
			Block::DaylightDetector(_) => DaylightDetector::DISPLAY_NAME,
			Block::RedstoneBlock(_) => RedstoneBlock::DISPLAY_NAME,
			Block::NetherQuartzOre(_) => NetherQuartzOre::DISPLAY_NAME,
			Block::Hopper(_) => Hopper::DISPLAY_NAME,
			Block::QuartzBlock(_) => QuartzBlock::DISPLAY_NAME,
			Block::ChiseledQuartzBlock(_) => ChiseledQuartzBlock::DISPLAY_NAME,
			Block::QuartzPillar(_) => QuartzPillar::DISPLAY_NAME,
			Block::QuartzStairs(_) => QuartzStairs::DISPLAY_NAME,
			Block::ActivatorRail(_) => ActivatorRail::DISPLAY_NAME,
			Block::Dropper(_) => Dropper::DISPLAY_NAME,
			Block::WhiteTerracotta(_) => WhiteTerracotta::DISPLAY_NAME,
			Block::OrangeTerracotta(_) => OrangeTerracotta::DISPLAY_NAME,
			Block::MagentaTerracotta(_) => MagentaTerracotta::DISPLAY_NAME,
			Block::LightBlueTerracotta(_) => LightBlueTerracotta::DISPLAY_NAME,
			Block::YellowTerracotta(_) => YellowTerracotta::DISPLAY_NAME,
			Block::LimeTerracotta(_) => LimeTerracotta::DISPLAY_NAME,
			Block::PinkTerracotta(_) => PinkTerracotta::DISPLAY_NAME,
			Block::GrayTerracotta(_) => GrayTerracotta::DISPLAY_NAME,
			Block::LightGrayTerracotta(_) => LightGrayTerracotta::DISPLAY_NAME,
			Block::CyanTerracotta(_) => CyanTerracotta::DISPLAY_NAME,
			Block::PurpleTerracotta(_) => PurpleTerracotta::DISPLAY_NAME,
			Block::BlueTerracotta(_) => BlueTerracotta::DISPLAY_NAME,
			Block::BrownTerracotta(_) => BrownTerracotta::DISPLAY_NAME,
			Block::GreenTerracotta(_) => GreenTerracotta::DISPLAY_NAME,
			Block::RedTerracotta(_) => RedTerracotta::DISPLAY_NAME,
			Block::BlackTerracotta(_) => BlackTerracotta::DISPLAY_NAME,
			Block::WhiteStainedGlassPane(_) => WhiteStainedGlassPane::DISPLAY_NAME,
			Block::OrangeStainedGlassPane(_) => OrangeStainedGlassPane::DISPLAY_NAME,
			Block::MagentaStainedGlassPane(_) => MagentaStainedGlassPane::DISPLAY_NAME,
			Block::LightBlueStainedGlassPane(_) => LightBlueStainedGlassPane::DISPLAY_NAME,
			Block::YellowStainedGlassPane(_) => YellowStainedGlassPane::DISPLAY_NAME,
			Block::LimeStainedGlassPane(_) => LimeStainedGlassPane::DISPLAY_NAME,
			Block::PinkStainedGlassPane(_) => PinkStainedGlassPane::DISPLAY_NAME,
			Block::GrayStainedGlassPane(_) => GrayStainedGlassPane::DISPLAY_NAME,
			Block::LightGrayStainedGlassPane(_) => LightGrayStainedGlassPane::DISPLAY_NAME,
			Block::CyanStainedGlassPane(_) => CyanStainedGlassPane::DISPLAY_NAME,
			Block::PurpleStainedGlassPane(_) => PurpleStainedGlassPane::DISPLAY_NAME,
			Block::BlueStainedGlassPane(_) => BlueStainedGlassPane::DISPLAY_NAME,
			Block::BrownStainedGlassPane(_) => BrownStainedGlassPane::DISPLAY_NAME,
			Block::GreenStainedGlassPane(_) => GreenStainedGlassPane::DISPLAY_NAME,
			Block::RedStainedGlassPane(_) => RedStainedGlassPane::DISPLAY_NAME,
			Block::BlackStainedGlassPane(_) => BlackStainedGlassPane::DISPLAY_NAME,
			Block::AcaciaStairs(_) => AcaciaStairs::DISPLAY_NAME,
			Block::DarkOakStairs(_) => DarkOakStairs::DISPLAY_NAME,
			Block::MangroveStairs(_) => MangroveStairs::DISPLAY_NAME,
			Block::SlimeBlock(_) => SlimeBlock::DISPLAY_NAME,
			Block::Barrier(_) => Barrier::DISPLAY_NAME,
			Block::Light(_) => Light::DISPLAY_NAME,
			Block::IronTrapdoor(_) => IronTrapdoor::DISPLAY_NAME,
			Block::Prismarine(_) => Prismarine::DISPLAY_NAME,
			Block::PrismarineBricks(_) => PrismarineBricks::DISPLAY_NAME,
			Block::DarkPrismarine(_) => DarkPrismarine::DISPLAY_NAME,
			Block::PrismarineStairs(_) => PrismarineStairs::DISPLAY_NAME,
			Block::PrismarineBrickStairs(_) => PrismarineBrickStairs::DISPLAY_NAME,
			Block::DarkPrismarineStairs(_) => DarkPrismarineStairs::DISPLAY_NAME,
			Block::PrismarineSlab(_) => PrismarineSlab::DISPLAY_NAME,
			Block::PrismarineBrickSlab(_) => PrismarineBrickSlab::DISPLAY_NAME,
			Block::DarkPrismarineSlab(_) => DarkPrismarineSlab::DISPLAY_NAME,
			Block::SeaLantern(_) => SeaLantern::DISPLAY_NAME,
			Block::HayBlock(_) => HayBlock::DISPLAY_NAME,
			Block::WhiteCarpet(_) => WhiteCarpet::DISPLAY_NAME,
			Block::OrangeCarpet(_) => OrangeCarpet::DISPLAY_NAME,
			Block::MagentaCarpet(_) => MagentaCarpet::DISPLAY_NAME,
			Block::LightBlueCarpet(_) => LightBlueCarpet::DISPLAY_NAME,
			Block::YellowCarpet(_) => YellowCarpet::DISPLAY_NAME,
			Block::LimeCarpet(_) => LimeCarpet::DISPLAY_NAME,
			Block::PinkCarpet(_) => PinkCarpet::DISPLAY_NAME,
			Block::GrayCarpet(_) => GrayCarpet::DISPLAY_NAME,
			Block::LightGrayCarpet(_) => LightGrayCarpet::DISPLAY_NAME,
			Block::CyanCarpet(_) => CyanCarpet::DISPLAY_NAME,
			Block::PurpleCarpet(_) => PurpleCarpet::DISPLAY_NAME,
			Block::BlueCarpet(_) => BlueCarpet::DISPLAY_NAME,
			Block::BrownCarpet(_) => BrownCarpet::DISPLAY_NAME,
			Block::GreenCarpet(_) => GreenCarpet::DISPLAY_NAME,
			Block::RedCarpet(_) => RedCarpet::DISPLAY_NAME,
			Block::BlackCarpet(_) => BlackCarpet::DISPLAY_NAME,
			Block::Terracotta(_) => Terracotta::DISPLAY_NAME,
			Block::CoalBlock(_) => CoalBlock::DISPLAY_NAME,
			Block::PackedIce(_) => PackedIce::DISPLAY_NAME,
			Block::Sunflower(_) => Sunflower::DISPLAY_NAME,
			Block::Lilac(_) => Lilac::DISPLAY_NAME,
			Block::RoseBush(_) => RoseBush::DISPLAY_NAME,
			Block::Peony(_) => Peony::DISPLAY_NAME,
			Block::TallGrass(_) => TallGrass::DISPLAY_NAME,
			Block::LargeFern(_) => LargeFern::DISPLAY_NAME,
			Block::WhiteBanner(_) => WhiteBanner::DISPLAY_NAME,
			Block::OrangeBanner(_) => OrangeBanner::DISPLAY_NAME,
			Block::MagentaBanner(_) => MagentaBanner::DISPLAY_NAME,
			Block::LightBlueBanner(_) => LightBlueBanner::DISPLAY_NAME,
			Block::YellowBanner(_) => YellowBanner::DISPLAY_NAME,
			Block::LimeBanner(_) => LimeBanner::DISPLAY_NAME,
			Block::PinkBanner(_) => PinkBanner::DISPLAY_NAME,
			Block::GrayBanner(_) => GrayBanner::DISPLAY_NAME,
			Block::LightGrayBanner(_) => LightGrayBanner::DISPLAY_NAME,
			Block::CyanBanner(_) => CyanBanner::DISPLAY_NAME,
			Block::PurpleBanner(_) => PurpleBanner::DISPLAY_NAME,
			Block::BlueBanner(_) => BlueBanner::DISPLAY_NAME,
			Block::BrownBanner(_) => BrownBanner::DISPLAY_NAME,
			Block::GreenBanner(_) => GreenBanner::DISPLAY_NAME,
			Block::RedBanner(_) => RedBanner::DISPLAY_NAME,
			Block::BlackBanner(_) => BlackBanner::DISPLAY_NAME,
			Block::WhiteWallBanner(_) => WhiteWallBanner::DISPLAY_NAME,
			Block::OrangeWallBanner(_) => OrangeWallBanner::DISPLAY_NAME,
			Block::MagentaWallBanner(_) => MagentaWallBanner::DISPLAY_NAME,
			Block::LightBlueWallBanner(_) => LightBlueWallBanner::DISPLAY_NAME,
			Block::YellowWallBanner(_) => YellowWallBanner::DISPLAY_NAME,
			Block::LimeWallBanner(_) => LimeWallBanner::DISPLAY_NAME,
			Block::PinkWallBanner(_) => PinkWallBanner::DISPLAY_NAME,
			Block::GrayWallBanner(_) => GrayWallBanner::DISPLAY_NAME,
			Block::LightGrayWallBanner(_) => LightGrayWallBanner::DISPLAY_NAME,
			Block::CyanWallBanner(_) => CyanWallBanner::DISPLAY_NAME,
			Block::PurpleWallBanner(_) => PurpleWallBanner::DISPLAY_NAME,
			Block::BlueWallBanner(_) => BlueWallBanner::DISPLAY_NAME,
			Block::BrownWallBanner(_) => BrownWallBanner::DISPLAY_NAME,
			Block::GreenWallBanner(_) => GreenWallBanner::DISPLAY_NAME,
			Block::RedWallBanner(_) => RedWallBanner::DISPLAY_NAME,
			Block::BlackWallBanner(_) => BlackWallBanner::DISPLAY_NAME,
			Block::RedSandstone(_) => RedSandstone::DISPLAY_NAME,
			Block::ChiseledRedSandstone(_) => ChiseledRedSandstone::DISPLAY_NAME,
			Block::CutRedSandstone(_) => CutRedSandstone::DISPLAY_NAME,
			Block::RedSandstoneStairs(_) => RedSandstoneStairs::DISPLAY_NAME,
			Block::OakSlab(_) => OakSlab::DISPLAY_NAME,
			Block::SpruceSlab(_) => SpruceSlab::DISPLAY_NAME,
			Block::BirchSlab(_) => BirchSlab::DISPLAY_NAME,
			Block::JungleSlab(_) => JungleSlab::DISPLAY_NAME,
			Block::AcaciaSlab(_) => AcaciaSlab::DISPLAY_NAME,
			Block::DarkOakSlab(_) => DarkOakSlab::DISPLAY_NAME,
			Block::MangroveSlab(_) => MangroveSlab::DISPLAY_NAME,
			Block::StoneSlab(_) => StoneSlab::DISPLAY_NAME,
			Block::SmoothStoneSlab(_) => SmoothStoneSlab::DISPLAY_NAME,
			Block::SandstoneSlab(_) => SandstoneSlab::DISPLAY_NAME,
			Block::CutSandstoneSlab(_) => CutSandstoneSlab::DISPLAY_NAME,
			Block::PetrifiedOakSlab(_) => PetrifiedOakSlab::DISPLAY_NAME,
			Block::CobblestoneSlab(_) => CobblestoneSlab::DISPLAY_NAME,
			Block::BrickSlab(_) => BrickSlab::DISPLAY_NAME,
			Block::StoneBrickSlab(_) => StoneBrickSlab::DISPLAY_NAME,
			Block::MudBrickSlab(_) => MudBrickSlab::DISPLAY_NAME,
			Block::NetherBrickSlab(_) => NetherBrickSlab::DISPLAY_NAME,
			Block::QuartzSlab(_) => QuartzSlab::DISPLAY_NAME,
			Block::RedSandstoneSlab(_) => RedSandstoneSlab::DISPLAY_NAME,
			Block::CutRedSandstoneSlab(_) => CutRedSandstoneSlab::DISPLAY_NAME,
			Block::PurpurSlab(_) => PurpurSlab::DISPLAY_NAME,
			Block::SmoothStone(_) => SmoothStone::DISPLAY_NAME,
			Block::SmoothSandstone(_) => SmoothSandstone::DISPLAY_NAME,
			Block::SmoothQuartz(_) => SmoothQuartz::DISPLAY_NAME,
			Block::SmoothRedSandstone(_) => SmoothRedSandstone::DISPLAY_NAME,
			Block::SpruceFenceGate(_) => SpruceFenceGate::DISPLAY_NAME,
			Block::BirchFenceGate(_) => BirchFenceGate::DISPLAY_NAME,
			Block::JungleFenceGate(_) => JungleFenceGate::DISPLAY_NAME,
			Block::AcaciaFenceGate(_) => AcaciaFenceGate::DISPLAY_NAME,
			Block::DarkOakFenceGate(_) => DarkOakFenceGate::DISPLAY_NAME,
			Block::MangroveFenceGate(_) => MangroveFenceGate::DISPLAY_NAME,
			Block::SpruceFence(_) => SpruceFence::DISPLAY_NAME,
			Block::BirchFence(_) => BirchFence::DISPLAY_NAME,
			Block::JungleFence(_) => JungleFence::DISPLAY_NAME,
			Block::AcaciaFence(_) => AcaciaFence::DISPLAY_NAME,
			Block::DarkOakFence(_) => DarkOakFence::DISPLAY_NAME,
			Block::MangroveFence(_) => MangroveFence::DISPLAY_NAME,
			Block::SpruceDoor(_) => SpruceDoor::DISPLAY_NAME,
			Block::BirchDoor(_) => BirchDoor::DISPLAY_NAME,
			Block::JungleDoor(_) => JungleDoor::DISPLAY_NAME,
			Block::AcaciaDoor(_) => AcaciaDoor::DISPLAY_NAME,
			Block::DarkOakDoor(_) => DarkOakDoor::DISPLAY_NAME,
			Block::MangroveDoor(_) => MangroveDoor::DISPLAY_NAME,
			Block::EndRod(_) => EndRod::DISPLAY_NAME,
			Block::ChorusPlant(_) => ChorusPlant::DISPLAY_NAME,
			Block::ChorusFlower(_) => ChorusFlower::DISPLAY_NAME,
			Block::PurpurBlock(_) => PurpurBlock::DISPLAY_NAME,
			Block::PurpurPillar(_) => PurpurPillar::DISPLAY_NAME,
			Block::PurpurStairs(_) => PurpurStairs::DISPLAY_NAME,
			Block::EndStoneBricks(_) => EndStoneBricks::DISPLAY_NAME,
			Block::Beetroots(_) => Beetroots::DISPLAY_NAME,
			Block::DirtPath(_) => DirtPath::DISPLAY_NAME,
			Block::EndGateway(_) => EndGateway::DISPLAY_NAME,
			Block::RepeatingCommandBlock(_) => RepeatingCommandBlock::DISPLAY_NAME,
			Block::ChainCommandBlock(_) => ChainCommandBlock::DISPLAY_NAME,
			Block::FrostedIce(_) => FrostedIce::DISPLAY_NAME,
			Block::MagmaBlock(_) => MagmaBlock::DISPLAY_NAME,
			Block::NetherWartBlock(_) => NetherWartBlock::DISPLAY_NAME,
			Block::RedNetherBricks(_) => RedNetherBricks::DISPLAY_NAME,
			Block::BoneBlock(_) => BoneBlock::DISPLAY_NAME,
			Block::StructureVoid(_) => StructureVoid::DISPLAY_NAME,
			Block::Observer(_) => Observer::DISPLAY_NAME,
			Block::ShulkerBox(_) => ShulkerBox::DISPLAY_NAME,
			Block::WhiteShulkerBox(_) => WhiteShulkerBox::DISPLAY_NAME,
			Block::OrangeShulkerBox(_) => OrangeShulkerBox::DISPLAY_NAME,
			Block::MagentaShulkerBox(_) => MagentaShulkerBox::DISPLAY_NAME,
			Block::LightBlueShulkerBox(_) => LightBlueShulkerBox::DISPLAY_NAME,
			Block::YellowShulkerBox(_) => YellowShulkerBox::DISPLAY_NAME,
			Block::LimeShulkerBox(_) => LimeShulkerBox::DISPLAY_NAME,
			Block::PinkShulkerBox(_) => PinkShulkerBox::DISPLAY_NAME,
			Block::GrayShulkerBox(_) => GrayShulkerBox::DISPLAY_NAME,
			Block::LightGrayShulkerBox(_) => LightGrayShulkerBox::DISPLAY_NAME,
			Block::CyanShulkerBox(_) => CyanShulkerBox::DISPLAY_NAME,
			Block::PurpleShulkerBox(_) => PurpleShulkerBox::DISPLAY_NAME,
			Block::BlueShulkerBox(_) => BlueShulkerBox::DISPLAY_NAME,
			Block::BrownShulkerBox(_) => BrownShulkerBox::DISPLAY_NAME,
			Block::GreenShulkerBox(_) => GreenShulkerBox::DISPLAY_NAME,
			Block::RedShulkerBox(_) => RedShulkerBox::DISPLAY_NAME,
			Block::BlackShulkerBox(_) => BlackShulkerBox::DISPLAY_NAME,
			Block::WhiteGlazedTerracotta(_) => WhiteGlazedTerracotta::DISPLAY_NAME,
			Block::OrangeGlazedTerracotta(_) => OrangeGlazedTerracotta::DISPLAY_NAME,
			Block::MagentaGlazedTerracotta(_) => MagentaGlazedTerracotta::DISPLAY_NAME,
			Block::LightBlueGlazedTerracotta(_) => LightBlueGlazedTerracotta::DISPLAY_NAME,
			Block::YellowGlazedTerracotta(_) => YellowGlazedTerracotta::DISPLAY_NAME,
			Block::LimeGlazedTerracotta(_) => LimeGlazedTerracotta::DISPLAY_NAME,
			Block::PinkGlazedTerracotta(_) => PinkGlazedTerracotta::DISPLAY_NAME,
			Block::GrayGlazedTerracotta(_) => GrayGlazedTerracotta::DISPLAY_NAME,
			Block::LightGrayGlazedTerracotta(_) => LightGrayGlazedTerracotta::DISPLAY_NAME,
			Block::CyanGlazedTerracotta(_) => CyanGlazedTerracotta::DISPLAY_NAME,
			Block::PurpleGlazedTerracotta(_) => PurpleGlazedTerracotta::DISPLAY_NAME,
			Block::BlueGlazedTerracotta(_) => BlueGlazedTerracotta::DISPLAY_NAME,
			Block::BrownGlazedTerracotta(_) => BrownGlazedTerracotta::DISPLAY_NAME,
			Block::GreenGlazedTerracotta(_) => GreenGlazedTerracotta::DISPLAY_NAME,
			Block::RedGlazedTerracotta(_) => RedGlazedTerracotta::DISPLAY_NAME,
			Block::BlackGlazedTerracotta(_) => BlackGlazedTerracotta::DISPLAY_NAME,
			Block::WhiteConcrete(_) => WhiteConcrete::DISPLAY_NAME,
			Block::OrangeConcrete(_) => OrangeConcrete::DISPLAY_NAME,
			Block::MagentaConcrete(_) => MagentaConcrete::DISPLAY_NAME,
			Block::LightBlueConcrete(_) => LightBlueConcrete::DISPLAY_NAME,
			Block::YellowConcrete(_) => YellowConcrete::DISPLAY_NAME,
			Block::LimeConcrete(_) => LimeConcrete::DISPLAY_NAME,
			Block::PinkConcrete(_) => PinkConcrete::DISPLAY_NAME,
			Block::GrayConcrete(_) => GrayConcrete::DISPLAY_NAME,
			Block::LightGrayConcrete(_) => LightGrayConcrete::DISPLAY_NAME,
			Block::CyanConcrete(_) => CyanConcrete::DISPLAY_NAME,
			Block::PurpleConcrete(_) => PurpleConcrete::DISPLAY_NAME,
			Block::BlueConcrete(_) => BlueConcrete::DISPLAY_NAME,
			Block::BrownConcrete(_) => BrownConcrete::DISPLAY_NAME,
			Block::GreenConcrete(_) => GreenConcrete::DISPLAY_NAME,
			Block::RedConcrete(_) => RedConcrete::DISPLAY_NAME,
			Block::BlackConcrete(_) => BlackConcrete::DISPLAY_NAME,
			Block::WhiteConcretePowder(_) => WhiteConcretePowder::DISPLAY_NAME,
			Block::OrangeConcretePowder(_) => OrangeConcretePowder::DISPLAY_NAME,
			Block::MagentaConcretePowder(_) => MagentaConcretePowder::DISPLAY_NAME,
			Block::LightBlueConcretePowder(_) => LightBlueConcretePowder::DISPLAY_NAME,
			Block::YellowConcretePowder(_) => YellowConcretePowder::DISPLAY_NAME,
			Block::LimeConcretePowder(_) => LimeConcretePowder::DISPLAY_NAME,
			Block::PinkConcretePowder(_) => PinkConcretePowder::DISPLAY_NAME,
			Block::GrayConcretePowder(_) => GrayConcretePowder::DISPLAY_NAME,
			Block::LightGrayConcretePowder(_) => LightGrayConcretePowder::DISPLAY_NAME,
			Block::CyanConcretePowder(_) => CyanConcretePowder::DISPLAY_NAME,
			Block::PurpleConcretePowder(_) => PurpleConcretePowder::DISPLAY_NAME,
			Block::BlueConcretePowder(_) => BlueConcretePowder::DISPLAY_NAME,
			Block::BrownConcretePowder(_) => BrownConcretePowder::DISPLAY_NAME,
			Block::GreenConcretePowder(_) => GreenConcretePowder::DISPLAY_NAME,
			Block::RedConcretePowder(_) => RedConcretePowder::DISPLAY_NAME,
			Block::BlackConcretePowder(_) => BlackConcretePowder::DISPLAY_NAME,
			Block::Kelp(_) => Kelp::DISPLAY_NAME,
			Block::KelpPlant(_) => KelpPlant::DISPLAY_NAME,
			Block::DriedKelpBlock(_) => DriedKelpBlock::DISPLAY_NAME,
			Block::TurtleEgg(_) => TurtleEgg::DISPLAY_NAME,
			Block::DeadTubeCoralBlock(_) => DeadTubeCoralBlock::DISPLAY_NAME,
			Block::DeadBrainCoralBlock(_) => DeadBrainCoralBlock::DISPLAY_NAME,
			Block::DeadBubbleCoralBlock(_) => DeadBubbleCoralBlock::DISPLAY_NAME,
			Block::DeadFireCoralBlock(_) => DeadFireCoralBlock::DISPLAY_NAME,
			Block::DeadHornCoralBlock(_) => DeadHornCoralBlock::DISPLAY_NAME,
			Block::TubeCoralBlock(_) => TubeCoralBlock::DISPLAY_NAME,
			Block::BrainCoralBlock(_) => BrainCoralBlock::DISPLAY_NAME,
			Block::BubbleCoralBlock(_) => BubbleCoralBlock::DISPLAY_NAME,
			Block::FireCoralBlock(_) => FireCoralBlock::DISPLAY_NAME,
			Block::HornCoralBlock(_) => HornCoralBlock::DISPLAY_NAME,
			Block::DeadTubeCoral(_) => DeadTubeCoral::DISPLAY_NAME,
			Block::DeadBrainCoral(_) => DeadBrainCoral::DISPLAY_NAME,
			Block::DeadBubbleCoral(_) => DeadBubbleCoral::DISPLAY_NAME,
			Block::DeadFireCoral(_) => DeadFireCoral::DISPLAY_NAME,
			Block::DeadHornCoral(_) => DeadHornCoral::DISPLAY_NAME,
			Block::TubeCoral(_) => TubeCoral::DISPLAY_NAME,
			Block::BrainCoral(_) => BrainCoral::DISPLAY_NAME,
			Block::BubbleCoral(_) => BubbleCoral::DISPLAY_NAME,
			Block::FireCoral(_) => FireCoral::DISPLAY_NAME,
			Block::HornCoral(_) => HornCoral::DISPLAY_NAME,
			Block::DeadTubeCoralFan(_) => DeadTubeCoralFan::DISPLAY_NAME,
			Block::DeadBrainCoralFan(_) => DeadBrainCoralFan::DISPLAY_NAME,
			Block::DeadBubbleCoralFan(_) => DeadBubbleCoralFan::DISPLAY_NAME,
			Block::DeadFireCoralFan(_) => DeadFireCoralFan::DISPLAY_NAME,
			Block::DeadHornCoralFan(_) => DeadHornCoralFan::DISPLAY_NAME,
			Block::TubeCoralFan(_) => TubeCoralFan::DISPLAY_NAME,
			Block::BrainCoralFan(_) => BrainCoralFan::DISPLAY_NAME,
			Block::BubbleCoralFan(_) => BubbleCoralFan::DISPLAY_NAME,
			Block::FireCoralFan(_) => FireCoralFan::DISPLAY_NAME,
			Block::HornCoralFan(_) => HornCoralFan::DISPLAY_NAME,
			Block::DeadTubeCoralWallFan(_) => DeadTubeCoralWallFan::DISPLAY_NAME,
			Block::DeadBrainCoralWallFan(_) => DeadBrainCoralWallFan::DISPLAY_NAME,
			Block::DeadBubbleCoralWallFan(_) => DeadBubbleCoralWallFan::DISPLAY_NAME,
			Block::DeadFireCoralWallFan(_) => DeadFireCoralWallFan::DISPLAY_NAME,
			Block::DeadHornCoralWallFan(_) => DeadHornCoralWallFan::DISPLAY_NAME,
			Block::TubeCoralWallFan(_) => TubeCoralWallFan::DISPLAY_NAME,
			Block::BrainCoralWallFan(_) => BrainCoralWallFan::DISPLAY_NAME,
			Block::BubbleCoralWallFan(_) => BubbleCoralWallFan::DISPLAY_NAME,
			Block::FireCoralWallFan(_) => FireCoralWallFan::DISPLAY_NAME,
			Block::HornCoralWallFan(_) => HornCoralWallFan::DISPLAY_NAME,
			Block::SeaPickle(_) => SeaPickle::DISPLAY_NAME,
			Block::BlueIce(_) => BlueIce::DISPLAY_NAME,
			Block::Conduit(_) => Conduit::DISPLAY_NAME,
			Block::BambooSapling(_) => BambooSapling::DISPLAY_NAME,
			Block::Bamboo(_) => Bamboo::DISPLAY_NAME,
			Block::PottedBamboo(_) => PottedBamboo::DISPLAY_NAME,
			Block::VoidAir(_) => VoidAir::DISPLAY_NAME,
			Block::CaveAir(_) => CaveAir::DISPLAY_NAME,
			Block::BubbleColumn(_) => BubbleColumn::DISPLAY_NAME,
			Block::PolishedGraniteStairs(_) => PolishedGraniteStairs::DISPLAY_NAME,
			Block::SmoothRedSandstoneStairs(_) => SmoothRedSandstoneStairs::DISPLAY_NAME,
			Block::MossyStoneBrickStairs(_) => MossyStoneBrickStairs::DISPLAY_NAME,
			Block::PolishedDioriteStairs(_) => PolishedDioriteStairs::DISPLAY_NAME,
			Block::MossyCobblestoneStairs(_) => MossyCobblestoneStairs::DISPLAY_NAME,
			Block::EndStoneBrickStairs(_) => EndStoneBrickStairs::DISPLAY_NAME,
			Block::StoneStairs(_) => StoneStairs::DISPLAY_NAME,
			Block::SmoothSandstoneStairs(_) => SmoothSandstoneStairs::DISPLAY_NAME,
			Block::SmoothQuartzStairs(_) => SmoothQuartzStairs::DISPLAY_NAME,
			Block::GraniteStairs(_) => GraniteStairs::DISPLAY_NAME,
			Block::AndesiteStairs(_) => AndesiteStairs::DISPLAY_NAME,
			Block::RedNetherBrickStairs(_) => RedNetherBrickStairs::DISPLAY_NAME,
			Block::PolishedAndesiteStairs(_) => PolishedAndesiteStairs::DISPLAY_NAME,
			Block::DioriteStairs(_) => DioriteStairs::DISPLAY_NAME,
			Block::PolishedGraniteSlab(_) => PolishedGraniteSlab::DISPLAY_NAME,
			Block::SmoothRedSandstoneSlab(_) => SmoothRedSandstoneSlab::DISPLAY_NAME,
			Block::MossyStoneBrickSlab(_) => MossyStoneBrickSlab::DISPLAY_NAME,
			Block::PolishedDioriteSlab(_) => PolishedDioriteSlab::DISPLAY_NAME,
			Block::MossyCobblestoneSlab(_) => MossyCobblestoneSlab::DISPLAY_NAME,
			Block::EndStoneBrickSlab(_) => EndStoneBrickSlab::DISPLAY_NAME,
			Block::SmoothSandstoneSlab(_) => SmoothSandstoneSlab::DISPLAY_NAME,
			Block::SmoothQuartzSlab(_) => SmoothQuartzSlab::DISPLAY_NAME,
			Block::GraniteSlab(_) => GraniteSlab::DISPLAY_NAME,
			Block::AndesiteSlab(_) => AndesiteSlab::DISPLAY_NAME,
			Block::RedNetherBrickSlab(_) => RedNetherBrickSlab::DISPLAY_NAME,
			Block::PolishedAndesiteSlab(_) => PolishedAndesiteSlab::DISPLAY_NAME,
			Block::DioriteSlab(_) => DioriteSlab::DISPLAY_NAME,
			Block::BrickWall(_) => BrickWall::DISPLAY_NAME,
			Block::PrismarineWall(_) => PrismarineWall::DISPLAY_NAME,
			Block::RedSandstoneWall(_) => RedSandstoneWall::DISPLAY_NAME,
			Block::MossyStoneBrickWall(_) => MossyStoneBrickWall::DISPLAY_NAME,
			Block::GraniteWall(_) => GraniteWall::DISPLAY_NAME,
			Block::StoneBrickWall(_) => StoneBrickWall::DISPLAY_NAME,
			Block::MudBrickWall(_) => MudBrickWall::DISPLAY_NAME,
			Block::NetherBrickWall(_) => NetherBrickWall::DISPLAY_NAME,
			Block::AndesiteWall(_) => AndesiteWall::DISPLAY_NAME,
			Block::RedNetherBrickWall(_) => RedNetherBrickWall::DISPLAY_NAME,
			Block::SandstoneWall(_) => SandstoneWall::DISPLAY_NAME,
			Block::EndStoneBrickWall(_) => EndStoneBrickWall::DISPLAY_NAME,
			Block::DioriteWall(_) => DioriteWall::DISPLAY_NAME,
			Block::Scaffolding(_) => Scaffolding::DISPLAY_NAME,
			Block::Loom(_) => Loom::DISPLAY_NAME,
			Block::Barrel(_) => Barrel::DISPLAY_NAME,
			Block::Smoker(_) => Smoker::DISPLAY_NAME,
			Block::BlastFurnace(_) => BlastFurnace::DISPLAY_NAME,
			Block::CartographyTable(_) => CartographyTable::DISPLAY_NAME,
			Block::FletchingTable(_) => FletchingTable::DISPLAY_NAME,
			Block::Grindstone(_) => Grindstone::DISPLAY_NAME,
			Block::Lectern(_) => Lectern::DISPLAY_NAME,
			Block::SmithingTable(_) => SmithingTable::DISPLAY_NAME,
			Block::Stonecutter(_) => Stonecutter::DISPLAY_NAME,
			Block::Bell(_) => Bell::DISPLAY_NAME,
			Block::Lantern(_) => Lantern::DISPLAY_NAME,
			Block::SoulLantern(_) => SoulLantern::DISPLAY_NAME,
			Block::Campfire(_) => Campfire::DISPLAY_NAME,
			Block::SoulCampfire(_) => SoulCampfire::DISPLAY_NAME,
			Block::SweetBerryBush(_) => SweetBerryBush::DISPLAY_NAME,
			Block::WarpedStem(_) => WarpedStem::DISPLAY_NAME,
			Block::StrippedWarpedStem(_) => StrippedWarpedStem::DISPLAY_NAME,
			Block::WarpedHyphae(_) => WarpedHyphae::DISPLAY_NAME,
			Block::StrippedWarpedHyphae(_) => StrippedWarpedHyphae::DISPLAY_NAME,
			Block::WarpedNylium(_) => WarpedNylium::DISPLAY_NAME,
			Block::WarpedFungus(_) => WarpedFungus::DISPLAY_NAME,
			Block::WarpedWartBlock(_) => WarpedWartBlock::DISPLAY_NAME,
			Block::WarpedRoots(_) => WarpedRoots::DISPLAY_NAME,
			Block::NetherSprouts(_) => NetherSprouts::DISPLAY_NAME,
			Block::CrimsonStem(_) => CrimsonStem::DISPLAY_NAME,
			Block::StrippedCrimsonStem(_) => StrippedCrimsonStem::DISPLAY_NAME,
			Block::CrimsonHyphae(_) => CrimsonHyphae::DISPLAY_NAME,
			Block::StrippedCrimsonHyphae(_) => StrippedCrimsonHyphae::DISPLAY_NAME,
			Block::CrimsonNylium(_) => CrimsonNylium::DISPLAY_NAME,
			Block::CrimsonFungus(_) => CrimsonFungus::DISPLAY_NAME,
			Block::Shroomlight(_) => Shroomlight::DISPLAY_NAME,
			Block::WeepingVines(_) => WeepingVines::DISPLAY_NAME,
			Block::WeepingVinesPlant(_) => WeepingVinesPlant::DISPLAY_NAME,
			Block::TwistingVines(_) => TwistingVines::DISPLAY_NAME,
			Block::TwistingVinesPlant(_) => TwistingVinesPlant::DISPLAY_NAME,
			Block::CrimsonRoots(_) => CrimsonRoots::DISPLAY_NAME,
			Block::CrimsonPlanks(_) => CrimsonPlanks::DISPLAY_NAME,
			Block::WarpedPlanks(_) => WarpedPlanks::DISPLAY_NAME,
			Block::CrimsonSlab(_) => CrimsonSlab::DISPLAY_NAME,
			Block::WarpedSlab(_) => WarpedSlab::DISPLAY_NAME,
			Block::CrimsonPressurePlate(_) => CrimsonPressurePlate::DISPLAY_NAME,
			Block::WarpedPressurePlate(_) => WarpedPressurePlate::DISPLAY_NAME,
			Block::CrimsonFence(_) => CrimsonFence::DISPLAY_NAME,
			Block::WarpedFence(_) => WarpedFence::DISPLAY_NAME,
			Block::CrimsonTrapdoor(_) => CrimsonTrapdoor::DISPLAY_NAME,
			Block::WarpedTrapdoor(_) => WarpedTrapdoor::DISPLAY_NAME,
			Block::CrimsonFenceGate(_) => CrimsonFenceGate::DISPLAY_NAME,
			Block::WarpedFenceGate(_) => WarpedFenceGate::DISPLAY_NAME,
			Block::CrimsonStairs(_) => CrimsonStairs::DISPLAY_NAME,
			Block::WarpedStairs(_) => WarpedStairs::DISPLAY_NAME,
			Block::CrimsonButton(_) => CrimsonButton::DISPLAY_NAME,
			Block::WarpedButton(_) => WarpedButton::DISPLAY_NAME,
			Block::CrimsonDoor(_) => CrimsonDoor::DISPLAY_NAME,
			Block::WarpedDoor(_) => WarpedDoor::DISPLAY_NAME,
			Block::CrimsonSign(_) => CrimsonSign::DISPLAY_NAME,
			Block::WarpedSign(_) => WarpedSign::DISPLAY_NAME,
			Block::CrimsonWallSign(_) => CrimsonWallSign::DISPLAY_NAME,
			Block::WarpedWallSign(_) => WarpedWallSign::DISPLAY_NAME,
			Block::StructureBlock(_) => StructureBlock::DISPLAY_NAME,
			Block::Jigsaw(_) => Jigsaw::DISPLAY_NAME,
			Block::Composter(_) => Composter::DISPLAY_NAME,
			Block::Target(_) => Target::DISPLAY_NAME,
			Block::BeeNest(_) => BeeNest::DISPLAY_NAME,
			Block::Beehive(_) => Beehive::DISPLAY_NAME,
			Block::HoneyBlock(_) => HoneyBlock::DISPLAY_NAME,
			Block::HoneycombBlock(_) => HoneycombBlock::DISPLAY_NAME,
			Block::NetheriteBlock(_) => NetheriteBlock::DISPLAY_NAME,
			Block::AncientDebris(_) => AncientDebris::DISPLAY_NAME,
			Block::CryingObsidian(_) => CryingObsidian::DISPLAY_NAME,
			Block::RespawnAnchor(_) => RespawnAnchor::DISPLAY_NAME,
			Block::PottedCrimsonFungus(_) => PottedCrimsonFungus::DISPLAY_NAME,
			Block::PottedWarpedFungus(_) => PottedWarpedFungus::DISPLAY_NAME,
			Block::PottedCrimsonRoots(_) => PottedCrimsonRoots::DISPLAY_NAME,
			Block::PottedWarpedRoots(_) => PottedWarpedRoots::DISPLAY_NAME,
			Block::Lodestone(_) => Lodestone::DISPLAY_NAME,
			Block::Blackstone(_) => Blackstone::DISPLAY_NAME,
			Block::BlackstoneStairs(_) => BlackstoneStairs::DISPLAY_NAME,
			Block::BlackstoneWall(_) => BlackstoneWall::DISPLAY_NAME,
			Block::BlackstoneSlab(_) => BlackstoneSlab::DISPLAY_NAME,
			Block::PolishedBlackstone(_) => PolishedBlackstone::DISPLAY_NAME,
			Block::PolishedBlackstoneBricks(_) => PolishedBlackstoneBricks::DISPLAY_NAME,
			Block::CrackedPolishedBlackstoneBricks(_) => CrackedPolishedBlackstoneBricks::DISPLAY_NAME,
			Block::ChiseledPolishedBlackstone(_) => ChiseledPolishedBlackstone::DISPLAY_NAME,
			Block::PolishedBlackstoneBrickSlab(_) => PolishedBlackstoneBrickSlab::DISPLAY_NAME,
			Block::PolishedBlackstoneBrickStairs(_) => PolishedBlackstoneBrickStairs::DISPLAY_NAME,
			Block::PolishedBlackstoneBrickWall(_) => PolishedBlackstoneBrickWall::DISPLAY_NAME,
			Block::GildedBlackstone(_) => GildedBlackstone::DISPLAY_NAME,
			Block::PolishedBlackstoneStairs(_) => PolishedBlackstoneStairs::DISPLAY_NAME,
			Block::PolishedBlackstoneSlab(_) => PolishedBlackstoneSlab::DISPLAY_NAME,
			Block::PolishedBlackstonePressurePlate(_) => PolishedBlackstonePressurePlate::DISPLAY_NAME,
			Block::PolishedBlackstoneButton(_) => PolishedBlackstoneButton::DISPLAY_NAME,
			Block::PolishedBlackstoneWall(_) => PolishedBlackstoneWall::DISPLAY_NAME,
			Block::ChiseledNetherBricks(_) => ChiseledNetherBricks::DISPLAY_NAME,
			Block::CrackedNetherBricks(_) => CrackedNetherBricks::DISPLAY_NAME,
			Block::QuartzBricks(_) => QuartzBricks::DISPLAY_NAME,
			Block::Candle(_) => Candle::DISPLAY_NAME,
			Block::WhiteCandle(_) => WhiteCandle::DISPLAY_NAME,
			Block::OrangeCandle(_) => OrangeCandle::DISPLAY_NAME,
			Block::MagentaCandle(_) => MagentaCandle::DISPLAY_NAME,
			Block::LightBlueCandle(_) => LightBlueCandle::DISPLAY_NAME,
			Block::YellowCandle(_) => YellowCandle::DISPLAY_NAME,
			Block::LimeCandle(_) => LimeCandle::DISPLAY_NAME,
			Block::PinkCandle(_) => PinkCandle::DISPLAY_NAME,
			Block::GrayCandle(_) => GrayCandle::DISPLAY_NAME,
			Block::LightGrayCandle(_) => LightGrayCandle::DISPLAY_NAME,
			Block::CyanCandle(_) => CyanCandle::DISPLAY_NAME,
			Block::PurpleCandle(_) => PurpleCandle::DISPLAY_NAME,
			Block::BlueCandle(_) => BlueCandle::DISPLAY_NAME,
			Block::BrownCandle(_) => BrownCandle::DISPLAY_NAME,
			Block::GreenCandle(_) => GreenCandle::DISPLAY_NAME,
			Block::RedCandle(_) => RedCandle::DISPLAY_NAME,
			Block::BlackCandle(_) => BlackCandle::DISPLAY_NAME,
			Block::CandleCake(_) => CandleCake::DISPLAY_NAME,
			Block::WhiteCandleCake(_) => WhiteCandleCake::DISPLAY_NAME,
			Block::OrangeCandleCake(_) => OrangeCandleCake::DISPLAY_NAME,
			Block::MagentaCandleCake(_) => MagentaCandleCake::DISPLAY_NAME,
			Block::LightBlueCandleCake(_) => LightBlueCandleCake::DISPLAY_NAME,
			Block::YellowCandleCake(_) => YellowCandleCake::DISPLAY_NAME,
			Block::LimeCandleCake(_) => LimeCandleCake::DISPLAY_NAME,
			Block::PinkCandleCake(_) => PinkCandleCake::DISPLAY_NAME,
			Block::GrayCandleCake(_) => GrayCandleCake::DISPLAY_NAME,
			Block::LightGrayCandleCake(_) => LightGrayCandleCake::DISPLAY_NAME,
			Block::CyanCandleCake(_) => CyanCandleCake::DISPLAY_NAME,
			Block::PurpleCandleCake(_) => PurpleCandleCake::DISPLAY_NAME,
			Block::BlueCandleCake(_) => BlueCandleCake::DISPLAY_NAME,
			Block::BrownCandleCake(_) => BrownCandleCake::DISPLAY_NAME,
			Block::GreenCandleCake(_) => GreenCandleCake::DISPLAY_NAME,
			Block::RedCandleCake(_) => RedCandleCake::DISPLAY_NAME,
			Block::BlackCandleCake(_) => BlackCandleCake::DISPLAY_NAME,
			Block::AmethystBlock(_) => AmethystBlock::DISPLAY_NAME,
			Block::BuddingAmethyst(_) => BuddingAmethyst::DISPLAY_NAME,
			Block::AmethystCluster(_) => AmethystCluster::DISPLAY_NAME,
			Block::LargeAmethystBud(_) => LargeAmethystBud::DISPLAY_NAME,
			Block::MediumAmethystBud(_) => MediumAmethystBud::DISPLAY_NAME,
			Block::SmallAmethystBud(_) => SmallAmethystBud::DISPLAY_NAME,
			Block::Tuff(_) => Tuff::DISPLAY_NAME,
			Block::Calcite(_) => Calcite::DISPLAY_NAME,
			Block::TintedGlass(_) => TintedGlass::DISPLAY_NAME,
			Block::PowderSnow(_) => PowderSnow::DISPLAY_NAME,
			Block::SculkSensor(_) => SculkSensor::DISPLAY_NAME,
			Block::Sculk(_) => Sculk::DISPLAY_NAME,
			Block::SculkVein(_) => SculkVein::DISPLAY_NAME,
			Block::SculkCatalyst(_) => SculkCatalyst::DISPLAY_NAME,
			Block::SculkShrieker(_) => SculkShrieker::DISPLAY_NAME,
			Block::OxidizedCopper(_) => OxidizedCopper::DISPLAY_NAME,
			Block::WeatheredCopper(_) => WeatheredCopper::DISPLAY_NAME,
			Block::ExposedCopper(_) => ExposedCopper::DISPLAY_NAME,
			Block::CopperBlock(_) => CopperBlock::DISPLAY_NAME,
			Block::CopperOre(_) => CopperOre::DISPLAY_NAME,
			Block::DeepslateCopperOre(_) => DeepslateCopperOre::DISPLAY_NAME,
			Block::OxidizedCutCopper(_) => OxidizedCutCopper::DISPLAY_NAME,
			Block::WeatheredCutCopper(_) => WeatheredCutCopper::DISPLAY_NAME,
			Block::ExposedCutCopper(_) => ExposedCutCopper::DISPLAY_NAME,
			Block::CutCopper(_) => CutCopper::DISPLAY_NAME,
			Block::OxidizedCutCopperStairs(_) => OxidizedCutCopperStairs::DISPLAY_NAME,
			Block::WeatheredCutCopperStairs(_) => WeatheredCutCopperStairs::DISPLAY_NAME,
			Block::ExposedCutCopperStairs(_) => ExposedCutCopperStairs::DISPLAY_NAME,
			Block::CutCopperStairs(_) => CutCopperStairs::DISPLAY_NAME,
			Block::OxidizedCutCopperSlab(_) => OxidizedCutCopperSlab::DISPLAY_NAME,
			Block::WeatheredCutCopperSlab(_) => WeatheredCutCopperSlab::DISPLAY_NAME,
			Block::ExposedCutCopperSlab(_) => ExposedCutCopperSlab::DISPLAY_NAME,
			Block::CutCopperSlab(_) => CutCopperSlab::DISPLAY_NAME,
			Block::WaxedCopperBlock(_) => WaxedCopperBlock::DISPLAY_NAME,
			Block::WaxedWeatheredCopper(_) => WaxedWeatheredCopper::DISPLAY_NAME,
			Block::WaxedExposedCopper(_) => WaxedExposedCopper::DISPLAY_NAME,
			Block::WaxedOxidizedCopper(_) => WaxedOxidizedCopper::DISPLAY_NAME,
			Block::WaxedOxidizedCutCopper(_) => WaxedOxidizedCutCopper::DISPLAY_NAME,
			Block::WaxedWeatheredCutCopper(_) => WaxedWeatheredCutCopper::DISPLAY_NAME,
			Block::WaxedExposedCutCopper(_) => WaxedExposedCutCopper::DISPLAY_NAME,
			Block::WaxedCutCopper(_) => WaxedCutCopper::DISPLAY_NAME,
			Block::WaxedOxidizedCutCopperStairs(_) => WaxedOxidizedCutCopperStairs::DISPLAY_NAME,
			Block::WaxedWeatheredCutCopperStairs(_) => WaxedWeatheredCutCopperStairs::DISPLAY_NAME,
			Block::WaxedExposedCutCopperStairs(_) => WaxedExposedCutCopperStairs::DISPLAY_NAME,
			Block::WaxedCutCopperStairs(_) => WaxedCutCopperStairs::DISPLAY_NAME,
			Block::WaxedOxidizedCutCopperSlab(_) => WaxedOxidizedCutCopperSlab::DISPLAY_NAME,
			Block::WaxedWeatheredCutCopperSlab(_) => WaxedWeatheredCutCopperSlab::DISPLAY_NAME,
			Block::WaxedExposedCutCopperSlab(_) => WaxedExposedCutCopperSlab::DISPLAY_NAME,
			Block::WaxedCutCopperSlab(_) => WaxedCutCopperSlab::DISPLAY_NAME,
			Block::LightningRod(_) => LightningRod::DISPLAY_NAME,
			Block::PointedDripstone(_) => PointedDripstone::DISPLAY_NAME,
			Block::DripstoneBlock(_) => DripstoneBlock::DISPLAY_NAME,
			Block::CaveVines(_) => CaveVines::DISPLAY_NAME,
			Block::CaveVinesPlant(_) => CaveVinesPlant::DISPLAY_NAME,
			Block::SporeBlossom(_) => SporeBlossom::DISPLAY_NAME,
			Block::Azalea(_) => Azalea::DISPLAY_NAME,
			Block::FloweringAzalea(_) => FloweringAzalea::DISPLAY_NAME,
			Block::MossCarpet(_) => MossCarpet::DISPLAY_NAME,
			Block::MossBlock(_) => MossBlock::DISPLAY_NAME,
			Block::BigDripleaf(_) => BigDripleaf::DISPLAY_NAME,
			Block::BigDripleafStem(_) => BigDripleafStem::DISPLAY_NAME,
			Block::SmallDripleaf(_) => SmallDripleaf::DISPLAY_NAME,
			Block::HangingRoots(_) => HangingRoots::DISPLAY_NAME,
			Block::RootedDirt(_) => RootedDirt::DISPLAY_NAME,
			Block::Mud(_) => Mud::DISPLAY_NAME,
			Block::Deepslate(_) => Deepslate::DISPLAY_NAME,
			Block::CobbledDeepslate(_) => CobbledDeepslate::DISPLAY_NAME,
			Block::CobbledDeepslateStairs(_) => CobbledDeepslateStairs::DISPLAY_NAME,
			Block::CobbledDeepslateSlab(_) => CobbledDeepslateSlab::DISPLAY_NAME,
			Block::CobbledDeepslateWall(_) => CobbledDeepslateWall::DISPLAY_NAME,
			Block::PolishedDeepslate(_) => PolishedDeepslate::DISPLAY_NAME,
			Block::PolishedDeepslateStairs(_) => PolishedDeepslateStairs::DISPLAY_NAME,
			Block::PolishedDeepslateSlab(_) => PolishedDeepslateSlab::DISPLAY_NAME,
			Block::PolishedDeepslateWall(_) => PolishedDeepslateWall::DISPLAY_NAME,
			Block::DeepslateTiles(_) => DeepslateTiles::DISPLAY_NAME,
			Block::DeepslateTileStairs(_) => DeepslateTileStairs::DISPLAY_NAME,
			Block::DeepslateTileSlab(_) => DeepslateTileSlab::DISPLAY_NAME,
			Block::DeepslateTileWall(_) => DeepslateTileWall::DISPLAY_NAME,
			Block::DeepslateBricks(_) => DeepslateBricks::DISPLAY_NAME,
			Block::DeepslateBrickStairs(_) => DeepslateBrickStairs::DISPLAY_NAME,
			Block::DeepslateBrickSlab(_) => DeepslateBrickSlab::DISPLAY_NAME,
			Block::DeepslateBrickWall(_) => DeepslateBrickWall::DISPLAY_NAME,
			Block::ChiseledDeepslate(_) => ChiseledDeepslate::DISPLAY_NAME,
			Block::CrackedDeepslateBricks(_) => CrackedDeepslateBricks::DISPLAY_NAME,
			Block::CrackedDeepslateTiles(_) => CrackedDeepslateTiles::DISPLAY_NAME,
			Block::InfestedDeepslate(_) => InfestedDeepslate::DISPLAY_NAME,
			Block::SmoothBasalt(_) => SmoothBasalt::DISPLAY_NAME,
			Block::RawIronBlock(_) => RawIronBlock::DISPLAY_NAME,
			Block::RawCopperBlock(_) => RawCopperBlock::DISPLAY_NAME,
			Block::RawGoldBlock(_) => RawGoldBlock::DISPLAY_NAME,
			Block::PottedAzaleaBush(_) => PottedAzaleaBush::DISPLAY_NAME,
			Block::PottedFloweringAzaleaBush(_) => PottedFloweringAzaleaBush::DISPLAY_NAME,
			Block::OchreFroglight(_) => OchreFroglight::DISPLAY_NAME,
			Block::VerdantFroglight(_) => VerdantFroglight::DISPLAY_NAME,
			Block::PearlescentFroglight(_) => PearlescentFroglight::DISPLAY_NAME,
			Block::Frogspawn(_) => Frogspawn::DISPLAY_NAME,
			Block::ReinforcedDeepslate(_) => ReinforcedDeepslate::DISPLAY_NAME,
		}
	}
	pub fn get_transparency(&self) -> bool {
		match self {
			Block::Air(_) => Air::TRANSPARENT,
			Block::Stone(_) => Stone::TRANSPARENT,
			Block::Granite(_) => Granite::TRANSPARENT,
			Block::PolishedGranite(_) => PolishedGranite::TRANSPARENT,
			Block::Diorite(_) => Diorite::TRANSPARENT,
			Block::PolishedDiorite(_) => PolishedDiorite::TRANSPARENT,
			Block::Andesite(_) => Andesite::TRANSPARENT,
			Block::PolishedAndesite(_) => PolishedAndesite::TRANSPARENT,
			Block::GrassBlock(_) => GrassBlock::TRANSPARENT,
			Block::Dirt(_) => Dirt::TRANSPARENT,
			Block::CoarseDirt(_) => CoarseDirt::TRANSPARENT,
			Block::Podzol(_) => Podzol::TRANSPARENT,
			Block::Cobblestone(_) => Cobblestone::TRANSPARENT,
			Block::OakPlanks(_) => OakPlanks::TRANSPARENT,
			Block::SprucePlanks(_) => SprucePlanks::TRANSPARENT,
			Block::BirchPlanks(_) => BirchPlanks::TRANSPARENT,
			Block::JunglePlanks(_) => JunglePlanks::TRANSPARENT,
			Block::AcaciaPlanks(_) => AcaciaPlanks::TRANSPARENT,
			Block::DarkOakPlanks(_) => DarkOakPlanks::TRANSPARENT,
			Block::MangrovePlanks(_) => MangrovePlanks::TRANSPARENT,
			Block::OakSapling(_) => OakSapling::TRANSPARENT,
			Block::SpruceSapling(_) => SpruceSapling::TRANSPARENT,
			Block::BirchSapling(_) => BirchSapling::TRANSPARENT,
			Block::JungleSapling(_) => JungleSapling::TRANSPARENT,
			Block::AcaciaSapling(_) => AcaciaSapling::TRANSPARENT,
			Block::DarkOakSapling(_) => DarkOakSapling::TRANSPARENT,
			Block::MangrovePropagule(_) => MangrovePropagule::TRANSPARENT,
			Block::Bedrock(_) => Bedrock::TRANSPARENT,
			Block::Water(_) => Water::TRANSPARENT,
			Block::Lava(_) => Lava::TRANSPARENT,
			Block::Sand(_) => Sand::TRANSPARENT,
			Block::RedSand(_) => RedSand::TRANSPARENT,
			Block::Gravel(_) => Gravel::TRANSPARENT,
			Block::GoldOre(_) => GoldOre::TRANSPARENT,
			Block::DeepslateGoldOre(_) => DeepslateGoldOre::TRANSPARENT,
			Block::IronOre(_) => IronOre::TRANSPARENT,
			Block::DeepslateIronOre(_) => DeepslateIronOre::TRANSPARENT,
			Block::CoalOre(_) => CoalOre::TRANSPARENT,
			Block::DeepslateCoalOre(_) => DeepslateCoalOre::TRANSPARENT,
			Block::NetherGoldOre(_) => NetherGoldOre::TRANSPARENT,
			Block::OakLog(_) => OakLog::TRANSPARENT,
			Block::SpruceLog(_) => SpruceLog::TRANSPARENT,
			Block::BirchLog(_) => BirchLog::TRANSPARENT,
			Block::JungleLog(_) => JungleLog::TRANSPARENT,
			Block::AcaciaLog(_) => AcaciaLog::TRANSPARENT,
			Block::DarkOakLog(_) => DarkOakLog::TRANSPARENT,
			Block::MangroveLog(_) => MangroveLog::TRANSPARENT,
			Block::MangroveRoots(_) => MangroveRoots::TRANSPARENT,
			Block::MuddyMangroveRoots(_) => MuddyMangroveRoots::TRANSPARENT,
			Block::StrippedSpruceLog(_) => StrippedSpruceLog::TRANSPARENT,
			Block::StrippedBirchLog(_) => StrippedBirchLog::TRANSPARENT,
			Block::StrippedJungleLog(_) => StrippedJungleLog::TRANSPARENT,
			Block::StrippedAcaciaLog(_) => StrippedAcaciaLog::TRANSPARENT,
			Block::StrippedDarkOakLog(_) => StrippedDarkOakLog::TRANSPARENT,
			Block::StrippedOakLog(_) => StrippedOakLog::TRANSPARENT,
			Block::StrippedMangroveLog(_) => StrippedMangroveLog::TRANSPARENT,
			Block::OakWood(_) => OakWood::TRANSPARENT,
			Block::SpruceWood(_) => SpruceWood::TRANSPARENT,
			Block::BirchWood(_) => BirchWood::TRANSPARENT,
			Block::JungleWood(_) => JungleWood::TRANSPARENT,
			Block::AcaciaWood(_) => AcaciaWood::TRANSPARENT,
			Block::DarkOakWood(_) => DarkOakWood::TRANSPARENT,
			Block::MangroveWood(_) => MangroveWood::TRANSPARENT,
			Block::StrippedOakWood(_) => StrippedOakWood::TRANSPARENT,
			Block::StrippedSpruceWood(_) => StrippedSpruceWood::TRANSPARENT,
			Block::StrippedBirchWood(_) => StrippedBirchWood::TRANSPARENT,
			Block::StrippedJungleWood(_) => StrippedJungleWood::TRANSPARENT,
			Block::StrippedAcaciaWood(_) => StrippedAcaciaWood::TRANSPARENT,
			Block::StrippedDarkOakWood(_) => StrippedDarkOakWood::TRANSPARENT,
			Block::StrippedMangroveWood(_) => StrippedMangroveWood::TRANSPARENT,
			Block::OakLeaves(_) => OakLeaves::TRANSPARENT,
			Block::SpruceLeaves(_) => SpruceLeaves::TRANSPARENT,
			Block::BirchLeaves(_) => BirchLeaves::TRANSPARENT,
			Block::JungleLeaves(_) => JungleLeaves::TRANSPARENT,
			Block::AcaciaLeaves(_) => AcaciaLeaves::TRANSPARENT,
			Block::DarkOakLeaves(_) => DarkOakLeaves::TRANSPARENT,
			Block::MangroveLeaves(_) => MangroveLeaves::TRANSPARENT,
			Block::AzaleaLeaves(_) => AzaleaLeaves::TRANSPARENT,
			Block::FloweringAzaleaLeaves(_) => FloweringAzaleaLeaves::TRANSPARENT,
			Block::Sponge(_) => Sponge::TRANSPARENT,
			Block::WetSponge(_) => WetSponge::TRANSPARENT,
			Block::Glass(_) => Glass::TRANSPARENT,
			Block::LapisOre(_) => LapisOre::TRANSPARENT,
			Block::DeepslateLapisOre(_) => DeepslateLapisOre::TRANSPARENT,
			Block::LapisBlock(_) => LapisBlock::TRANSPARENT,
			Block::Dispenser(_) => Dispenser::TRANSPARENT,
			Block::Sandstone(_) => Sandstone::TRANSPARENT,
			Block::ChiseledSandstone(_) => ChiseledSandstone::TRANSPARENT,
			Block::CutSandstone(_) => CutSandstone::TRANSPARENT,
			Block::NoteBlock(_) => NoteBlock::TRANSPARENT,
			Block::WhiteBed(_) => WhiteBed::TRANSPARENT,
			Block::OrangeBed(_) => OrangeBed::TRANSPARENT,
			Block::MagentaBed(_) => MagentaBed::TRANSPARENT,
			Block::LightBlueBed(_) => LightBlueBed::TRANSPARENT,
			Block::YellowBed(_) => YellowBed::TRANSPARENT,
			Block::LimeBed(_) => LimeBed::TRANSPARENT,
			Block::PinkBed(_) => PinkBed::TRANSPARENT,
			Block::GrayBed(_) => GrayBed::TRANSPARENT,
			Block::LightGrayBed(_) => LightGrayBed::TRANSPARENT,
			Block::CyanBed(_) => CyanBed::TRANSPARENT,
			Block::PurpleBed(_) => PurpleBed::TRANSPARENT,
			Block::BlueBed(_) => BlueBed::TRANSPARENT,
			Block::BrownBed(_) => BrownBed::TRANSPARENT,
			Block::GreenBed(_) => GreenBed::TRANSPARENT,
			Block::RedBed(_) => RedBed::TRANSPARENT,
			Block::BlackBed(_) => BlackBed::TRANSPARENT,
			Block::PoweredRail(_) => PoweredRail::TRANSPARENT,
			Block::DetectorRail(_) => DetectorRail::TRANSPARENT,
			Block::StickyPiston(_) => StickyPiston::TRANSPARENT,
			Block::Cobweb(_) => Cobweb::TRANSPARENT,
			Block::Grass(_) => Grass::TRANSPARENT,
			Block::Fern(_) => Fern::TRANSPARENT,
			Block::DeadBush(_) => DeadBush::TRANSPARENT,
			Block::Seagrass(_) => Seagrass::TRANSPARENT,
			Block::TallSeagrass(_) => TallSeagrass::TRANSPARENT,
			Block::Piston(_) => Piston::TRANSPARENT,
			Block::PistonHead(_) => PistonHead::TRANSPARENT,
			Block::WhiteWool(_) => WhiteWool::TRANSPARENT,
			Block::OrangeWool(_) => OrangeWool::TRANSPARENT,
			Block::MagentaWool(_) => MagentaWool::TRANSPARENT,
			Block::LightBlueWool(_) => LightBlueWool::TRANSPARENT,
			Block::YellowWool(_) => YellowWool::TRANSPARENT,
			Block::LimeWool(_) => LimeWool::TRANSPARENT,
			Block::PinkWool(_) => PinkWool::TRANSPARENT,
			Block::GrayWool(_) => GrayWool::TRANSPARENT,
			Block::LightGrayWool(_) => LightGrayWool::TRANSPARENT,
			Block::CyanWool(_) => CyanWool::TRANSPARENT,
			Block::PurpleWool(_) => PurpleWool::TRANSPARENT,
			Block::BlueWool(_) => BlueWool::TRANSPARENT,
			Block::BrownWool(_) => BrownWool::TRANSPARENT,
			Block::GreenWool(_) => GreenWool::TRANSPARENT,
			Block::RedWool(_) => RedWool::TRANSPARENT,
			Block::BlackWool(_) => BlackWool::TRANSPARENT,
			Block::MovingPiston(_) => MovingPiston::TRANSPARENT,
			Block::Dandelion(_) => Dandelion::TRANSPARENT,
			Block::Poppy(_) => Poppy::TRANSPARENT,
			Block::BlueOrchid(_) => BlueOrchid::TRANSPARENT,
			Block::Allium(_) => Allium::TRANSPARENT,
			Block::AzureBluet(_) => AzureBluet::TRANSPARENT,
			Block::RedTulip(_) => RedTulip::TRANSPARENT,
			Block::OrangeTulip(_) => OrangeTulip::TRANSPARENT,
			Block::WhiteTulip(_) => WhiteTulip::TRANSPARENT,
			Block::PinkTulip(_) => PinkTulip::TRANSPARENT,
			Block::OxeyeDaisy(_) => OxeyeDaisy::TRANSPARENT,
			Block::Cornflower(_) => Cornflower::TRANSPARENT,
			Block::WitherRose(_) => WitherRose::TRANSPARENT,
			Block::LilyOfTheValley(_) => LilyOfTheValley::TRANSPARENT,
			Block::BrownMushroom(_) => BrownMushroom::TRANSPARENT,
			Block::RedMushroom(_) => RedMushroom::TRANSPARENT,
			Block::GoldBlock(_) => GoldBlock::TRANSPARENT,
			Block::IronBlock(_) => IronBlock::TRANSPARENT,
			Block::Bricks(_) => Bricks::TRANSPARENT,
			Block::Tnt(_) => Tnt::TRANSPARENT,
			Block::Bookshelf(_) => Bookshelf::TRANSPARENT,
			Block::MossyCobblestone(_) => MossyCobblestone::TRANSPARENT,
			Block::Obsidian(_) => Obsidian::TRANSPARENT,
			Block::Torch(_) => Torch::TRANSPARENT,
			Block::WallTorch(_) => WallTorch::TRANSPARENT,
			Block::Fire(_) => Fire::TRANSPARENT,
			Block::SoulFire(_) => SoulFire::TRANSPARENT,
			Block::Spawner(_) => Spawner::TRANSPARENT,
			Block::OakStairs(_) => OakStairs::TRANSPARENT,
			Block::Chest(_) => Chest::TRANSPARENT,
			Block::RedstoneWire(_) => RedstoneWire::TRANSPARENT,
			Block::DiamondOre(_) => DiamondOre::TRANSPARENT,
			Block::DeepslateDiamondOre(_) => DeepslateDiamondOre::TRANSPARENT,
			Block::DiamondBlock(_) => DiamondBlock::TRANSPARENT,
			Block::CraftingTable(_) => CraftingTable::TRANSPARENT,
			Block::Wheat(_) => Wheat::TRANSPARENT,
			Block::Farmland(_) => Farmland::TRANSPARENT,
			Block::Furnace(_) => Furnace::TRANSPARENT,
			Block::OakSign(_) => OakSign::TRANSPARENT,
			Block::SpruceSign(_) => SpruceSign::TRANSPARENT,
			Block::BirchSign(_) => BirchSign::TRANSPARENT,
			Block::AcaciaSign(_) => AcaciaSign::TRANSPARENT,
			Block::JungleSign(_) => JungleSign::TRANSPARENT,
			Block::DarkOakSign(_) => DarkOakSign::TRANSPARENT,
			Block::MangroveSign(_) => MangroveSign::TRANSPARENT,
			Block::OakDoor(_) => OakDoor::TRANSPARENT,
			Block::Ladder(_) => Ladder::TRANSPARENT,
			Block::Rail(_) => Rail::TRANSPARENT,
			Block::CobblestoneStairs(_) => CobblestoneStairs::TRANSPARENT,
			Block::OakWallSign(_) => OakWallSign::TRANSPARENT,
			Block::SpruceWallSign(_) => SpruceWallSign::TRANSPARENT,
			Block::BirchWallSign(_) => BirchWallSign::TRANSPARENT,
			Block::AcaciaWallSign(_) => AcaciaWallSign::TRANSPARENT,
			Block::JungleWallSign(_) => JungleWallSign::TRANSPARENT,
			Block::DarkOakWallSign(_) => DarkOakWallSign::TRANSPARENT,
			Block::MangroveWallSign(_) => MangroveWallSign::TRANSPARENT,
			Block::Lever(_) => Lever::TRANSPARENT,
			Block::StonePressurePlate(_) => StonePressurePlate::TRANSPARENT,
			Block::IronDoor(_) => IronDoor::TRANSPARENT,
			Block::OakPressurePlate(_) => OakPressurePlate::TRANSPARENT,
			Block::SprucePressurePlate(_) => SprucePressurePlate::TRANSPARENT,
			Block::BirchPressurePlate(_) => BirchPressurePlate::TRANSPARENT,
			Block::JunglePressurePlate(_) => JunglePressurePlate::TRANSPARENT,
			Block::AcaciaPressurePlate(_) => AcaciaPressurePlate::TRANSPARENT,
			Block::DarkOakPressurePlate(_) => DarkOakPressurePlate::TRANSPARENT,
			Block::MangrovePressurePlate(_) => MangrovePressurePlate::TRANSPARENT,
			Block::RedstoneOre(_) => RedstoneOre::TRANSPARENT,
			Block::DeepslateRedstoneOre(_) => DeepslateRedstoneOre::TRANSPARENT,
			Block::RedstoneTorch(_) => RedstoneTorch::TRANSPARENT,
			Block::RedstoneWallTorch(_) => RedstoneWallTorch::TRANSPARENT,
			Block::StoneButton(_) => StoneButton::TRANSPARENT,
			Block::Snow(_) => Snow::TRANSPARENT,
			Block::Ice(_) => Ice::TRANSPARENT,
			Block::SnowBlock(_) => SnowBlock::TRANSPARENT,
			Block::Cactus(_) => Cactus::TRANSPARENT,
			Block::Clay(_) => Clay::TRANSPARENT,
			Block::SugarCane(_) => SugarCane::TRANSPARENT,
			Block::Jukebox(_) => Jukebox::TRANSPARENT,
			Block::OakFence(_) => OakFence::TRANSPARENT,
			Block::Pumpkin(_) => Pumpkin::TRANSPARENT,
			Block::Netherrack(_) => Netherrack::TRANSPARENT,
			Block::SoulSand(_) => SoulSand::TRANSPARENT,
			Block::SoulSoil(_) => SoulSoil::TRANSPARENT,
			Block::Basalt(_) => Basalt::TRANSPARENT,
			Block::PolishedBasalt(_) => PolishedBasalt::TRANSPARENT,
			Block::SoulTorch(_) => SoulTorch::TRANSPARENT,
			Block::SoulWallTorch(_) => SoulWallTorch::TRANSPARENT,
			Block::Glowstone(_) => Glowstone::TRANSPARENT,
			Block::NetherPortal(_) => NetherPortal::TRANSPARENT,
			Block::CarvedPumpkin(_) => CarvedPumpkin::TRANSPARENT,
			Block::JackOLantern(_) => JackOLantern::TRANSPARENT,
			Block::Cake(_) => Cake::TRANSPARENT,
			Block::Repeater(_) => Repeater::TRANSPARENT,
			Block::WhiteStainedGlass(_) => WhiteStainedGlass::TRANSPARENT,
			Block::OrangeStainedGlass(_) => OrangeStainedGlass::TRANSPARENT,
			Block::MagentaStainedGlass(_) => MagentaStainedGlass::TRANSPARENT,
			Block::LightBlueStainedGlass(_) => LightBlueStainedGlass::TRANSPARENT,
			Block::YellowStainedGlass(_) => YellowStainedGlass::TRANSPARENT,
			Block::LimeStainedGlass(_) => LimeStainedGlass::TRANSPARENT,
			Block::PinkStainedGlass(_) => PinkStainedGlass::TRANSPARENT,
			Block::GrayStainedGlass(_) => GrayStainedGlass::TRANSPARENT,
			Block::LightGrayStainedGlass(_) => LightGrayStainedGlass::TRANSPARENT,
			Block::CyanStainedGlass(_) => CyanStainedGlass::TRANSPARENT,
			Block::PurpleStainedGlass(_) => PurpleStainedGlass::TRANSPARENT,
			Block::BlueStainedGlass(_) => BlueStainedGlass::TRANSPARENT,
			Block::BrownStainedGlass(_) => BrownStainedGlass::TRANSPARENT,
			Block::GreenStainedGlass(_) => GreenStainedGlass::TRANSPARENT,
			Block::RedStainedGlass(_) => RedStainedGlass::TRANSPARENT,
			Block::BlackStainedGlass(_) => BlackStainedGlass::TRANSPARENT,
			Block::OakTrapdoor(_) => OakTrapdoor::TRANSPARENT,
			Block::SpruceTrapdoor(_) => SpruceTrapdoor::TRANSPARENT,
			Block::BirchTrapdoor(_) => BirchTrapdoor::TRANSPARENT,
			Block::JungleTrapdoor(_) => JungleTrapdoor::TRANSPARENT,
			Block::AcaciaTrapdoor(_) => AcaciaTrapdoor::TRANSPARENT,
			Block::DarkOakTrapdoor(_) => DarkOakTrapdoor::TRANSPARENT,
			Block::MangroveTrapdoor(_) => MangroveTrapdoor::TRANSPARENT,
			Block::StoneBricks(_) => StoneBricks::TRANSPARENT,
			Block::MossyStoneBricks(_) => MossyStoneBricks::TRANSPARENT,
			Block::CrackedStoneBricks(_) => CrackedStoneBricks::TRANSPARENT,
			Block::ChiseledStoneBricks(_) => ChiseledStoneBricks::TRANSPARENT,
			Block::PackedMud(_) => PackedMud::TRANSPARENT,
			Block::MudBricks(_) => MudBricks::TRANSPARENT,
			Block::InfestedStone(_) => InfestedStone::TRANSPARENT,
			Block::InfestedCobblestone(_) => InfestedCobblestone::TRANSPARENT,
			Block::InfestedStoneBricks(_) => InfestedStoneBricks::TRANSPARENT,
			Block::InfestedMossyStoneBricks(_) => InfestedMossyStoneBricks::TRANSPARENT,
			Block::InfestedCrackedStoneBricks(_) => InfestedCrackedStoneBricks::TRANSPARENT,
			Block::InfestedChiseledStoneBricks(_) => InfestedChiseledStoneBricks::TRANSPARENT,
			Block::BrownMushroomBlock(_) => BrownMushroomBlock::TRANSPARENT,
			Block::RedMushroomBlock(_) => RedMushroomBlock::TRANSPARENT,
			Block::MushroomStem(_) => MushroomStem::TRANSPARENT,
			Block::IronBars(_) => IronBars::TRANSPARENT,
			Block::Chain(_) => Chain::TRANSPARENT,
			Block::GlassPane(_) => GlassPane::TRANSPARENT,
			Block::Melon(_) => Melon::TRANSPARENT,
			Block::AttachedPumpkinStem(_) => AttachedPumpkinStem::TRANSPARENT,
			Block::AttachedMelonStem(_) => AttachedMelonStem::TRANSPARENT,
			Block::PumpkinStem(_) => PumpkinStem::TRANSPARENT,
			Block::MelonStem(_) => MelonStem::TRANSPARENT,
			Block::Vine(_) => Vine::TRANSPARENT,
			Block::GlowLichen(_) => GlowLichen::TRANSPARENT,
			Block::OakFenceGate(_) => OakFenceGate::TRANSPARENT,
			Block::BrickStairs(_) => BrickStairs::TRANSPARENT,
			Block::StoneBrickStairs(_) => StoneBrickStairs::TRANSPARENT,
			Block::MudBrickStairs(_) => MudBrickStairs::TRANSPARENT,
			Block::Mycelium(_) => Mycelium::TRANSPARENT,
			Block::LilyPad(_) => LilyPad::TRANSPARENT,
			Block::NetherBricks(_) => NetherBricks::TRANSPARENT,
			Block::NetherBrickFence(_) => NetherBrickFence::TRANSPARENT,
			Block::NetherBrickStairs(_) => NetherBrickStairs::TRANSPARENT,
			Block::NetherWart(_) => NetherWart::TRANSPARENT,
			Block::EnchantingTable(_) => EnchantingTable::TRANSPARENT,
			Block::BrewingStand(_) => BrewingStand::TRANSPARENT,
			Block::Cauldron(_) => Cauldron::TRANSPARENT,
			Block::WaterCauldron(_) => WaterCauldron::TRANSPARENT,
			Block::LavaCauldron(_) => LavaCauldron::TRANSPARENT,
			Block::PowderSnowCauldron(_) => PowderSnowCauldron::TRANSPARENT,
			Block::EndPortal(_) => EndPortal::TRANSPARENT,
			Block::EndPortalFrame(_) => EndPortalFrame::TRANSPARENT,
			Block::EndStone(_) => EndStone::TRANSPARENT,
			Block::DragonEgg(_) => DragonEgg::TRANSPARENT,
			Block::RedstoneLamp(_) => RedstoneLamp::TRANSPARENT,
			Block::Cocoa(_) => Cocoa::TRANSPARENT,
			Block::SandstoneStairs(_) => SandstoneStairs::TRANSPARENT,
			Block::EmeraldOre(_) => EmeraldOre::TRANSPARENT,
			Block::DeepslateEmeraldOre(_) => DeepslateEmeraldOre::TRANSPARENT,
			Block::EnderChest(_) => EnderChest::TRANSPARENT,
			Block::TripwireHook(_) => TripwireHook::TRANSPARENT,
			Block::Tripwire(_) => Tripwire::TRANSPARENT,
			Block::EmeraldBlock(_) => EmeraldBlock::TRANSPARENT,
			Block::SpruceStairs(_) => SpruceStairs::TRANSPARENT,
			Block::BirchStairs(_) => BirchStairs::TRANSPARENT,
			Block::JungleStairs(_) => JungleStairs::TRANSPARENT,
			Block::CommandBlock(_) => CommandBlock::TRANSPARENT,
			Block::Beacon(_) => Beacon::TRANSPARENT,
			Block::CobblestoneWall(_) => CobblestoneWall::TRANSPARENT,
			Block::MossyCobblestoneWall(_) => MossyCobblestoneWall::TRANSPARENT,
			Block::FlowerPot(_) => FlowerPot::TRANSPARENT,
			Block::PottedOakSapling(_) => PottedOakSapling::TRANSPARENT,
			Block::PottedSpruceSapling(_) => PottedSpruceSapling::TRANSPARENT,
			Block::PottedBirchSapling(_) => PottedBirchSapling::TRANSPARENT,
			Block::PottedJungleSapling(_) => PottedJungleSapling::TRANSPARENT,
			Block::PottedAcaciaSapling(_) => PottedAcaciaSapling::TRANSPARENT,
			Block::PottedDarkOakSapling(_) => PottedDarkOakSapling::TRANSPARENT,
			Block::PottedMangrovePropagule(_) => PottedMangrovePropagule::TRANSPARENT,
			Block::PottedFern(_) => PottedFern::TRANSPARENT,
			Block::PottedDandelion(_) => PottedDandelion::TRANSPARENT,
			Block::PottedPoppy(_) => PottedPoppy::TRANSPARENT,
			Block::PottedBlueOrchid(_) => PottedBlueOrchid::TRANSPARENT,
			Block::PottedAllium(_) => PottedAllium::TRANSPARENT,
			Block::PottedAzureBluet(_) => PottedAzureBluet::TRANSPARENT,
			Block::PottedRedTulip(_) => PottedRedTulip::TRANSPARENT,
			Block::PottedOrangeTulip(_) => PottedOrangeTulip::TRANSPARENT,
			Block::PottedWhiteTulip(_) => PottedWhiteTulip::TRANSPARENT,
			Block::PottedPinkTulip(_) => PottedPinkTulip::TRANSPARENT,
			Block::PottedOxeyeDaisy(_) => PottedOxeyeDaisy::TRANSPARENT,
			Block::PottedCornflower(_) => PottedCornflower::TRANSPARENT,
			Block::PottedLilyOfTheValley(_) => PottedLilyOfTheValley::TRANSPARENT,
			Block::PottedWitherRose(_) => PottedWitherRose::TRANSPARENT,
			Block::PottedRedMushroom(_) => PottedRedMushroom::TRANSPARENT,
			Block::PottedBrownMushroom(_) => PottedBrownMushroom::TRANSPARENT,
			Block::PottedDeadBush(_) => PottedDeadBush::TRANSPARENT,
			Block::PottedCactus(_) => PottedCactus::TRANSPARENT,
			Block::Carrots(_) => Carrots::TRANSPARENT,
			Block::Potatoes(_) => Potatoes::TRANSPARENT,
			Block::OakButton(_) => OakButton::TRANSPARENT,
			Block::SpruceButton(_) => SpruceButton::TRANSPARENT,
			Block::BirchButton(_) => BirchButton::TRANSPARENT,
			Block::JungleButton(_) => JungleButton::TRANSPARENT,
			Block::AcaciaButton(_) => AcaciaButton::TRANSPARENT,
			Block::DarkOakButton(_) => DarkOakButton::TRANSPARENT,
			Block::MangroveButton(_) => MangroveButton::TRANSPARENT,
			Block::SkeletonSkull(_) => SkeletonSkull::TRANSPARENT,
			Block::SkeletonWallSkull(_) => SkeletonWallSkull::TRANSPARENT,
			Block::WitherSkeletonSkull(_) => WitherSkeletonSkull::TRANSPARENT,
			Block::WitherSkeletonWallSkull(_) => WitherSkeletonWallSkull::TRANSPARENT,
			Block::ZombieHead(_) => ZombieHead::TRANSPARENT,
			Block::ZombieWallHead(_) => ZombieWallHead::TRANSPARENT,
			Block::PlayerHead(_) => PlayerHead::TRANSPARENT,
			Block::PlayerWallHead(_) => PlayerWallHead::TRANSPARENT,
			Block::CreeperHead(_) => CreeperHead::TRANSPARENT,
			Block::CreeperWallHead(_) => CreeperWallHead::TRANSPARENT,
			Block::DragonHead(_) => DragonHead::TRANSPARENT,
			Block::DragonWallHead(_) => DragonWallHead::TRANSPARENT,
			Block::Anvil(_) => Anvil::TRANSPARENT,
			Block::ChippedAnvil(_) => ChippedAnvil::TRANSPARENT,
			Block::DamagedAnvil(_) => DamagedAnvil::TRANSPARENT,
			Block::TrappedChest(_) => TrappedChest::TRANSPARENT,
			Block::LightWeightedPressurePlate(_) => LightWeightedPressurePlate::TRANSPARENT,
			Block::HeavyWeightedPressurePlate(_) => HeavyWeightedPressurePlate::TRANSPARENT,
			Block::Comparator(_) => Comparator::TRANSPARENT,
			Block::DaylightDetector(_) => DaylightDetector::TRANSPARENT,
			Block::RedstoneBlock(_) => RedstoneBlock::TRANSPARENT,
			Block::NetherQuartzOre(_) => NetherQuartzOre::TRANSPARENT,
			Block::Hopper(_) => Hopper::TRANSPARENT,
			Block::QuartzBlock(_) => QuartzBlock::TRANSPARENT,
			Block::ChiseledQuartzBlock(_) => ChiseledQuartzBlock::TRANSPARENT,
			Block::QuartzPillar(_) => QuartzPillar::TRANSPARENT,
			Block::QuartzStairs(_) => QuartzStairs::TRANSPARENT,
			Block::ActivatorRail(_) => ActivatorRail::TRANSPARENT,
			Block::Dropper(_) => Dropper::TRANSPARENT,
			Block::WhiteTerracotta(_) => WhiteTerracotta::TRANSPARENT,
			Block::OrangeTerracotta(_) => OrangeTerracotta::TRANSPARENT,
			Block::MagentaTerracotta(_) => MagentaTerracotta::TRANSPARENT,
			Block::LightBlueTerracotta(_) => LightBlueTerracotta::TRANSPARENT,
			Block::YellowTerracotta(_) => YellowTerracotta::TRANSPARENT,
			Block::LimeTerracotta(_) => LimeTerracotta::TRANSPARENT,
			Block::PinkTerracotta(_) => PinkTerracotta::TRANSPARENT,
			Block::GrayTerracotta(_) => GrayTerracotta::TRANSPARENT,
			Block::LightGrayTerracotta(_) => LightGrayTerracotta::TRANSPARENT,
			Block::CyanTerracotta(_) => CyanTerracotta::TRANSPARENT,
			Block::PurpleTerracotta(_) => PurpleTerracotta::TRANSPARENT,
			Block::BlueTerracotta(_) => BlueTerracotta::TRANSPARENT,
			Block::BrownTerracotta(_) => BrownTerracotta::TRANSPARENT,
			Block::GreenTerracotta(_) => GreenTerracotta::TRANSPARENT,
			Block::RedTerracotta(_) => RedTerracotta::TRANSPARENT,
			Block::BlackTerracotta(_) => BlackTerracotta::TRANSPARENT,
			Block::WhiteStainedGlassPane(_) => WhiteStainedGlassPane::TRANSPARENT,
			Block::OrangeStainedGlassPane(_) => OrangeStainedGlassPane::TRANSPARENT,
			Block::MagentaStainedGlassPane(_) => MagentaStainedGlassPane::TRANSPARENT,
			Block::LightBlueStainedGlassPane(_) => LightBlueStainedGlassPane::TRANSPARENT,
			Block::YellowStainedGlassPane(_) => YellowStainedGlassPane::TRANSPARENT,
			Block::LimeStainedGlassPane(_) => LimeStainedGlassPane::TRANSPARENT,
			Block::PinkStainedGlassPane(_) => PinkStainedGlassPane::TRANSPARENT,
			Block::GrayStainedGlassPane(_) => GrayStainedGlassPane::TRANSPARENT,
			Block::LightGrayStainedGlassPane(_) => LightGrayStainedGlassPane::TRANSPARENT,
			Block::CyanStainedGlassPane(_) => CyanStainedGlassPane::TRANSPARENT,
			Block::PurpleStainedGlassPane(_) => PurpleStainedGlassPane::TRANSPARENT,
			Block::BlueStainedGlassPane(_) => BlueStainedGlassPane::TRANSPARENT,
			Block::BrownStainedGlassPane(_) => BrownStainedGlassPane::TRANSPARENT,
			Block::GreenStainedGlassPane(_) => GreenStainedGlassPane::TRANSPARENT,
			Block::RedStainedGlassPane(_) => RedStainedGlassPane::TRANSPARENT,
			Block::BlackStainedGlassPane(_) => BlackStainedGlassPane::TRANSPARENT,
			Block::AcaciaStairs(_) => AcaciaStairs::TRANSPARENT,
			Block::DarkOakStairs(_) => DarkOakStairs::TRANSPARENT,
			Block::MangroveStairs(_) => MangroveStairs::TRANSPARENT,
			Block::SlimeBlock(_) => SlimeBlock::TRANSPARENT,
			Block::Barrier(_) => Barrier::TRANSPARENT,
			Block::Light(_) => Light::TRANSPARENT,
			Block::IronTrapdoor(_) => IronTrapdoor::TRANSPARENT,
			Block::Prismarine(_) => Prismarine::TRANSPARENT,
			Block::PrismarineBricks(_) => PrismarineBricks::TRANSPARENT,
			Block::DarkPrismarine(_) => DarkPrismarine::TRANSPARENT,
			Block::PrismarineStairs(_) => PrismarineStairs::TRANSPARENT,
			Block::PrismarineBrickStairs(_) => PrismarineBrickStairs::TRANSPARENT,
			Block::DarkPrismarineStairs(_) => DarkPrismarineStairs::TRANSPARENT,
			Block::PrismarineSlab(_) => PrismarineSlab::TRANSPARENT,
			Block::PrismarineBrickSlab(_) => PrismarineBrickSlab::TRANSPARENT,
			Block::DarkPrismarineSlab(_) => DarkPrismarineSlab::TRANSPARENT,
			Block::SeaLantern(_) => SeaLantern::TRANSPARENT,
			Block::HayBlock(_) => HayBlock::TRANSPARENT,
			Block::WhiteCarpet(_) => WhiteCarpet::TRANSPARENT,
			Block::OrangeCarpet(_) => OrangeCarpet::TRANSPARENT,
			Block::MagentaCarpet(_) => MagentaCarpet::TRANSPARENT,
			Block::LightBlueCarpet(_) => LightBlueCarpet::TRANSPARENT,
			Block::YellowCarpet(_) => YellowCarpet::TRANSPARENT,
			Block::LimeCarpet(_) => LimeCarpet::TRANSPARENT,
			Block::PinkCarpet(_) => PinkCarpet::TRANSPARENT,
			Block::GrayCarpet(_) => GrayCarpet::TRANSPARENT,
			Block::LightGrayCarpet(_) => LightGrayCarpet::TRANSPARENT,
			Block::CyanCarpet(_) => CyanCarpet::TRANSPARENT,
			Block::PurpleCarpet(_) => PurpleCarpet::TRANSPARENT,
			Block::BlueCarpet(_) => BlueCarpet::TRANSPARENT,
			Block::BrownCarpet(_) => BrownCarpet::TRANSPARENT,
			Block::GreenCarpet(_) => GreenCarpet::TRANSPARENT,
			Block::RedCarpet(_) => RedCarpet::TRANSPARENT,
			Block::BlackCarpet(_) => BlackCarpet::TRANSPARENT,
			Block::Terracotta(_) => Terracotta::TRANSPARENT,
			Block::CoalBlock(_) => CoalBlock::TRANSPARENT,
			Block::PackedIce(_) => PackedIce::TRANSPARENT,
			Block::Sunflower(_) => Sunflower::TRANSPARENT,
			Block::Lilac(_) => Lilac::TRANSPARENT,
			Block::RoseBush(_) => RoseBush::TRANSPARENT,
			Block::Peony(_) => Peony::TRANSPARENT,
			Block::TallGrass(_) => TallGrass::TRANSPARENT,
			Block::LargeFern(_) => LargeFern::TRANSPARENT,
			Block::WhiteBanner(_) => WhiteBanner::TRANSPARENT,
			Block::OrangeBanner(_) => OrangeBanner::TRANSPARENT,
			Block::MagentaBanner(_) => MagentaBanner::TRANSPARENT,
			Block::LightBlueBanner(_) => LightBlueBanner::TRANSPARENT,
			Block::YellowBanner(_) => YellowBanner::TRANSPARENT,
			Block::LimeBanner(_) => LimeBanner::TRANSPARENT,
			Block::PinkBanner(_) => PinkBanner::TRANSPARENT,
			Block::GrayBanner(_) => GrayBanner::TRANSPARENT,
			Block::LightGrayBanner(_) => LightGrayBanner::TRANSPARENT,
			Block::CyanBanner(_) => CyanBanner::TRANSPARENT,
			Block::PurpleBanner(_) => PurpleBanner::TRANSPARENT,
			Block::BlueBanner(_) => BlueBanner::TRANSPARENT,
			Block::BrownBanner(_) => BrownBanner::TRANSPARENT,
			Block::GreenBanner(_) => GreenBanner::TRANSPARENT,
			Block::RedBanner(_) => RedBanner::TRANSPARENT,
			Block::BlackBanner(_) => BlackBanner::TRANSPARENT,
			Block::WhiteWallBanner(_) => WhiteWallBanner::TRANSPARENT,
			Block::OrangeWallBanner(_) => OrangeWallBanner::TRANSPARENT,
			Block::MagentaWallBanner(_) => MagentaWallBanner::TRANSPARENT,
			Block::LightBlueWallBanner(_) => LightBlueWallBanner::TRANSPARENT,
			Block::YellowWallBanner(_) => YellowWallBanner::TRANSPARENT,
			Block::LimeWallBanner(_) => LimeWallBanner::TRANSPARENT,
			Block::PinkWallBanner(_) => PinkWallBanner::TRANSPARENT,
			Block::GrayWallBanner(_) => GrayWallBanner::TRANSPARENT,
			Block::LightGrayWallBanner(_) => LightGrayWallBanner::TRANSPARENT,
			Block::CyanWallBanner(_) => CyanWallBanner::TRANSPARENT,
			Block::PurpleWallBanner(_) => PurpleWallBanner::TRANSPARENT,
			Block::BlueWallBanner(_) => BlueWallBanner::TRANSPARENT,
			Block::BrownWallBanner(_) => BrownWallBanner::TRANSPARENT,
			Block::GreenWallBanner(_) => GreenWallBanner::TRANSPARENT,
			Block::RedWallBanner(_) => RedWallBanner::TRANSPARENT,
			Block::BlackWallBanner(_) => BlackWallBanner::TRANSPARENT,
			Block::RedSandstone(_) => RedSandstone::TRANSPARENT,
			Block::ChiseledRedSandstone(_) => ChiseledRedSandstone::TRANSPARENT,
			Block::CutRedSandstone(_) => CutRedSandstone::TRANSPARENT,
			Block::RedSandstoneStairs(_) => RedSandstoneStairs::TRANSPARENT,
			Block::OakSlab(_) => OakSlab::TRANSPARENT,
			Block::SpruceSlab(_) => SpruceSlab::TRANSPARENT,
			Block::BirchSlab(_) => BirchSlab::TRANSPARENT,
			Block::JungleSlab(_) => JungleSlab::TRANSPARENT,
			Block::AcaciaSlab(_) => AcaciaSlab::TRANSPARENT,
			Block::DarkOakSlab(_) => DarkOakSlab::TRANSPARENT,
			Block::MangroveSlab(_) => MangroveSlab::TRANSPARENT,
			Block::StoneSlab(_) => StoneSlab::TRANSPARENT,
			Block::SmoothStoneSlab(_) => SmoothStoneSlab::TRANSPARENT,
			Block::SandstoneSlab(_) => SandstoneSlab::TRANSPARENT,
			Block::CutSandstoneSlab(_) => CutSandstoneSlab::TRANSPARENT,
			Block::PetrifiedOakSlab(_) => PetrifiedOakSlab::TRANSPARENT,
			Block::CobblestoneSlab(_) => CobblestoneSlab::TRANSPARENT,
			Block::BrickSlab(_) => BrickSlab::TRANSPARENT,
			Block::StoneBrickSlab(_) => StoneBrickSlab::TRANSPARENT,
			Block::MudBrickSlab(_) => MudBrickSlab::TRANSPARENT,
			Block::NetherBrickSlab(_) => NetherBrickSlab::TRANSPARENT,
			Block::QuartzSlab(_) => QuartzSlab::TRANSPARENT,
			Block::RedSandstoneSlab(_) => RedSandstoneSlab::TRANSPARENT,
			Block::CutRedSandstoneSlab(_) => CutRedSandstoneSlab::TRANSPARENT,
			Block::PurpurSlab(_) => PurpurSlab::TRANSPARENT,
			Block::SmoothStone(_) => SmoothStone::TRANSPARENT,
			Block::SmoothSandstone(_) => SmoothSandstone::TRANSPARENT,
			Block::SmoothQuartz(_) => SmoothQuartz::TRANSPARENT,
			Block::SmoothRedSandstone(_) => SmoothRedSandstone::TRANSPARENT,
			Block::SpruceFenceGate(_) => SpruceFenceGate::TRANSPARENT,
			Block::BirchFenceGate(_) => BirchFenceGate::TRANSPARENT,
			Block::JungleFenceGate(_) => JungleFenceGate::TRANSPARENT,
			Block::AcaciaFenceGate(_) => AcaciaFenceGate::TRANSPARENT,
			Block::DarkOakFenceGate(_) => DarkOakFenceGate::TRANSPARENT,
			Block::MangroveFenceGate(_) => MangroveFenceGate::TRANSPARENT,
			Block::SpruceFence(_) => SpruceFence::TRANSPARENT,
			Block::BirchFence(_) => BirchFence::TRANSPARENT,
			Block::JungleFence(_) => JungleFence::TRANSPARENT,
			Block::AcaciaFence(_) => AcaciaFence::TRANSPARENT,
			Block::DarkOakFence(_) => DarkOakFence::TRANSPARENT,
			Block::MangroveFence(_) => MangroveFence::TRANSPARENT,
			Block::SpruceDoor(_) => SpruceDoor::TRANSPARENT,
			Block::BirchDoor(_) => BirchDoor::TRANSPARENT,
			Block::JungleDoor(_) => JungleDoor::TRANSPARENT,
			Block::AcaciaDoor(_) => AcaciaDoor::TRANSPARENT,
			Block::DarkOakDoor(_) => DarkOakDoor::TRANSPARENT,
			Block::MangroveDoor(_) => MangroveDoor::TRANSPARENT,
			Block::EndRod(_) => EndRod::TRANSPARENT,
			Block::ChorusPlant(_) => ChorusPlant::TRANSPARENT,
			Block::ChorusFlower(_) => ChorusFlower::TRANSPARENT,
			Block::PurpurBlock(_) => PurpurBlock::TRANSPARENT,
			Block::PurpurPillar(_) => PurpurPillar::TRANSPARENT,
			Block::PurpurStairs(_) => PurpurStairs::TRANSPARENT,
			Block::EndStoneBricks(_) => EndStoneBricks::TRANSPARENT,
			Block::Beetroots(_) => Beetroots::TRANSPARENT,
			Block::DirtPath(_) => DirtPath::TRANSPARENT,
			Block::EndGateway(_) => EndGateway::TRANSPARENT,
			Block::RepeatingCommandBlock(_) => RepeatingCommandBlock::TRANSPARENT,
			Block::ChainCommandBlock(_) => ChainCommandBlock::TRANSPARENT,
			Block::FrostedIce(_) => FrostedIce::TRANSPARENT,
			Block::MagmaBlock(_) => MagmaBlock::TRANSPARENT,
			Block::NetherWartBlock(_) => NetherWartBlock::TRANSPARENT,
			Block::RedNetherBricks(_) => RedNetherBricks::TRANSPARENT,
			Block::BoneBlock(_) => BoneBlock::TRANSPARENT,
			Block::StructureVoid(_) => StructureVoid::TRANSPARENT,
			Block::Observer(_) => Observer::TRANSPARENT,
			Block::ShulkerBox(_) => ShulkerBox::TRANSPARENT,
			Block::WhiteShulkerBox(_) => WhiteShulkerBox::TRANSPARENT,
			Block::OrangeShulkerBox(_) => OrangeShulkerBox::TRANSPARENT,
			Block::MagentaShulkerBox(_) => MagentaShulkerBox::TRANSPARENT,
			Block::LightBlueShulkerBox(_) => LightBlueShulkerBox::TRANSPARENT,
			Block::YellowShulkerBox(_) => YellowShulkerBox::TRANSPARENT,
			Block::LimeShulkerBox(_) => LimeShulkerBox::TRANSPARENT,
			Block::PinkShulkerBox(_) => PinkShulkerBox::TRANSPARENT,
			Block::GrayShulkerBox(_) => GrayShulkerBox::TRANSPARENT,
			Block::LightGrayShulkerBox(_) => LightGrayShulkerBox::TRANSPARENT,
			Block::CyanShulkerBox(_) => CyanShulkerBox::TRANSPARENT,
			Block::PurpleShulkerBox(_) => PurpleShulkerBox::TRANSPARENT,
			Block::BlueShulkerBox(_) => BlueShulkerBox::TRANSPARENT,
			Block::BrownShulkerBox(_) => BrownShulkerBox::TRANSPARENT,
			Block::GreenShulkerBox(_) => GreenShulkerBox::TRANSPARENT,
			Block::RedShulkerBox(_) => RedShulkerBox::TRANSPARENT,
			Block::BlackShulkerBox(_) => BlackShulkerBox::TRANSPARENT,
			Block::WhiteGlazedTerracotta(_) => WhiteGlazedTerracotta::TRANSPARENT,
			Block::OrangeGlazedTerracotta(_) => OrangeGlazedTerracotta::TRANSPARENT,
			Block::MagentaGlazedTerracotta(_) => MagentaGlazedTerracotta::TRANSPARENT,
			Block::LightBlueGlazedTerracotta(_) => LightBlueGlazedTerracotta::TRANSPARENT,
			Block::YellowGlazedTerracotta(_) => YellowGlazedTerracotta::TRANSPARENT,
			Block::LimeGlazedTerracotta(_) => LimeGlazedTerracotta::TRANSPARENT,
			Block::PinkGlazedTerracotta(_) => PinkGlazedTerracotta::TRANSPARENT,
			Block::GrayGlazedTerracotta(_) => GrayGlazedTerracotta::TRANSPARENT,
			Block::LightGrayGlazedTerracotta(_) => LightGrayGlazedTerracotta::TRANSPARENT,
			Block::CyanGlazedTerracotta(_) => CyanGlazedTerracotta::TRANSPARENT,
			Block::PurpleGlazedTerracotta(_) => PurpleGlazedTerracotta::TRANSPARENT,
			Block::BlueGlazedTerracotta(_) => BlueGlazedTerracotta::TRANSPARENT,
			Block::BrownGlazedTerracotta(_) => BrownGlazedTerracotta::TRANSPARENT,
			Block::GreenGlazedTerracotta(_) => GreenGlazedTerracotta::TRANSPARENT,
			Block::RedGlazedTerracotta(_) => RedGlazedTerracotta::TRANSPARENT,
			Block::BlackGlazedTerracotta(_) => BlackGlazedTerracotta::TRANSPARENT,
			Block::WhiteConcrete(_) => WhiteConcrete::TRANSPARENT,
			Block::OrangeConcrete(_) => OrangeConcrete::TRANSPARENT,
			Block::MagentaConcrete(_) => MagentaConcrete::TRANSPARENT,
			Block::LightBlueConcrete(_) => LightBlueConcrete::TRANSPARENT,
			Block::YellowConcrete(_) => YellowConcrete::TRANSPARENT,
			Block::LimeConcrete(_) => LimeConcrete::TRANSPARENT,
			Block::PinkConcrete(_) => PinkConcrete::TRANSPARENT,
			Block::GrayConcrete(_) => GrayConcrete::TRANSPARENT,
			Block::LightGrayConcrete(_) => LightGrayConcrete::TRANSPARENT,
			Block::CyanConcrete(_) => CyanConcrete::TRANSPARENT,
			Block::PurpleConcrete(_) => PurpleConcrete::TRANSPARENT,
			Block::BlueConcrete(_) => BlueConcrete::TRANSPARENT,
			Block::BrownConcrete(_) => BrownConcrete::TRANSPARENT,
			Block::GreenConcrete(_) => GreenConcrete::TRANSPARENT,
			Block::RedConcrete(_) => RedConcrete::TRANSPARENT,
			Block::BlackConcrete(_) => BlackConcrete::TRANSPARENT,
			Block::WhiteConcretePowder(_) => WhiteConcretePowder::TRANSPARENT,
			Block::OrangeConcretePowder(_) => OrangeConcretePowder::TRANSPARENT,
			Block::MagentaConcretePowder(_) => MagentaConcretePowder::TRANSPARENT,
			Block::LightBlueConcretePowder(_) => LightBlueConcretePowder::TRANSPARENT,
			Block::YellowConcretePowder(_) => YellowConcretePowder::TRANSPARENT,
			Block::LimeConcretePowder(_) => LimeConcretePowder::TRANSPARENT,
			Block::PinkConcretePowder(_) => PinkConcretePowder::TRANSPARENT,
			Block::GrayConcretePowder(_) => GrayConcretePowder::TRANSPARENT,
			Block::LightGrayConcretePowder(_) => LightGrayConcretePowder::TRANSPARENT,
			Block::CyanConcretePowder(_) => CyanConcretePowder::TRANSPARENT,
			Block::PurpleConcretePowder(_) => PurpleConcretePowder::TRANSPARENT,
			Block::BlueConcretePowder(_) => BlueConcretePowder::TRANSPARENT,
			Block::BrownConcretePowder(_) => BrownConcretePowder::TRANSPARENT,
			Block::GreenConcretePowder(_) => GreenConcretePowder::TRANSPARENT,
			Block::RedConcretePowder(_) => RedConcretePowder::TRANSPARENT,
			Block::BlackConcretePowder(_) => BlackConcretePowder::TRANSPARENT,
			Block::Kelp(_) => Kelp::TRANSPARENT,
			Block::KelpPlant(_) => KelpPlant::TRANSPARENT,
			Block::DriedKelpBlock(_) => DriedKelpBlock::TRANSPARENT,
			Block::TurtleEgg(_) => TurtleEgg::TRANSPARENT,
			Block::DeadTubeCoralBlock(_) => DeadTubeCoralBlock::TRANSPARENT,
			Block::DeadBrainCoralBlock(_) => DeadBrainCoralBlock::TRANSPARENT,
			Block::DeadBubbleCoralBlock(_) => DeadBubbleCoralBlock::TRANSPARENT,
			Block::DeadFireCoralBlock(_) => DeadFireCoralBlock::TRANSPARENT,
			Block::DeadHornCoralBlock(_) => DeadHornCoralBlock::TRANSPARENT,
			Block::TubeCoralBlock(_) => TubeCoralBlock::TRANSPARENT,
			Block::BrainCoralBlock(_) => BrainCoralBlock::TRANSPARENT,
			Block::BubbleCoralBlock(_) => BubbleCoralBlock::TRANSPARENT,
			Block::FireCoralBlock(_) => FireCoralBlock::TRANSPARENT,
			Block::HornCoralBlock(_) => HornCoralBlock::TRANSPARENT,
			Block::DeadTubeCoral(_) => DeadTubeCoral::TRANSPARENT,
			Block::DeadBrainCoral(_) => DeadBrainCoral::TRANSPARENT,
			Block::DeadBubbleCoral(_) => DeadBubbleCoral::TRANSPARENT,
			Block::DeadFireCoral(_) => DeadFireCoral::TRANSPARENT,
			Block::DeadHornCoral(_) => DeadHornCoral::TRANSPARENT,
			Block::TubeCoral(_) => TubeCoral::TRANSPARENT,
			Block::BrainCoral(_) => BrainCoral::TRANSPARENT,
			Block::BubbleCoral(_) => BubbleCoral::TRANSPARENT,
			Block::FireCoral(_) => FireCoral::TRANSPARENT,
			Block::HornCoral(_) => HornCoral::TRANSPARENT,
			Block::DeadTubeCoralFan(_) => DeadTubeCoralFan::TRANSPARENT,
			Block::DeadBrainCoralFan(_) => DeadBrainCoralFan::TRANSPARENT,
			Block::DeadBubbleCoralFan(_) => DeadBubbleCoralFan::TRANSPARENT,
			Block::DeadFireCoralFan(_) => DeadFireCoralFan::TRANSPARENT,
			Block::DeadHornCoralFan(_) => DeadHornCoralFan::TRANSPARENT,
			Block::TubeCoralFan(_) => TubeCoralFan::TRANSPARENT,
			Block::BrainCoralFan(_) => BrainCoralFan::TRANSPARENT,
			Block::BubbleCoralFan(_) => BubbleCoralFan::TRANSPARENT,
			Block::FireCoralFan(_) => FireCoralFan::TRANSPARENT,
			Block::HornCoralFan(_) => HornCoralFan::TRANSPARENT,
			Block::DeadTubeCoralWallFan(_) => DeadTubeCoralWallFan::TRANSPARENT,
			Block::DeadBrainCoralWallFan(_) => DeadBrainCoralWallFan::TRANSPARENT,
			Block::DeadBubbleCoralWallFan(_) => DeadBubbleCoralWallFan::TRANSPARENT,
			Block::DeadFireCoralWallFan(_) => DeadFireCoralWallFan::TRANSPARENT,
			Block::DeadHornCoralWallFan(_) => DeadHornCoralWallFan::TRANSPARENT,
			Block::TubeCoralWallFan(_) => TubeCoralWallFan::TRANSPARENT,
			Block::BrainCoralWallFan(_) => BrainCoralWallFan::TRANSPARENT,
			Block::BubbleCoralWallFan(_) => BubbleCoralWallFan::TRANSPARENT,
			Block::FireCoralWallFan(_) => FireCoralWallFan::TRANSPARENT,
			Block::HornCoralWallFan(_) => HornCoralWallFan::TRANSPARENT,
			Block::SeaPickle(_) => SeaPickle::TRANSPARENT,
			Block::BlueIce(_) => BlueIce::TRANSPARENT,
			Block::Conduit(_) => Conduit::TRANSPARENT,
			Block::BambooSapling(_) => BambooSapling::TRANSPARENT,
			Block::Bamboo(_) => Bamboo::TRANSPARENT,
			Block::PottedBamboo(_) => PottedBamboo::TRANSPARENT,
			Block::VoidAir(_) => VoidAir::TRANSPARENT,
			Block::CaveAir(_) => CaveAir::TRANSPARENT,
			Block::BubbleColumn(_) => BubbleColumn::TRANSPARENT,
			Block::PolishedGraniteStairs(_) => PolishedGraniteStairs::TRANSPARENT,
			Block::SmoothRedSandstoneStairs(_) => SmoothRedSandstoneStairs::TRANSPARENT,
			Block::MossyStoneBrickStairs(_) => MossyStoneBrickStairs::TRANSPARENT,
			Block::PolishedDioriteStairs(_) => PolishedDioriteStairs::TRANSPARENT,
			Block::MossyCobblestoneStairs(_) => MossyCobblestoneStairs::TRANSPARENT,
			Block::EndStoneBrickStairs(_) => EndStoneBrickStairs::TRANSPARENT,
			Block::StoneStairs(_) => StoneStairs::TRANSPARENT,
			Block::SmoothSandstoneStairs(_) => SmoothSandstoneStairs::TRANSPARENT,
			Block::SmoothQuartzStairs(_) => SmoothQuartzStairs::TRANSPARENT,
			Block::GraniteStairs(_) => GraniteStairs::TRANSPARENT,
			Block::AndesiteStairs(_) => AndesiteStairs::TRANSPARENT,
			Block::RedNetherBrickStairs(_) => RedNetherBrickStairs::TRANSPARENT,
			Block::PolishedAndesiteStairs(_) => PolishedAndesiteStairs::TRANSPARENT,
			Block::DioriteStairs(_) => DioriteStairs::TRANSPARENT,
			Block::PolishedGraniteSlab(_) => PolishedGraniteSlab::TRANSPARENT,
			Block::SmoothRedSandstoneSlab(_) => SmoothRedSandstoneSlab::TRANSPARENT,
			Block::MossyStoneBrickSlab(_) => MossyStoneBrickSlab::TRANSPARENT,
			Block::PolishedDioriteSlab(_) => PolishedDioriteSlab::TRANSPARENT,
			Block::MossyCobblestoneSlab(_) => MossyCobblestoneSlab::TRANSPARENT,
			Block::EndStoneBrickSlab(_) => EndStoneBrickSlab::TRANSPARENT,
			Block::SmoothSandstoneSlab(_) => SmoothSandstoneSlab::TRANSPARENT,
			Block::SmoothQuartzSlab(_) => SmoothQuartzSlab::TRANSPARENT,
			Block::GraniteSlab(_) => GraniteSlab::TRANSPARENT,
			Block::AndesiteSlab(_) => AndesiteSlab::TRANSPARENT,
			Block::RedNetherBrickSlab(_) => RedNetherBrickSlab::TRANSPARENT,
			Block::PolishedAndesiteSlab(_) => PolishedAndesiteSlab::TRANSPARENT,
			Block::DioriteSlab(_) => DioriteSlab::TRANSPARENT,
			Block::BrickWall(_) => BrickWall::TRANSPARENT,
			Block::PrismarineWall(_) => PrismarineWall::TRANSPARENT,
			Block::RedSandstoneWall(_) => RedSandstoneWall::TRANSPARENT,
			Block::MossyStoneBrickWall(_) => MossyStoneBrickWall::TRANSPARENT,
			Block::GraniteWall(_) => GraniteWall::TRANSPARENT,
			Block::StoneBrickWall(_) => StoneBrickWall::TRANSPARENT,
			Block::MudBrickWall(_) => MudBrickWall::TRANSPARENT,
			Block::NetherBrickWall(_) => NetherBrickWall::TRANSPARENT,
			Block::AndesiteWall(_) => AndesiteWall::TRANSPARENT,
			Block::RedNetherBrickWall(_) => RedNetherBrickWall::TRANSPARENT,
			Block::SandstoneWall(_) => SandstoneWall::TRANSPARENT,
			Block::EndStoneBrickWall(_) => EndStoneBrickWall::TRANSPARENT,
			Block::DioriteWall(_) => DioriteWall::TRANSPARENT,
			Block::Scaffolding(_) => Scaffolding::TRANSPARENT,
			Block::Loom(_) => Loom::TRANSPARENT,
			Block::Barrel(_) => Barrel::TRANSPARENT,
			Block::Smoker(_) => Smoker::TRANSPARENT,
			Block::BlastFurnace(_) => BlastFurnace::TRANSPARENT,
			Block::CartographyTable(_) => CartographyTable::TRANSPARENT,
			Block::FletchingTable(_) => FletchingTable::TRANSPARENT,
			Block::Grindstone(_) => Grindstone::TRANSPARENT,
			Block::Lectern(_) => Lectern::TRANSPARENT,
			Block::SmithingTable(_) => SmithingTable::TRANSPARENT,
			Block::Stonecutter(_) => Stonecutter::TRANSPARENT,
			Block::Bell(_) => Bell::TRANSPARENT,
			Block::Lantern(_) => Lantern::TRANSPARENT,
			Block::SoulLantern(_) => SoulLantern::TRANSPARENT,
			Block::Campfire(_) => Campfire::TRANSPARENT,
			Block::SoulCampfire(_) => SoulCampfire::TRANSPARENT,
			Block::SweetBerryBush(_) => SweetBerryBush::TRANSPARENT,
			Block::WarpedStem(_) => WarpedStem::TRANSPARENT,
			Block::StrippedWarpedStem(_) => StrippedWarpedStem::TRANSPARENT,
			Block::WarpedHyphae(_) => WarpedHyphae::TRANSPARENT,
			Block::StrippedWarpedHyphae(_) => StrippedWarpedHyphae::TRANSPARENT,
			Block::WarpedNylium(_) => WarpedNylium::TRANSPARENT,
			Block::WarpedFungus(_) => WarpedFungus::TRANSPARENT,
			Block::WarpedWartBlock(_) => WarpedWartBlock::TRANSPARENT,
			Block::WarpedRoots(_) => WarpedRoots::TRANSPARENT,
			Block::NetherSprouts(_) => NetherSprouts::TRANSPARENT,
			Block::CrimsonStem(_) => CrimsonStem::TRANSPARENT,
			Block::StrippedCrimsonStem(_) => StrippedCrimsonStem::TRANSPARENT,
			Block::CrimsonHyphae(_) => CrimsonHyphae::TRANSPARENT,
			Block::StrippedCrimsonHyphae(_) => StrippedCrimsonHyphae::TRANSPARENT,
			Block::CrimsonNylium(_) => CrimsonNylium::TRANSPARENT,
			Block::CrimsonFungus(_) => CrimsonFungus::TRANSPARENT,
			Block::Shroomlight(_) => Shroomlight::TRANSPARENT,
			Block::WeepingVines(_) => WeepingVines::TRANSPARENT,
			Block::WeepingVinesPlant(_) => WeepingVinesPlant::TRANSPARENT,
			Block::TwistingVines(_) => TwistingVines::TRANSPARENT,
			Block::TwistingVinesPlant(_) => TwistingVinesPlant::TRANSPARENT,
			Block::CrimsonRoots(_) => CrimsonRoots::TRANSPARENT,
			Block::CrimsonPlanks(_) => CrimsonPlanks::TRANSPARENT,
			Block::WarpedPlanks(_) => WarpedPlanks::TRANSPARENT,
			Block::CrimsonSlab(_) => CrimsonSlab::TRANSPARENT,
			Block::WarpedSlab(_) => WarpedSlab::TRANSPARENT,
			Block::CrimsonPressurePlate(_) => CrimsonPressurePlate::TRANSPARENT,
			Block::WarpedPressurePlate(_) => WarpedPressurePlate::TRANSPARENT,
			Block::CrimsonFence(_) => CrimsonFence::TRANSPARENT,
			Block::WarpedFence(_) => WarpedFence::TRANSPARENT,
			Block::CrimsonTrapdoor(_) => CrimsonTrapdoor::TRANSPARENT,
			Block::WarpedTrapdoor(_) => WarpedTrapdoor::TRANSPARENT,
			Block::CrimsonFenceGate(_) => CrimsonFenceGate::TRANSPARENT,
			Block::WarpedFenceGate(_) => WarpedFenceGate::TRANSPARENT,
			Block::CrimsonStairs(_) => CrimsonStairs::TRANSPARENT,
			Block::WarpedStairs(_) => WarpedStairs::TRANSPARENT,
			Block::CrimsonButton(_) => CrimsonButton::TRANSPARENT,
			Block::WarpedButton(_) => WarpedButton::TRANSPARENT,
			Block::CrimsonDoor(_) => CrimsonDoor::TRANSPARENT,
			Block::WarpedDoor(_) => WarpedDoor::TRANSPARENT,
			Block::CrimsonSign(_) => CrimsonSign::TRANSPARENT,
			Block::WarpedSign(_) => WarpedSign::TRANSPARENT,
			Block::CrimsonWallSign(_) => CrimsonWallSign::TRANSPARENT,
			Block::WarpedWallSign(_) => WarpedWallSign::TRANSPARENT,
			Block::StructureBlock(_) => StructureBlock::TRANSPARENT,
			Block::Jigsaw(_) => Jigsaw::TRANSPARENT,
			Block::Composter(_) => Composter::TRANSPARENT,
			Block::Target(_) => Target::TRANSPARENT,
			Block::BeeNest(_) => BeeNest::TRANSPARENT,
			Block::Beehive(_) => Beehive::TRANSPARENT,
			Block::HoneyBlock(_) => HoneyBlock::TRANSPARENT,
			Block::HoneycombBlock(_) => HoneycombBlock::TRANSPARENT,
			Block::NetheriteBlock(_) => NetheriteBlock::TRANSPARENT,
			Block::AncientDebris(_) => AncientDebris::TRANSPARENT,
			Block::CryingObsidian(_) => CryingObsidian::TRANSPARENT,
			Block::RespawnAnchor(_) => RespawnAnchor::TRANSPARENT,
			Block::PottedCrimsonFungus(_) => PottedCrimsonFungus::TRANSPARENT,
			Block::PottedWarpedFungus(_) => PottedWarpedFungus::TRANSPARENT,
			Block::PottedCrimsonRoots(_) => PottedCrimsonRoots::TRANSPARENT,
			Block::PottedWarpedRoots(_) => PottedWarpedRoots::TRANSPARENT,
			Block::Lodestone(_) => Lodestone::TRANSPARENT,
			Block::Blackstone(_) => Blackstone::TRANSPARENT,
			Block::BlackstoneStairs(_) => BlackstoneStairs::TRANSPARENT,
			Block::BlackstoneWall(_) => BlackstoneWall::TRANSPARENT,
			Block::BlackstoneSlab(_) => BlackstoneSlab::TRANSPARENT,
			Block::PolishedBlackstone(_) => PolishedBlackstone::TRANSPARENT,
			Block::PolishedBlackstoneBricks(_) => PolishedBlackstoneBricks::TRANSPARENT,
			Block::CrackedPolishedBlackstoneBricks(_) => CrackedPolishedBlackstoneBricks::TRANSPARENT,
			Block::ChiseledPolishedBlackstone(_) => ChiseledPolishedBlackstone::TRANSPARENT,
			Block::PolishedBlackstoneBrickSlab(_) => PolishedBlackstoneBrickSlab::TRANSPARENT,
			Block::PolishedBlackstoneBrickStairs(_) => PolishedBlackstoneBrickStairs::TRANSPARENT,
			Block::PolishedBlackstoneBrickWall(_) => PolishedBlackstoneBrickWall::TRANSPARENT,
			Block::GildedBlackstone(_) => GildedBlackstone::TRANSPARENT,
			Block::PolishedBlackstoneStairs(_) => PolishedBlackstoneStairs::TRANSPARENT,
			Block::PolishedBlackstoneSlab(_) => PolishedBlackstoneSlab::TRANSPARENT,
			Block::PolishedBlackstonePressurePlate(_) => PolishedBlackstonePressurePlate::TRANSPARENT,
			Block::PolishedBlackstoneButton(_) => PolishedBlackstoneButton::TRANSPARENT,
			Block::PolishedBlackstoneWall(_) => PolishedBlackstoneWall::TRANSPARENT,
			Block::ChiseledNetherBricks(_) => ChiseledNetherBricks::TRANSPARENT,
			Block::CrackedNetherBricks(_) => CrackedNetherBricks::TRANSPARENT,
			Block::QuartzBricks(_) => QuartzBricks::TRANSPARENT,
			Block::Candle(_) => Candle::TRANSPARENT,
			Block::WhiteCandle(_) => WhiteCandle::TRANSPARENT,
			Block::OrangeCandle(_) => OrangeCandle::TRANSPARENT,
			Block::MagentaCandle(_) => MagentaCandle::TRANSPARENT,
			Block::LightBlueCandle(_) => LightBlueCandle::TRANSPARENT,
			Block::YellowCandle(_) => YellowCandle::TRANSPARENT,
			Block::LimeCandle(_) => LimeCandle::TRANSPARENT,
			Block::PinkCandle(_) => PinkCandle::TRANSPARENT,
			Block::GrayCandle(_) => GrayCandle::TRANSPARENT,
			Block::LightGrayCandle(_) => LightGrayCandle::TRANSPARENT,
			Block::CyanCandle(_) => CyanCandle::TRANSPARENT,
			Block::PurpleCandle(_) => PurpleCandle::TRANSPARENT,
			Block::BlueCandle(_) => BlueCandle::TRANSPARENT,
			Block::BrownCandle(_) => BrownCandle::TRANSPARENT,
			Block::GreenCandle(_) => GreenCandle::TRANSPARENT,
			Block::RedCandle(_) => RedCandle::TRANSPARENT,
			Block::BlackCandle(_) => BlackCandle::TRANSPARENT,
			Block::CandleCake(_) => CandleCake::TRANSPARENT,
			Block::WhiteCandleCake(_) => WhiteCandleCake::TRANSPARENT,
			Block::OrangeCandleCake(_) => OrangeCandleCake::TRANSPARENT,
			Block::MagentaCandleCake(_) => MagentaCandleCake::TRANSPARENT,
			Block::LightBlueCandleCake(_) => LightBlueCandleCake::TRANSPARENT,
			Block::YellowCandleCake(_) => YellowCandleCake::TRANSPARENT,
			Block::LimeCandleCake(_) => LimeCandleCake::TRANSPARENT,
			Block::PinkCandleCake(_) => PinkCandleCake::TRANSPARENT,
			Block::GrayCandleCake(_) => GrayCandleCake::TRANSPARENT,
			Block::LightGrayCandleCake(_) => LightGrayCandleCake::TRANSPARENT,
			Block::CyanCandleCake(_) => CyanCandleCake::TRANSPARENT,
			Block::PurpleCandleCake(_) => PurpleCandleCake::TRANSPARENT,
			Block::BlueCandleCake(_) => BlueCandleCake::TRANSPARENT,
			Block::BrownCandleCake(_) => BrownCandleCake::TRANSPARENT,
			Block::GreenCandleCake(_) => GreenCandleCake::TRANSPARENT,
			Block::RedCandleCake(_) => RedCandleCake::TRANSPARENT,
			Block::BlackCandleCake(_) => BlackCandleCake::TRANSPARENT,
			Block::AmethystBlock(_) => AmethystBlock::TRANSPARENT,
			Block::BuddingAmethyst(_) => BuddingAmethyst::TRANSPARENT,
			Block::AmethystCluster(_) => AmethystCluster::TRANSPARENT,
			Block::LargeAmethystBud(_) => LargeAmethystBud::TRANSPARENT,
			Block::MediumAmethystBud(_) => MediumAmethystBud::TRANSPARENT,
			Block::SmallAmethystBud(_) => SmallAmethystBud::TRANSPARENT,
			Block::Tuff(_) => Tuff::TRANSPARENT,
			Block::Calcite(_) => Calcite::TRANSPARENT,
			Block::TintedGlass(_) => TintedGlass::TRANSPARENT,
			Block::PowderSnow(_) => PowderSnow::TRANSPARENT,
			Block::SculkSensor(_) => SculkSensor::TRANSPARENT,
			Block::Sculk(_) => Sculk::TRANSPARENT,
			Block::SculkVein(_) => SculkVein::TRANSPARENT,
			Block::SculkCatalyst(_) => SculkCatalyst::TRANSPARENT,
			Block::SculkShrieker(_) => SculkShrieker::TRANSPARENT,
			Block::OxidizedCopper(_) => OxidizedCopper::TRANSPARENT,
			Block::WeatheredCopper(_) => WeatheredCopper::TRANSPARENT,
			Block::ExposedCopper(_) => ExposedCopper::TRANSPARENT,
			Block::CopperBlock(_) => CopperBlock::TRANSPARENT,
			Block::CopperOre(_) => CopperOre::TRANSPARENT,
			Block::DeepslateCopperOre(_) => DeepslateCopperOre::TRANSPARENT,
			Block::OxidizedCutCopper(_) => OxidizedCutCopper::TRANSPARENT,
			Block::WeatheredCutCopper(_) => WeatheredCutCopper::TRANSPARENT,
			Block::ExposedCutCopper(_) => ExposedCutCopper::TRANSPARENT,
			Block::CutCopper(_) => CutCopper::TRANSPARENT,
			Block::OxidizedCutCopperStairs(_) => OxidizedCutCopperStairs::TRANSPARENT,
			Block::WeatheredCutCopperStairs(_) => WeatheredCutCopperStairs::TRANSPARENT,
			Block::ExposedCutCopperStairs(_) => ExposedCutCopperStairs::TRANSPARENT,
			Block::CutCopperStairs(_) => CutCopperStairs::TRANSPARENT,
			Block::OxidizedCutCopperSlab(_) => OxidizedCutCopperSlab::TRANSPARENT,
			Block::WeatheredCutCopperSlab(_) => WeatheredCutCopperSlab::TRANSPARENT,
			Block::ExposedCutCopperSlab(_) => ExposedCutCopperSlab::TRANSPARENT,
			Block::CutCopperSlab(_) => CutCopperSlab::TRANSPARENT,
			Block::WaxedCopperBlock(_) => WaxedCopperBlock::TRANSPARENT,
			Block::WaxedWeatheredCopper(_) => WaxedWeatheredCopper::TRANSPARENT,
			Block::WaxedExposedCopper(_) => WaxedExposedCopper::TRANSPARENT,
			Block::WaxedOxidizedCopper(_) => WaxedOxidizedCopper::TRANSPARENT,
			Block::WaxedOxidizedCutCopper(_) => WaxedOxidizedCutCopper::TRANSPARENT,
			Block::WaxedWeatheredCutCopper(_) => WaxedWeatheredCutCopper::TRANSPARENT,
			Block::WaxedExposedCutCopper(_) => WaxedExposedCutCopper::TRANSPARENT,
			Block::WaxedCutCopper(_) => WaxedCutCopper::TRANSPARENT,
			Block::WaxedOxidizedCutCopperStairs(_) => WaxedOxidizedCutCopperStairs::TRANSPARENT,
			Block::WaxedWeatheredCutCopperStairs(_) => WaxedWeatheredCutCopperStairs::TRANSPARENT,
			Block::WaxedExposedCutCopperStairs(_) => WaxedExposedCutCopperStairs::TRANSPARENT,
			Block::WaxedCutCopperStairs(_) => WaxedCutCopperStairs::TRANSPARENT,
			Block::WaxedOxidizedCutCopperSlab(_) => WaxedOxidizedCutCopperSlab::TRANSPARENT,
			Block::WaxedWeatheredCutCopperSlab(_) => WaxedWeatheredCutCopperSlab::TRANSPARENT,
			Block::WaxedExposedCutCopperSlab(_) => WaxedExposedCutCopperSlab::TRANSPARENT,
			Block::WaxedCutCopperSlab(_) => WaxedCutCopperSlab::TRANSPARENT,
			Block::LightningRod(_) => LightningRod::TRANSPARENT,
			Block::PointedDripstone(_) => PointedDripstone::TRANSPARENT,
			Block::DripstoneBlock(_) => DripstoneBlock::TRANSPARENT,
			Block::CaveVines(_) => CaveVines::TRANSPARENT,
			Block::CaveVinesPlant(_) => CaveVinesPlant::TRANSPARENT,
			Block::SporeBlossom(_) => SporeBlossom::TRANSPARENT,
			Block::Azalea(_) => Azalea::TRANSPARENT,
			Block::FloweringAzalea(_) => FloweringAzalea::TRANSPARENT,
			Block::MossCarpet(_) => MossCarpet::TRANSPARENT,
			Block::MossBlock(_) => MossBlock::TRANSPARENT,
			Block::BigDripleaf(_) => BigDripleaf::TRANSPARENT,
			Block::BigDripleafStem(_) => BigDripleafStem::TRANSPARENT,
			Block::SmallDripleaf(_) => SmallDripleaf::TRANSPARENT,
			Block::HangingRoots(_) => HangingRoots::TRANSPARENT,
			Block::RootedDirt(_) => RootedDirt::TRANSPARENT,
			Block::Mud(_) => Mud::TRANSPARENT,
			Block::Deepslate(_) => Deepslate::TRANSPARENT,
			Block::CobbledDeepslate(_) => CobbledDeepslate::TRANSPARENT,
			Block::CobbledDeepslateStairs(_) => CobbledDeepslateStairs::TRANSPARENT,
			Block::CobbledDeepslateSlab(_) => CobbledDeepslateSlab::TRANSPARENT,
			Block::CobbledDeepslateWall(_) => CobbledDeepslateWall::TRANSPARENT,
			Block::PolishedDeepslate(_) => PolishedDeepslate::TRANSPARENT,
			Block::PolishedDeepslateStairs(_) => PolishedDeepslateStairs::TRANSPARENT,
			Block::PolishedDeepslateSlab(_) => PolishedDeepslateSlab::TRANSPARENT,
			Block::PolishedDeepslateWall(_) => PolishedDeepslateWall::TRANSPARENT,
			Block::DeepslateTiles(_) => DeepslateTiles::TRANSPARENT,
			Block::DeepslateTileStairs(_) => DeepslateTileStairs::TRANSPARENT,
			Block::DeepslateTileSlab(_) => DeepslateTileSlab::TRANSPARENT,
			Block::DeepslateTileWall(_) => DeepslateTileWall::TRANSPARENT,
			Block::DeepslateBricks(_) => DeepslateBricks::TRANSPARENT,
			Block::DeepslateBrickStairs(_) => DeepslateBrickStairs::TRANSPARENT,
			Block::DeepslateBrickSlab(_) => DeepslateBrickSlab::TRANSPARENT,
			Block::DeepslateBrickWall(_) => DeepslateBrickWall::TRANSPARENT,
			Block::ChiseledDeepslate(_) => ChiseledDeepslate::TRANSPARENT,
			Block::CrackedDeepslateBricks(_) => CrackedDeepslateBricks::TRANSPARENT,
			Block::CrackedDeepslateTiles(_) => CrackedDeepslateTiles::TRANSPARENT,
			Block::InfestedDeepslate(_) => InfestedDeepslate::TRANSPARENT,
			Block::SmoothBasalt(_) => SmoothBasalt::TRANSPARENT,
			Block::RawIronBlock(_) => RawIronBlock::TRANSPARENT,
			Block::RawCopperBlock(_) => RawCopperBlock::TRANSPARENT,
			Block::RawGoldBlock(_) => RawGoldBlock::TRANSPARENT,
			Block::PottedAzaleaBush(_) => PottedAzaleaBush::TRANSPARENT,
			Block::PottedFloweringAzaleaBush(_) => PottedFloweringAzaleaBush::TRANSPARENT,
			Block::OchreFroglight(_) => OchreFroglight::TRANSPARENT,
			Block::VerdantFroglight(_) => VerdantFroglight::TRANSPARENT,
			Block::PearlescentFroglight(_) => PearlescentFroglight::TRANSPARENT,
			Block::Frogspawn(_) => Frogspawn::TRANSPARENT,
			Block::ReinforcedDeepslate(_) => ReinforcedDeepslate::TRANSPARENT,
		}
	}
	pub fn get_emit_light(&self) -> u8 {
		match self {
			Block::Air(_) => Air::EMIT_LIGHT,
			Block::Stone(_) => Stone::EMIT_LIGHT,
			Block::Granite(_) => Granite::EMIT_LIGHT,
			Block::PolishedGranite(_) => PolishedGranite::EMIT_LIGHT,
			Block::Diorite(_) => Diorite::EMIT_LIGHT,
			Block::PolishedDiorite(_) => PolishedDiorite::EMIT_LIGHT,
			Block::Andesite(_) => Andesite::EMIT_LIGHT,
			Block::PolishedAndesite(_) => PolishedAndesite::EMIT_LIGHT,
			Block::GrassBlock(_) => GrassBlock::EMIT_LIGHT,
			Block::Dirt(_) => Dirt::EMIT_LIGHT,
			Block::CoarseDirt(_) => CoarseDirt::EMIT_LIGHT,
			Block::Podzol(_) => Podzol::EMIT_LIGHT,
			Block::Cobblestone(_) => Cobblestone::EMIT_LIGHT,
			Block::OakPlanks(_) => OakPlanks::EMIT_LIGHT,
			Block::SprucePlanks(_) => SprucePlanks::EMIT_LIGHT,
			Block::BirchPlanks(_) => BirchPlanks::EMIT_LIGHT,
			Block::JunglePlanks(_) => JunglePlanks::EMIT_LIGHT,
			Block::AcaciaPlanks(_) => AcaciaPlanks::EMIT_LIGHT,
			Block::DarkOakPlanks(_) => DarkOakPlanks::EMIT_LIGHT,
			Block::MangrovePlanks(_) => MangrovePlanks::EMIT_LIGHT,
			Block::OakSapling(_) => OakSapling::EMIT_LIGHT,
			Block::SpruceSapling(_) => SpruceSapling::EMIT_LIGHT,
			Block::BirchSapling(_) => BirchSapling::EMIT_LIGHT,
			Block::JungleSapling(_) => JungleSapling::EMIT_LIGHT,
			Block::AcaciaSapling(_) => AcaciaSapling::EMIT_LIGHT,
			Block::DarkOakSapling(_) => DarkOakSapling::EMIT_LIGHT,
			Block::MangrovePropagule(_) => MangrovePropagule::EMIT_LIGHT,
			Block::Bedrock(_) => Bedrock::EMIT_LIGHT,
			Block::Water(_) => Water::EMIT_LIGHT,
			Block::Lava(_) => Lava::EMIT_LIGHT,
			Block::Sand(_) => Sand::EMIT_LIGHT,
			Block::RedSand(_) => RedSand::EMIT_LIGHT,
			Block::Gravel(_) => Gravel::EMIT_LIGHT,
			Block::GoldOre(_) => GoldOre::EMIT_LIGHT,
			Block::DeepslateGoldOre(_) => DeepslateGoldOre::EMIT_LIGHT,
			Block::IronOre(_) => IronOre::EMIT_LIGHT,
			Block::DeepslateIronOre(_) => DeepslateIronOre::EMIT_LIGHT,
			Block::CoalOre(_) => CoalOre::EMIT_LIGHT,
			Block::DeepslateCoalOre(_) => DeepslateCoalOre::EMIT_LIGHT,
			Block::NetherGoldOre(_) => NetherGoldOre::EMIT_LIGHT,
			Block::OakLog(_) => OakLog::EMIT_LIGHT,
			Block::SpruceLog(_) => SpruceLog::EMIT_LIGHT,
			Block::BirchLog(_) => BirchLog::EMIT_LIGHT,
			Block::JungleLog(_) => JungleLog::EMIT_LIGHT,
			Block::AcaciaLog(_) => AcaciaLog::EMIT_LIGHT,
			Block::DarkOakLog(_) => DarkOakLog::EMIT_LIGHT,
			Block::MangroveLog(_) => MangroveLog::EMIT_LIGHT,
			Block::MangroveRoots(_) => MangroveRoots::EMIT_LIGHT,
			Block::MuddyMangroveRoots(_) => MuddyMangroveRoots::EMIT_LIGHT,
			Block::StrippedSpruceLog(_) => StrippedSpruceLog::EMIT_LIGHT,
			Block::StrippedBirchLog(_) => StrippedBirchLog::EMIT_LIGHT,
			Block::StrippedJungleLog(_) => StrippedJungleLog::EMIT_LIGHT,
			Block::StrippedAcaciaLog(_) => StrippedAcaciaLog::EMIT_LIGHT,
			Block::StrippedDarkOakLog(_) => StrippedDarkOakLog::EMIT_LIGHT,
			Block::StrippedOakLog(_) => StrippedOakLog::EMIT_LIGHT,
			Block::StrippedMangroveLog(_) => StrippedMangroveLog::EMIT_LIGHT,
			Block::OakWood(_) => OakWood::EMIT_LIGHT,
			Block::SpruceWood(_) => SpruceWood::EMIT_LIGHT,
			Block::BirchWood(_) => BirchWood::EMIT_LIGHT,
			Block::JungleWood(_) => JungleWood::EMIT_LIGHT,
			Block::AcaciaWood(_) => AcaciaWood::EMIT_LIGHT,
			Block::DarkOakWood(_) => DarkOakWood::EMIT_LIGHT,
			Block::MangroveWood(_) => MangroveWood::EMIT_LIGHT,
			Block::StrippedOakWood(_) => StrippedOakWood::EMIT_LIGHT,
			Block::StrippedSpruceWood(_) => StrippedSpruceWood::EMIT_LIGHT,
			Block::StrippedBirchWood(_) => StrippedBirchWood::EMIT_LIGHT,
			Block::StrippedJungleWood(_) => StrippedJungleWood::EMIT_LIGHT,
			Block::StrippedAcaciaWood(_) => StrippedAcaciaWood::EMIT_LIGHT,
			Block::StrippedDarkOakWood(_) => StrippedDarkOakWood::EMIT_LIGHT,
			Block::StrippedMangroveWood(_) => StrippedMangroveWood::EMIT_LIGHT,
			Block::OakLeaves(_) => OakLeaves::EMIT_LIGHT,
			Block::SpruceLeaves(_) => SpruceLeaves::EMIT_LIGHT,
			Block::BirchLeaves(_) => BirchLeaves::EMIT_LIGHT,
			Block::JungleLeaves(_) => JungleLeaves::EMIT_LIGHT,
			Block::AcaciaLeaves(_) => AcaciaLeaves::EMIT_LIGHT,
			Block::DarkOakLeaves(_) => DarkOakLeaves::EMIT_LIGHT,
			Block::MangroveLeaves(_) => MangroveLeaves::EMIT_LIGHT,
			Block::AzaleaLeaves(_) => AzaleaLeaves::EMIT_LIGHT,
			Block::FloweringAzaleaLeaves(_) => FloweringAzaleaLeaves::EMIT_LIGHT,
			Block::Sponge(_) => Sponge::EMIT_LIGHT,
			Block::WetSponge(_) => WetSponge::EMIT_LIGHT,
			Block::Glass(_) => Glass::EMIT_LIGHT,
			Block::LapisOre(_) => LapisOre::EMIT_LIGHT,
			Block::DeepslateLapisOre(_) => DeepslateLapisOre::EMIT_LIGHT,
			Block::LapisBlock(_) => LapisBlock::EMIT_LIGHT,
			Block::Dispenser(_) => Dispenser::EMIT_LIGHT,
			Block::Sandstone(_) => Sandstone::EMIT_LIGHT,
			Block::ChiseledSandstone(_) => ChiseledSandstone::EMIT_LIGHT,
			Block::CutSandstone(_) => CutSandstone::EMIT_LIGHT,
			Block::NoteBlock(_) => NoteBlock::EMIT_LIGHT,
			Block::WhiteBed(_) => WhiteBed::EMIT_LIGHT,
			Block::OrangeBed(_) => OrangeBed::EMIT_LIGHT,
			Block::MagentaBed(_) => MagentaBed::EMIT_LIGHT,
			Block::LightBlueBed(_) => LightBlueBed::EMIT_LIGHT,
			Block::YellowBed(_) => YellowBed::EMIT_LIGHT,
			Block::LimeBed(_) => LimeBed::EMIT_LIGHT,
			Block::PinkBed(_) => PinkBed::EMIT_LIGHT,
			Block::GrayBed(_) => GrayBed::EMIT_LIGHT,
			Block::LightGrayBed(_) => LightGrayBed::EMIT_LIGHT,
			Block::CyanBed(_) => CyanBed::EMIT_LIGHT,
			Block::PurpleBed(_) => PurpleBed::EMIT_LIGHT,
			Block::BlueBed(_) => BlueBed::EMIT_LIGHT,
			Block::BrownBed(_) => BrownBed::EMIT_LIGHT,
			Block::GreenBed(_) => GreenBed::EMIT_LIGHT,
			Block::RedBed(_) => RedBed::EMIT_LIGHT,
			Block::BlackBed(_) => BlackBed::EMIT_LIGHT,
			Block::PoweredRail(_) => PoweredRail::EMIT_LIGHT,
			Block::DetectorRail(_) => DetectorRail::EMIT_LIGHT,
			Block::StickyPiston(_) => StickyPiston::EMIT_LIGHT,
			Block::Cobweb(_) => Cobweb::EMIT_LIGHT,
			Block::Grass(_) => Grass::EMIT_LIGHT,
			Block::Fern(_) => Fern::EMIT_LIGHT,
			Block::DeadBush(_) => DeadBush::EMIT_LIGHT,
			Block::Seagrass(_) => Seagrass::EMIT_LIGHT,
			Block::TallSeagrass(_) => TallSeagrass::EMIT_LIGHT,
			Block::Piston(_) => Piston::EMIT_LIGHT,
			Block::PistonHead(_) => PistonHead::EMIT_LIGHT,
			Block::WhiteWool(_) => WhiteWool::EMIT_LIGHT,
			Block::OrangeWool(_) => OrangeWool::EMIT_LIGHT,
			Block::MagentaWool(_) => MagentaWool::EMIT_LIGHT,
			Block::LightBlueWool(_) => LightBlueWool::EMIT_LIGHT,
			Block::YellowWool(_) => YellowWool::EMIT_LIGHT,
			Block::LimeWool(_) => LimeWool::EMIT_LIGHT,
			Block::PinkWool(_) => PinkWool::EMIT_LIGHT,
			Block::GrayWool(_) => GrayWool::EMIT_LIGHT,
			Block::LightGrayWool(_) => LightGrayWool::EMIT_LIGHT,
			Block::CyanWool(_) => CyanWool::EMIT_LIGHT,
			Block::PurpleWool(_) => PurpleWool::EMIT_LIGHT,
			Block::BlueWool(_) => BlueWool::EMIT_LIGHT,
			Block::BrownWool(_) => BrownWool::EMIT_LIGHT,
			Block::GreenWool(_) => GreenWool::EMIT_LIGHT,
			Block::RedWool(_) => RedWool::EMIT_LIGHT,
			Block::BlackWool(_) => BlackWool::EMIT_LIGHT,
			Block::MovingPiston(_) => MovingPiston::EMIT_LIGHT,
			Block::Dandelion(_) => Dandelion::EMIT_LIGHT,
			Block::Poppy(_) => Poppy::EMIT_LIGHT,
			Block::BlueOrchid(_) => BlueOrchid::EMIT_LIGHT,
			Block::Allium(_) => Allium::EMIT_LIGHT,
			Block::AzureBluet(_) => AzureBluet::EMIT_LIGHT,
			Block::RedTulip(_) => RedTulip::EMIT_LIGHT,
			Block::OrangeTulip(_) => OrangeTulip::EMIT_LIGHT,
			Block::WhiteTulip(_) => WhiteTulip::EMIT_LIGHT,
			Block::PinkTulip(_) => PinkTulip::EMIT_LIGHT,
			Block::OxeyeDaisy(_) => OxeyeDaisy::EMIT_LIGHT,
			Block::Cornflower(_) => Cornflower::EMIT_LIGHT,
			Block::WitherRose(_) => WitherRose::EMIT_LIGHT,
			Block::LilyOfTheValley(_) => LilyOfTheValley::EMIT_LIGHT,
			Block::BrownMushroom(_) => BrownMushroom::EMIT_LIGHT,
			Block::RedMushroom(_) => RedMushroom::EMIT_LIGHT,
			Block::GoldBlock(_) => GoldBlock::EMIT_LIGHT,
			Block::IronBlock(_) => IronBlock::EMIT_LIGHT,
			Block::Bricks(_) => Bricks::EMIT_LIGHT,
			Block::Tnt(_) => Tnt::EMIT_LIGHT,
			Block::Bookshelf(_) => Bookshelf::EMIT_LIGHT,
			Block::MossyCobblestone(_) => MossyCobblestone::EMIT_LIGHT,
			Block::Obsidian(_) => Obsidian::EMIT_LIGHT,
			Block::Torch(_) => Torch::EMIT_LIGHT,
			Block::WallTorch(_) => WallTorch::EMIT_LIGHT,
			Block::Fire(_) => Fire::EMIT_LIGHT,
			Block::SoulFire(_) => SoulFire::EMIT_LIGHT,
			Block::Spawner(_) => Spawner::EMIT_LIGHT,
			Block::OakStairs(_) => OakStairs::EMIT_LIGHT,
			Block::Chest(_) => Chest::EMIT_LIGHT,
			Block::RedstoneWire(_) => RedstoneWire::EMIT_LIGHT,
			Block::DiamondOre(_) => DiamondOre::EMIT_LIGHT,
			Block::DeepslateDiamondOre(_) => DeepslateDiamondOre::EMIT_LIGHT,
			Block::DiamondBlock(_) => DiamondBlock::EMIT_LIGHT,
			Block::CraftingTable(_) => CraftingTable::EMIT_LIGHT,
			Block::Wheat(_) => Wheat::EMIT_LIGHT,
			Block::Farmland(_) => Farmland::EMIT_LIGHT,
			Block::Furnace(_) => Furnace::EMIT_LIGHT,
			Block::OakSign(_) => OakSign::EMIT_LIGHT,
			Block::SpruceSign(_) => SpruceSign::EMIT_LIGHT,
			Block::BirchSign(_) => BirchSign::EMIT_LIGHT,
			Block::AcaciaSign(_) => AcaciaSign::EMIT_LIGHT,
			Block::JungleSign(_) => JungleSign::EMIT_LIGHT,
			Block::DarkOakSign(_) => DarkOakSign::EMIT_LIGHT,
			Block::MangroveSign(_) => MangroveSign::EMIT_LIGHT,
			Block::OakDoor(_) => OakDoor::EMIT_LIGHT,
			Block::Ladder(_) => Ladder::EMIT_LIGHT,
			Block::Rail(_) => Rail::EMIT_LIGHT,
			Block::CobblestoneStairs(_) => CobblestoneStairs::EMIT_LIGHT,
			Block::OakWallSign(_) => OakWallSign::EMIT_LIGHT,
			Block::SpruceWallSign(_) => SpruceWallSign::EMIT_LIGHT,
			Block::BirchWallSign(_) => BirchWallSign::EMIT_LIGHT,
			Block::AcaciaWallSign(_) => AcaciaWallSign::EMIT_LIGHT,
			Block::JungleWallSign(_) => JungleWallSign::EMIT_LIGHT,
			Block::DarkOakWallSign(_) => DarkOakWallSign::EMIT_LIGHT,
			Block::MangroveWallSign(_) => MangroveWallSign::EMIT_LIGHT,
			Block::Lever(_) => Lever::EMIT_LIGHT,
			Block::StonePressurePlate(_) => StonePressurePlate::EMIT_LIGHT,
			Block::IronDoor(_) => IronDoor::EMIT_LIGHT,
			Block::OakPressurePlate(_) => OakPressurePlate::EMIT_LIGHT,
			Block::SprucePressurePlate(_) => SprucePressurePlate::EMIT_LIGHT,
			Block::BirchPressurePlate(_) => BirchPressurePlate::EMIT_LIGHT,
			Block::JunglePressurePlate(_) => JunglePressurePlate::EMIT_LIGHT,
			Block::AcaciaPressurePlate(_) => AcaciaPressurePlate::EMIT_LIGHT,
			Block::DarkOakPressurePlate(_) => DarkOakPressurePlate::EMIT_LIGHT,
			Block::MangrovePressurePlate(_) => MangrovePressurePlate::EMIT_LIGHT,
			Block::RedstoneOre(_) => RedstoneOre::EMIT_LIGHT,
			Block::DeepslateRedstoneOre(_) => DeepslateRedstoneOre::EMIT_LIGHT,
			Block::RedstoneTorch(_) => RedstoneTorch::EMIT_LIGHT,
			Block::RedstoneWallTorch(_) => RedstoneWallTorch::EMIT_LIGHT,
			Block::StoneButton(_) => StoneButton::EMIT_LIGHT,
			Block::Snow(_) => Snow::EMIT_LIGHT,
			Block::Ice(_) => Ice::EMIT_LIGHT,
			Block::SnowBlock(_) => SnowBlock::EMIT_LIGHT,
			Block::Cactus(_) => Cactus::EMIT_LIGHT,
			Block::Clay(_) => Clay::EMIT_LIGHT,
			Block::SugarCane(_) => SugarCane::EMIT_LIGHT,
			Block::Jukebox(_) => Jukebox::EMIT_LIGHT,
			Block::OakFence(_) => OakFence::EMIT_LIGHT,
			Block::Pumpkin(_) => Pumpkin::EMIT_LIGHT,
			Block::Netherrack(_) => Netherrack::EMIT_LIGHT,
			Block::SoulSand(_) => SoulSand::EMIT_LIGHT,
			Block::SoulSoil(_) => SoulSoil::EMIT_LIGHT,
			Block::Basalt(_) => Basalt::EMIT_LIGHT,
			Block::PolishedBasalt(_) => PolishedBasalt::EMIT_LIGHT,
			Block::SoulTorch(_) => SoulTorch::EMIT_LIGHT,
			Block::SoulWallTorch(_) => SoulWallTorch::EMIT_LIGHT,
			Block::Glowstone(_) => Glowstone::EMIT_LIGHT,
			Block::NetherPortal(_) => NetherPortal::EMIT_LIGHT,
			Block::CarvedPumpkin(_) => CarvedPumpkin::EMIT_LIGHT,
			Block::JackOLantern(_) => JackOLantern::EMIT_LIGHT,
			Block::Cake(_) => Cake::EMIT_LIGHT,
			Block::Repeater(_) => Repeater::EMIT_LIGHT,
			Block::WhiteStainedGlass(_) => WhiteStainedGlass::EMIT_LIGHT,
			Block::OrangeStainedGlass(_) => OrangeStainedGlass::EMIT_LIGHT,
			Block::MagentaStainedGlass(_) => MagentaStainedGlass::EMIT_LIGHT,
			Block::LightBlueStainedGlass(_) => LightBlueStainedGlass::EMIT_LIGHT,
			Block::YellowStainedGlass(_) => YellowStainedGlass::EMIT_LIGHT,
			Block::LimeStainedGlass(_) => LimeStainedGlass::EMIT_LIGHT,
			Block::PinkStainedGlass(_) => PinkStainedGlass::EMIT_LIGHT,
			Block::GrayStainedGlass(_) => GrayStainedGlass::EMIT_LIGHT,
			Block::LightGrayStainedGlass(_) => LightGrayStainedGlass::EMIT_LIGHT,
			Block::CyanStainedGlass(_) => CyanStainedGlass::EMIT_LIGHT,
			Block::PurpleStainedGlass(_) => PurpleStainedGlass::EMIT_LIGHT,
			Block::BlueStainedGlass(_) => BlueStainedGlass::EMIT_LIGHT,
			Block::BrownStainedGlass(_) => BrownStainedGlass::EMIT_LIGHT,
			Block::GreenStainedGlass(_) => GreenStainedGlass::EMIT_LIGHT,
			Block::RedStainedGlass(_) => RedStainedGlass::EMIT_LIGHT,
			Block::BlackStainedGlass(_) => BlackStainedGlass::EMIT_LIGHT,
			Block::OakTrapdoor(_) => OakTrapdoor::EMIT_LIGHT,
			Block::SpruceTrapdoor(_) => SpruceTrapdoor::EMIT_LIGHT,
			Block::BirchTrapdoor(_) => BirchTrapdoor::EMIT_LIGHT,
			Block::JungleTrapdoor(_) => JungleTrapdoor::EMIT_LIGHT,
			Block::AcaciaTrapdoor(_) => AcaciaTrapdoor::EMIT_LIGHT,
			Block::DarkOakTrapdoor(_) => DarkOakTrapdoor::EMIT_LIGHT,
			Block::MangroveTrapdoor(_) => MangroveTrapdoor::EMIT_LIGHT,
			Block::StoneBricks(_) => StoneBricks::EMIT_LIGHT,
			Block::MossyStoneBricks(_) => MossyStoneBricks::EMIT_LIGHT,
			Block::CrackedStoneBricks(_) => CrackedStoneBricks::EMIT_LIGHT,
			Block::ChiseledStoneBricks(_) => ChiseledStoneBricks::EMIT_LIGHT,
			Block::PackedMud(_) => PackedMud::EMIT_LIGHT,
			Block::MudBricks(_) => MudBricks::EMIT_LIGHT,
			Block::InfestedStone(_) => InfestedStone::EMIT_LIGHT,
			Block::InfestedCobblestone(_) => InfestedCobblestone::EMIT_LIGHT,
			Block::InfestedStoneBricks(_) => InfestedStoneBricks::EMIT_LIGHT,
			Block::InfestedMossyStoneBricks(_) => InfestedMossyStoneBricks::EMIT_LIGHT,
			Block::InfestedCrackedStoneBricks(_) => InfestedCrackedStoneBricks::EMIT_LIGHT,
			Block::InfestedChiseledStoneBricks(_) => InfestedChiseledStoneBricks::EMIT_LIGHT,
			Block::BrownMushroomBlock(_) => BrownMushroomBlock::EMIT_LIGHT,
			Block::RedMushroomBlock(_) => RedMushroomBlock::EMIT_LIGHT,
			Block::MushroomStem(_) => MushroomStem::EMIT_LIGHT,
			Block::IronBars(_) => IronBars::EMIT_LIGHT,
			Block::Chain(_) => Chain::EMIT_LIGHT,
			Block::GlassPane(_) => GlassPane::EMIT_LIGHT,
			Block::Melon(_) => Melon::EMIT_LIGHT,
			Block::AttachedPumpkinStem(_) => AttachedPumpkinStem::EMIT_LIGHT,
			Block::AttachedMelonStem(_) => AttachedMelonStem::EMIT_LIGHT,
			Block::PumpkinStem(_) => PumpkinStem::EMIT_LIGHT,
			Block::MelonStem(_) => MelonStem::EMIT_LIGHT,
			Block::Vine(_) => Vine::EMIT_LIGHT,
			Block::GlowLichen(_) => GlowLichen::EMIT_LIGHT,
			Block::OakFenceGate(_) => OakFenceGate::EMIT_LIGHT,
			Block::BrickStairs(_) => BrickStairs::EMIT_LIGHT,
			Block::StoneBrickStairs(_) => StoneBrickStairs::EMIT_LIGHT,
			Block::MudBrickStairs(_) => MudBrickStairs::EMIT_LIGHT,
			Block::Mycelium(_) => Mycelium::EMIT_LIGHT,
			Block::LilyPad(_) => LilyPad::EMIT_LIGHT,
			Block::NetherBricks(_) => NetherBricks::EMIT_LIGHT,
			Block::NetherBrickFence(_) => NetherBrickFence::EMIT_LIGHT,
			Block::NetherBrickStairs(_) => NetherBrickStairs::EMIT_LIGHT,
			Block::NetherWart(_) => NetherWart::EMIT_LIGHT,
			Block::EnchantingTable(_) => EnchantingTable::EMIT_LIGHT,
			Block::BrewingStand(_) => BrewingStand::EMIT_LIGHT,
			Block::Cauldron(_) => Cauldron::EMIT_LIGHT,
			Block::WaterCauldron(_) => WaterCauldron::EMIT_LIGHT,
			Block::LavaCauldron(_) => LavaCauldron::EMIT_LIGHT,
			Block::PowderSnowCauldron(_) => PowderSnowCauldron::EMIT_LIGHT,
			Block::EndPortal(_) => EndPortal::EMIT_LIGHT,
			Block::EndPortalFrame(_) => EndPortalFrame::EMIT_LIGHT,
			Block::EndStone(_) => EndStone::EMIT_LIGHT,
			Block::DragonEgg(_) => DragonEgg::EMIT_LIGHT,
			Block::RedstoneLamp(_) => RedstoneLamp::EMIT_LIGHT,
			Block::Cocoa(_) => Cocoa::EMIT_LIGHT,
			Block::SandstoneStairs(_) => SandstoneStairs::EMIT_LIGHT,
			Block::EmeraldOre(_) => EmeraldOre::EMIT_LIGHT,
			Block::DeepslateEmeraldOre(_) => DeepslateEmeraldOre::EMIT_LIGHT,
			Block::EnderChest(_) => EnderChest::EMIT_LIGHT,
			Block::TripwireHook(_) => TripwireHook::EMIT_LIGHT,
			Block::Tripwire(_) => Tripwire::EMIT_LIGHT,
			Block::EmeraldBlock(_) => EmeraldBlock::EMIT_LIGHT,
			Block::SpruceStairs(_) => SpruceStairs::EMIT_LIGHT,
			Block::BirchStairs(_) => BirchStairs::EMIT_LIGHT,
			Block::JungleStairs(_) => JungleStairs::EMIT_LIGHT,
			Block::CommandBlock(_) => CommandBlock::EMIT_LIGHT,
			Block::Beacon(_) => Beacon::EMIT_LIGHT,
			Block::CobblestoneWall(_) => CobblestoneWall::EMIT_LIGHT,
			Block::MossyCobblestoneWall(_) => MossyCobblestoneWall::EMIT_LIGHT,
			Block::FlowerPot(_) => FlowerPot::EMIT_LIGHT,
			Block::PottedOakSapling(_) => PottedOakSapling::EMIT_LIGHT,
			Block::PottedSpruceSapling(_) => PottedSpruceSapling::EMIT_LIGHT,
			Block::PottedBirchSapling(_) => PottedBirchSapling::EMIT_LIGHT,
			Block::PottedJungleSapling(_) => PottedJungleSapling::EMIT_LIGHT,
			Block::PottedAcaciaSapling(_) => PottedAcaciaSapling::EMIT_LIGHT,
			Block::PottedDarkOakSapling(_) => PottedDarkOakSapling::EMIT_LIGHT,
			Block::PottedMangrovePropagule(_) => PottedMangrovePropagule::EMIT_LIGHT,
			Block::PottedFern(_) => PottedFern::EMIT_LIGHT,
			Block::PottedDandelion(_) => PottedDandelion::EMIT_LIGHT,
			Block::PottedPoppy(_) => PottedPoppy::EMIT_LIGHT,
			Block::PottedBlueOrchid(_) => PottedBlueOrchid::EMIT_LIGHT,
			Block::PottedAllium(_) => PottedAllium::EMIT_LIGHT,
			Block::PottedAzureBluet(_) => PottedAzureBluet::EMIT_LIGHT,
			Block::PottedRedTulip(_) => PottedRedTulip::EMIT_LIGHT,
			Block::PottedOrangeTulip(_) => PottedOrangeTulip::EMIT_LIGHT,
			Block::PottedWhiteTulip(_) => PottedWhiteTulip::EMIT_LIGHT,
			Block::PottedPinkTulip(_) => PottedPinkTulip::EMIT_LIGHT,
			Block::PottedOxeyeDaisy(_) => PottedOxeyeDaisy::EMIT_LIGHT,
			Block::PottedCornflower(_) => PottedCornflower::EMIT_LIGHT,
			Block::PottedLilyOfTheValley(_) => PottedLilyOfTheValley::EMIT_LIGHT,
			Block::PottedWitherRose(_) => PottedWitherRose::EMIT_LIGHT,
			Block::PottedRedMushroom(_) => PottedRedMushroom::EMIT_LIGHT,
			Block::PottedBrownMushroom(_) => PottedBrownMushroom::EMIT_LIGHT,
			Block::PottedDeadBush(_) => PottedDeadBush::EMIT_LIGHT,
			Block::PottedCactus(_) => PottedCactus::EMIT_LIGHT,
			Block::Carrots(_) => Carrots::EMIT_LIGHT,
			Block::Potatoes(_) => Potatoes::EMIT_LIGHT,
			Block::OakButton(_) => OakButton::EMIT_LIGHT,
			Block::SpruceButton(_) => SpruceButton::EMIT_LIGHT,
			Block::BirchButton(_) => BirchButton::EMIT_LIGHT,
			Block::JungleButton(_) => JungleButton::EMIT_LIGHT,
			Block::AcaciaButton(_) => AcaciaButton::EMIT_LIGHT,
			Block::DarkOakButton(_) => DarkOakButton::EMIT_LIGHT,
			Block::MangroveButton(_) => MangroveButton::EMIT_LIGHT,
			Block::SkeletonSkull(_) => SkeletonSkull::EMIT_LIGHT,
			Block::SkeletonWallSkull(_) => SkeletonWallSkull::EMIT_LIGHT,
			Block::WitherSkeletonSkull(_) => WitherSkeletonSkull::EMIT_LIGHT,
			Block::WitherSkeletonWallSkull(_) => WitherSkeletonWallSkull::EMIT_LIGHT,
			Block::ZombieHead(_) => ZombieHead::EMIT_LIGHT,
			Block::ZombieWallHead(_) => ZombieWallHead::EMIT_LIGHT,
			Block::PlayerHead(_) => PlayerHead::EMIT_LIGHT,
			Block::PlayerWallHead(_) => PlayerWallHead::EMIT_LIGHT,
			Block::CreeperHead(_) => CreeperHead::EMIT_LIGHT,
			Block::CreeperWallHead(_) => CreeperWallHead::EMIT_LIGHT,
			Block::DragonHead(_) => DragonHead::EMIT_LIGHT,
			Block::DragonWallHead(_) => DragonWallHead::EMIT_LIGHT,
			Block::Anvil(_) => Anvil::EMIT_LIGHT,
			Block::ChippedAnvil(_) => ChippedAnvil::EMIT_LIGHT,
			Block::DamagedAnvil(_) => DamagedAnvil::EMIT_LIGHT,
			Block::TrappedChest(_) => TrappedChest::EMIT_LIGHT,
			Block::LightWeightedPressurePlate(_) => LightWeightedPressurePlate::EMIT_LIGHT,
			Block::HeavyWeightedPressurePlate(_) => HeavyWeightedPressurePlate::EMIT_LIGHT,
			Block::Comparator(_) => Comparator::EMIT_LIGHT,
			Block::DaylightDetector(_) => DaylightDetector::EMIT_LIGHT,
			Block::RedstoneBlock(_) => RedstoneBlock::EMIT_LIGHT,
			Block::NetherQuartzOre(_) => NetherQuartzOre::EMIT_LIGHT,
			Block::Hopper(_) => Hopper::EMIT_LIGHT,
			Block::QuartzBlock(_) => QuartzBlock::EMIT_LIGHT,
			Block::ChiseledQuartzBlock(_) => ChiseledQuartzBlock::EMIT_LIGHT,
			Block::QuartzPillar(_) => QuartzPillar::EMIT_LIGHT,
			Block::QuartzStairs(_) => QuartzStairs::EMIT_LIGHT,
			Block::ActivatorRail(_) => ActivatorRail::EMIT_LIGHT,
			Block::Dropper(_) => Dropper::EMIT_LIGHT,
			Block::WhiteTerracotta(_) => WhiteTerracotta::EMIT_LIGHT,
			Block::OrangeTerracotta(_) => OrangeTerracotta::EMIT_LIGHT,
			Block::MagentaTerracotta(_) => MagentaTerracotta::EMIT_LIGHT,
			Block::LightBlueTerracotta(_) => LightBlueTerracotta::EMIT_LIGHT,
			Block::YellowTerracotta(_) => YellowTerracotta::EMIT_LIGHT,
			Block::LimeTerracotta(_) => LimeTerracotta::EMIT_LIGHT,
			Block::PinkTerracotta(_) => PinkTerracotta::EMIT_LIGHT,
			Block::GrayTerracotta(_) => GrayTerracotta::EMIT_LIGHT,
			Block::LightGrayTerracotta(_) => LightGrayTerracotta::EMIT_LIGHT,
			Block::CyanTerracotta(_) => CyanTerracotta::EMIT_LIGHT,
			Block::PurpleTerracotta(_) => PurpleTerracotta::EMIT_LIGHT,
			Block::BlueTerracotta(_) => BlueTerracotta::EMIT_LIGHT,
			Block::BrownTerracotta(_) => BrownTerracotta::EMIT_LIGHT,
			Block::GreenTerracotta(_) => GreenTerracotta::EMIT_LIGHT,
			Block::RedTerracotta(_) => RedTerracotta::EMIT_LIGHT,
			Block::BlackTerracotta(_) => BlackTerracotta::EMIT_LIGHT,
			Block::WhiteStainedGlassPane(_) => WhiteStainedGlassPane::EMIT_LIGHT,
			Block::OrangeStainedGlassPane(_) => OrangeStainedGlassPane::EMIT_LIGHT,
			Block::MagentaStainedGlassPane(_) => MagentaStainedGlassPane::EMIT_LIGHT,
			Block::LightBlueStainedGlassPane(_) => LightBlueStainedGlassPane::EMIT_LIGHT,
			Block::YellowStainedGlassPane(_) => YellowStainedGlassPane::EMIT_LIGHT,
			Block::LimeStainedGlassPane(_) => LimeStainedGlassPane::EMIT_LIGHT,
			Block::PinkStainedGlassPane(_) => PinkStainedGlassPane::EMIT_LIGHT,
			Block::GrayStainedGlassPane(_) => GrayStainedGlassPane::EMIT_LIGHT,
			Block::LightGrayStainedGlassPane(_) => LightGrayStainedGlassPane::EMIT_LIGHT,
			Block::CyanStainedGlassPane(_) => CyanStainedGlassPane::EMIT_LIGHT,
			Block::PurpleStainedGlassPane(_) => PurpleStainedGlassPane::EMIT_LIGHT,
			Block::BlueStainedGlassPane(_) => BlueStainedGlassPane::EMIT_LIGHT,
			Block::BrownStainedGlassPane(_) => BrownStainedGlassPane::EMIT_LIGHT,
			Block::GreenStainedGlassPane(_) => GreenStainedGlassPane::EMIT_LIGHT,
			Block::RedStainedGlassPane(_) => RedStainedGlassPane::EMIT_LIGHT,
			Block::BlackStainedGlassPane(_) => BlackStainedGlassPane::EMIT_LIGHT,
			Block::AcaciaStairs(_) => AcaciaStairs::EMIT_LIGHT,
			Block::DarkOakStairs(_) => DarkOakStairs::EMIT_LIGHT,
			Block::MangroveStairs(_) => MangroveStairs::EMIT_LIGHT,
			Block::SlimeBlock(_) => SlimeBlock::EMIT_LIGHT,
			Block::Barrier(_) => Barrier::EMIT_LIGHT,
			Block::Light(_) => Light::EMIT_LIGHT,
			Block::IronTrapdoor(_) => IronTrapdoor::EMIT_LIGHT,
			Block::Prismarine(_) => Prismarine::EMIT_LIGHT,
			Block::PrismarineBricks(_) => PrismarineBricks::EMIT_LIGHT,
			Block::DarkPrismarine(_) => DarkPrismarine::EMIT_LIGHT,
			Block::PrismarineStairs(_) => PrismarineStairs::EMIT_LIGHT,
			Block::PrismarineBrickStairs(_) => PrismarineBrickStairs::EMIT_LIGHT,
			Block::DarkPrismarineStairs(_) => DarkPrismarineStairs::EMIT_LIGHT,
			Block::PrismarineSlab(_) => PrismarineSlab::EMIT_LIGHT,
			Block::PrismarineBrickSlab(_) => PrismarineBrickSlab::EMIT_LIGHT,
			Block::DarkPrismarineSlab(_) => DarkPrismarineSlab::EMIT_LIGHT,
			Block::SeaLantern(_) => SeaLantern::EMIT_LIGHT,
			Block::HayBlock(_) => HayBlock::EMIT_LIGHT,
			Block::WhiteCarpet(_) => WhiteCarpet::EMIT_LIGHT,
			Block::OrangeCarpet(_) => OrangeCarpet::EMIT_LIGHT,
			Block::MagentaCarpet(_) => MagentaCarpet::EMIT_LIGHT,
			Block::LightBlueCarpet(_) => LightBlueCarpet::EMIT_LIGHT,
			Block::YellowCarpet(_) => YellowCarpet::EMIT_LIGHT,
			Block::LimeCarpet(_) => LimeCarpet::EMIT_LIGHT,
			Block::PinkCarpet(_) => PinkCarpet::EMIT_LIGHT,
			Block::GrayCarpet(_) => GrayCarpet::EMIT_LIGHT,
			Block::LightGrayCarpet(_) => LightGrayCarpet::EMIT_LIGHT,
			Block::CyanCarpet(_) => CyanCarpet::EMIT_LIGHT,
			Block::PurpleCarpet(_) => PurpleCarpet::EMIT_LIGHT,
			Block::BlueCarpet(_) => BlueCarpet::EMIT_LIGHT,
			Block::BrownCarpet(_) => BrownCarpet::EMIT_LIGHT,
			Block::GreenCarpet(_) => GreenCarpet::EMIT_LIGHT,
			Block::RedCarpet(_) => RedCarpet::EMIT_LIGHT,
			Block::BlackCarpet(_) => BlackCarpet::EMIT_LIGHT,
			Block::Terracotta(_) => Terracotta::EMIT_LIGHT,
			Block::CoalBlock(_) => CoalBlock::EMIT_LIGHT,
			Block::PackedIce(_) => PackedIce::EMIT_LIGHT,
			Block::Sunflower(_) => Sunflower::EMIT_LIGHT,
			Block::Lilac(_) => Lilac::EMIT_LIGHT,
			Block::RoseBush(_) => RoseBush::EMIT_LIGHT,
			Block::Peony(_) => Peony::EMIT_LIGHT,
			Block::TallGrass(_) => TallGrass::EMIT_LIGHT,
			Block::LargeFern(_) => LargeFern::EMIT_LIGHT,
			Block::WhiteBanner(_) => WhiteBanner::EMIT_LIGHT,
			Block::OrangeBanner(_) => OrangeBanner::EMIT_LIGHT,
			Block::MagentaBanner(_) => MagentaBanner::EMIT_LIGHT,
			Block::LightBlueBanner(_) => LightBlueBanner::EMIT_LIGHT,
			Block::YellowBanner(_) => YellowBanner::EMIT_LIGHT,
			Block::LimeBanner(_) => LimeBanner::EMIT_LIGHT,
			Block::PinkBanner(_) => PinkBanner::EMIT_LIGHT,
			Block::GrayBanner(_) => GrayBanner::EMIT_LIGHT,
			Block::LightGrayBanner(_) => LightGrayBanner::EMIT_LIGHT,
			Block::CyanBanner(_) => CyanBanner::EMIT_LIGHT,
			Block::PurpleBanner(_) => PurpleBanner::EMIT_LIGHT,
			Block::BlueBanner(_) => BlueBanner::EMIT_LIGHT,
			Block::BrownBanner(_) => BrownBanner::EMIT_LIGHT,
			Block::GreenBanner(_) => GreenBanner::EMIT_LIGHT,
			Block::RedBanner(_) => RedBanner::EMIT_LIGHT,
			Block::BlackBanner(_) => BlackBanner::EMIT_LIGHT,
			Block::WhiteWallBanner(_) => WhiteWallBanner::EMIT_LIGHT,
			Block::OrangeWallBanner(_) => OrangeWallBanner::EMIT_LIGHT,
			Block::MagentaWallBanner(_) => MagentaWallBanner::EMIT_LIGHT,
			Block::LightBlueWallBanner(_) => LightBlueWallBanner::EMIT_LIGHT,
			Block::YellowWallBanner(_) => YellowWallBanner::EMIT_LIGHT,
			Block::LimeWallBanner(_) => LimeWallBanner::EMIT_LIGHT,
			Block::PinkWallBanner(_) => PinkWallBanner::EMIT_LIGHT,
			Block::GrayWallBanner(_) => GrayWallBanner::EMIT_LIGHT,
			Block::LightGrayWallBanner(_) => LightGrayWallBanner::EMIT_LIGHT,
			Block::CyanWallBanner(_) => CyanWallBanner::EMIT_LIGHT,
			Block::PurpleWallBanner(_) => PurpleWallBanner::EMIT_LIGHT,
			Block::BlueWallBanner(_) => BlueWallBanner::EMIT_LIGHT,
			Block::BrownWallBanner(_) => BrownWallBanner::EMIT_LIGHT,
			Block::GreenWallBanner(_) => GreenWallBanner::EMIT_LIGHT,
			Block::RedWallBanner(_) => RedWallBanner::EMIT_LIGHT,
			Block::BlackWallBanner(_) => BlackWallBanner::EMIT_LIGHT,
			Block::RedSandstone(_) => RedSandstone::EMIT_LIGHT,
			Block::ChiseledRedSandstone(_) => ChiseledRedSandstone::EMIT_LIGHT,
			Block::CutRedSandstone(_) => CutRedSandstone::EMIT_LIGHT,
			Block::RedSandstoneStairs(_) => RedSandstoneStairs::EMIT_LIGHT,
			Block::OakSlab(_) => OakSlab::EMIT_LIGHT,
			Block::SpruceSlab(_) => SpruceSlab::EMIT_LIGHT,
			Block::BirchSlab(_) => BirchSlab::EMIT_LIGHT,
			Block::JungleSlab(_) => JungleSlab::EMIT_LIGHT,
			Block::AcaciaSlab(_) => AcaciaSlab::EMIT_LIGHT,
			Block::DarkOakSlab(_) => DarkOakSlab::EMIT_LIGHT,
			Block::MangroveSlab(_) => MangroveSlab::EMIT_LIGHT,
			Block::StoneSlab(_) => StoneSlab::EMIT_LIGHT,
			Block::SmoothStoneSlab(_) => SmoothStoneSlab::EMIT_LIGHT,
			Block::SandstoneSlab(_) => SandstoneSlab::EMIT_LIGHT,
			Block::CutSandstoneSlab(_) => CutSandstoneSlab::EMIT_LIGHT,
			Block::PetrifiedOakSlab(_) => PetrifiedOakSlab::EMIT_LIGHT,
			Block::CobblestoneSlab(_) => CobblestoneSlab::EMIT_LIGHT,
			Block::BrickSlab(_) => BrickSlab::EMIT_LIGHT,
			Block::StoneBrickSlab(_) => StoneBrickSlab::EMIT_LIGHT,
			Block::MudBrickSlab(_) => MudBrickSlab::EMIT_LIGHT,
			Block::NetherBrickSlab(_) => NetherBrickSlab::EMIT_LIGHT,
			Block::QuartzSlab(_) => QuartzSlab::EMIT_LIGHT,
			Block::RedSandstoneSlab(_) => RedSandstoneSlab::EMIT_LIGHT,
			Block::CutRedSandstoneSlab(_) => CutRedSandstoneSlab::EMIT_LIGHT,
			Block::PurpurSlab(_) => PurpurSlab::EMIT_LIGHT,
			Block::SmoothStone(_) => SmoothStone::EMIT_LIGHT,
			Block::SmoothSandstone(_) => SmoothSandstone::EMIT_LIGHT,
			Block::SmoothQuartz(_) => SmoothQuartz::EMIT_LIGHT,
			Block::SmoothRedSandstone(_) => SmoothRedSandstone::EMIT_LIGHT,
			Block::SpruceFenceGate(_) => SpruceFenceGate::EMIT_LIGHT,
			Block::BirchFenceGate(_) => BirchFenceGate::EMIT_LIGHT,
			Block::JungleFenceGate(_) => JungleFenceGate::EMIT_LIGHT,
			Block::AcaciaFenceGate(_) => AcaciaFenceGate::EMIT_LIGHT,
			Block::DarkOakFenceGate(_) => DarkOakFenceGate::EMIT_LIGHT,
			Block::MangroveFenceGate(_) => MangroveFenceGate::EMIT_LIGHT,
			Block::SpruceFence(_) => SpruceFence::EMIT_LIGHT,
			Block::BirchFence(_) => BirchFence::EMIT_LIGHT,
			Block::JungleFence(_) => JungleFence::EMIT_LIGHT,
			Block::AcaciaFence(_) => AcaciaFence::EMIT_LIGHT,
			Block::DarkOakFence(_) => DarkOakFence::EMIT_LIGHT,
			Block::MangroveFence(_) => MangroveFence::EMIT_LIGHT,
			Block::SpruceDoor(_) => SpruceDoor::EMIT_LIGHT,
			Block::BirchDoor(_) => BirchDoor::EMIT_LIGHT,
			Block::JungleDoor(_) => JungleDoor::EMIT_LIGHT,
			Block::AcaciaDoor(_) => AcaciaDoor::EMIT_LIGHT,
			Block::DarkOakDoor(_) => DarkOakDoor::EMIT_LIGHT,
			Block::MangroveDoor(_) => MangroveDoor::EMIT_LIGHT,
			Block::EndRod(_) => EndRod::EMIT_LIGHT,
			Block::ChorusPlant(_) => ChorusPlant::EMIT_LIGHT,
			Block::ChorusFlower(_) => ChorusFlower::EMIT_LIGHT,
			Block::PurpurBlock(_) => PurpurBlock::EMIT_LIGHT,
			Block::PurpurPillar(_) => PurpurPillar::EMIT_LIGHT,
			Block::PurpurStairs(_) => PurpurStairs::EMIT_LIGHT,
			Block::EndStoneBricks(_) => EndStoneBricks::EMIT_LIGHT,
			Block::Beetroots(_) => Beetroots::EMIT_LIGHT,
			Block::DirtPath(_) => DirtPath::EMIT_LIGHT,
			Block::EndGateway(_) => EndGateway::EMIT_LIGHT,
			Block::RepeatingCommandBlock(_) => RepeatingCommandBlock::EMIT_LIGHT,
			Block::ChainCommandBlock(_) => ChainCommandBlock::EMIT_LIGHT,
			Block::FrostedIce(_) => FrostedIce::EMIT_LIGHT,
			Block::MagmaBlock(_) => MagmaBlock::EMIT_LIGHT,
			Block::NetherWartBlock(_) => NetherWartBlock::EMIT_LIGHT,
			Block::RedNetherBricks(_) => RedNetherBricks::EMIT_LIGHT,
			Block::BoneBlock(_) => BoneBlock::EMIT_LIGHT,
			Block::StructureVoid(_) => StructureVoid::EMIT_LIGHT,
			Block::Observer(_) => Observer::EMIT_LIGHT,
			Block::ShulkerBox(_) => ShulkerBox::EMIT_LIGHT,
			Block::WhiteShulkerBox(_) => WhiteShulkerBox::EMIT_LIGHT,
			Block::OrangeShulkerBox(_) => OrangeShulkerBox::EMIT_LIGHT,
			Block::MagentaShulkerBox(_) => MagentaShulkerBox::EMIT_LIGHT,
			Block::LightBlueShulkerBox(_) => LightBlueShulkerBox::EMIT_LIGHT,
			Block::YellowShulkerBox(_) => YellowShulkerBox::EMIT_LIGHT,
			Block::LimeShulkerBox(_) => LimeShulkerBox::EMIT_LIGHT,
			Block::PinkShulkerBox(_) => PinkShulkerBox::EMIT_LIGHT,
			Block::GrayShulkerBox(_) => GrayShulkerBox::EMIT_LIGHT,
			Block::LightGrayShulkerBox(_) => LightGrayShulkerBox::EMIT_LIGHT,
			Block::CyanShulkerBox(_) => CyanShulkerBox::EMIT_LIGHT,
			Block::PurpleShulkerBox(_) => PurpleShulkerBox::EMIT_LIGHT,
			Block::BlueShulkerBox(_) => BlueShulkerBox::EMIT_LIGHT,
			Block::BrownShulkerBox(_) => BrownShulkerBox::EMIT_LIGHT,
			Block::GreenShulkerBox(_) => GreenShulkerBox::EMIT_LIGHT,
			Block::RedShulkerBox(_) => RedShulkerBox::EMIT_LIGHT,
			Block::BlackShulkerBox(_) => BlackShulkerBox::EMIT_LIGHT,
			Block::WhiteGlazedTerracotta(_) => WhiteGlazedTerracotta::EMIT_LIGHT,
			Block::OrangeGlazedTerracotta(_) => OrangeGlazedTerracotta::EMIT_LIGHT,
			Block::MagentaGlazedTerracotta(_) => MagentaGlazedTerracotta::EMIT_LIGHT,
			Block::LightBlueGlazedTerracotta(_) => LightBlueGlazedTerracotta::EMIT_LIGHT,
			Block::YellowGlazedTerracotta(_) => YellowGlazedTerracotta::EMIT_LIGHT,
			Block::LimeGlazedTerracotta(_) => LimeGlazedTerracotta::EMIT_LIGHT,
			Block::PinkGlazedTerracotta(_) => PinkGlazedTerracotta::EMIT_LIGHT,
			Block::GrayGlazedTerracotta(_) => GrayGlazedTerracotta::EMIT_LIGHT,
			Block::LightGrayGlazedTerracotta(_) => LightGrayGlazedTerracotta::EMIT_LIGHT,
			Block::CyanGlazedTerracotta(_) => CyanGlazedTerracotta::EMIT_LIGHT,
			Block::PurpleGlazedTerracotta(_) => PurpleGlazedTerracotta::EMIT_LIGHT,
			Block::BlueGlazedTerracotta(_) => BlueGlazedTerracotta::EMIT_LIGHT,
			Block::BrownGlazedTerracotta(_) => BrownGlazedTerracotta::EMIT_LIGHT,
			Block::GreenGlazedTerracotta(_) => GreenGlazedTerracotta::EMIT_LIGHT,
			Block::RedGlazedTerracotta(_) => RedGlazedTerracotta::EMIT_LIGHT,
			Block::BlackGlazedTerracotta(_) => BlackGlazedTerracotta::EMIT_LIGHT,
			Block::WhiteConcrete(_) => WhiteConcrete::EMIT_LIGHT,
			Block::OrangeConcrete(_) => OrangeConcrete::EMIT_LIGHT,
			Block::MagentaConcrete(_) => MagentaConcrete::EMIT_LIGHT,
			Block::LightBlueConcrete(_) => LightBlueConcrete::EMIT_LIGHT,
			Block::YellowConcrete(_) => YellowConcrete::EMIT_LIGHT,
			Block::LimeConcrete(_) => LimeConcrete::EMIT_LIGHT,
			Block::PinkConcrete(_) => PinkConcrete::EMIT_LIGHT,
			Block::GrayConcrete(_) => GrayConcrete::EMIT_LIGHT,
			Block::LightGrayConcrete(_) => LightGrayConcrete::EMIT_LIGHT,
			Block::CyanConcrete(_) => CyanConcrete::EMIT_LIGHT,
			Block::PurpleConcrete(_) => PurpleConcrete::EMIT_LIGHT,
			Block::BlueConcrete(_) => BlueConcrete::EMIT_LIGHT,
			Block::BrownConcrete(_) => BrownConcrete::EMIT_LIGHT,
			Block::GreenConcrete(_) => GreenConcrete::EMIT_LIGHT,
			Block::RedConcrete(_) => RedConcrete::EMIT_LIGHT,
			Block::BlackConcrete(_) => BlackConcrete::EMIT_LIGHT,
			Block::WhiteConcretePowder(_) => WhiteConcretePowder::EMIT_LIGHT,
			Block::OrangeConcretePowder(_) => OrangeConcretePowder::EMIT_LIGHT,
			Block::MagentaConcretePowder(_) => MagentaConcretePowder::EMIT_LIGHT,
			Block::LightBlueConcretePowder(_) => LightBlueConcretePowder::EMIT_LIGHT,
			Block::YellowConcretePowder(_) => YellowConcretePowder::EMIT_LIGHT,
			Block::LimeConcretePowder(_) => LimeConcretePowder::EMIT_LIGHT,
			Block::PinkConcretePowder(_) => PinkConcretePowder::EMIT_LIGHT,
			Block::GrayConcretePowder(_) => GrayConcretePowder::EMIT_LIGHT,
			Block::LightGrayConcretePowder(_) => LightGrayConcretePowder::EMIT_LIGHT,
			Block::CyanConcretePowder(_) => CyanConcretePowder::EMIT_LIGHT,
			Block::PurpleConcretePowder(_) => PurpleConcretePowder::EMIT_LIGHT,
			Block::BlueConcretePowder(_) => BlueConcretePowder::EMIT_LIGHT,
			Block::BrownConcretePowder(_) => BrownConcretePowder::EMIT_LIGHT,
			Block::GreenConcretePowder(_) => GreenConcretePowder::EMIT_LIGHT,
			Block::RedConcretePowder(_) => RedConcretePowder::EMIT_LIGHT,
			Block::BlackConcretePowder(_) => BlackConcretePowder::EMIT_LIGHT,
			Block::Kelp(_) => Kelp::EMIT_LIGHT,
			Block::KelpPlant(_) => KelpPlant::EMIT_LIGHT,
			Block::DriedKelpBlock(_) => DriedKelpBlock::EMIT_LIGHT,
			Block::TurtleEgg(_) => TurtleEgg::EMIT_LIGHT,
			Block::DeadTubeCoralBlock(_) => DeadTubeCoralBlock::EMIT_LIGHT,
			Block::DeadBrainCoralBlock(_) => DeadBrainCoralBlock::EMIT_LIGHT,
			Block::DeadBubbleCoralBlock(_) => DeadBubbleCoralBlock::EMIT_LIGHT,
			Block::DeadFireCoralBlock(_) => DeadFireCoralBlock::EMIT_LIGHT,
			Block::DeadHornCoralBlock(_) => DeadHornCoralBlock::EMIT_LIGHT,
			Block::TubeCoralBlock(_) => TubeCoralBlock::EMIT_LIGHT,
			Block::BrainCoralBlock(_) => BrainCoralBlock::EMIT_LIGHT,
			Block::BubbleCoralBlock(_) => BubbleCoralBlock::EMIT_LIGHT,
			Block::FireCoralBlock(_) => FireCoralBlock::EMIT_LIGHT,
			Block::HornCoralBlock(_) => HornCoralBlock::EMIT_LIGHT,
			Block::DeadTubeCoral(_) => DeadTubeCoral::EMIT_LIGHT,
			Block::DeadBrainCoral(_) => DeadBrainCoral::EMIT_LIGHT,
			Block::DeadBubbleCoral(_) => DeadBubbleCoral::EMIT_LIGHT,
			Block::DeadFireCoral(_) => DeadFireCoral::EMIT_LIGHT,
			Block::DeadHornCoral(_) => DeadHornCoral::EMIT_LIGHT,
			Block::TubeCoral(_) => TubeCoral::EMIT_LIGHT,
			Block::BrainCoral(_) => BrainCoral::EMIT_LIGHT,
			Block::BubbleCoral(_) => BubbleCoral::EMIT_LIGHT,
			Block::FireCoral(_) => FireCoral::EMIT_LIGHT,
			Block::HornCoral(_) => HornCoral::EMIT_LIGHT,
			Block::DeadTubeCoralFan(_) => DeadTubeCoralFan::EMIT_LIGHT,
			Block::DeadBrainCoralFan(_) => DeadBrainCoralFan::EMIT_LIGHT,
			Block::DeadBubbleCoralFan(_) => DeadBubbleCoralFan::EMIT_LIGHT,
			Block::DeadFireCoralFan(_) => DeadFireCoralFan::EMIT_LIGHT,
			Block::DeadHornCoralFan(_) => DeadHornCoralFan::EMIT_LIGHT,
			Block::TubeCoralFan(_) => TubeCoralFan::EMIT_LIGHT,
			Block::BrainCoralFan(_) => BrainCoralFan::EMIT_LIGHT,
			Block::BubbleCoralFan(_) => BubbleCoralFan::EMIT_LIGHT,
			Block::FireCoralFan(_) => FireCoralFan::EMIT_LIGHT,
			Block::HornCoralFan(_) => HornCoralFan::EMIT_LIGHT,
			Block::DeadTubeCoralWallFan(_) => DeadTubeCoralWallFan::EMIT_LIGHT,
			Block::DeadBrainCoralWallFan(_) => DeadBrainCoralWallFan::EMIT_LIGHT,
			Block::DeadBubbleCoralWallFan(_) => DeadBubbleCoralWallFan::EMIT_LIGHT,
			Block::DeadFireCoralWallFan(_) => DeadFireCoralWallFan::EMIT_LIGHT,
			Block::DeadHornCoralWallFan(_) => DeadHornCoralWallFan::EMIT_LIGHT,
			Block::TubeCoralWallFan(_) => TubeCoralWallFan::EMIT_LIGHT,
			Block::BrainCoralWallFan(_) => BrainCoralWallFan::EMIT_LIGHT,
			Block::BubbleCoralWallFan(_) => BubbleCoralWallFan::EMIT_LIGHT,
			Block::FireCoralWallFan(_) => FireCoralWallFan::EMIT_LIGHT,
			Block::HornCoralWallFan(_) => HornCoralWallFan::EMIT_LIGHT,
			Block::SeaPickle(_) => SeaPickle::EMIT_LIGHT,
			Block::BlueIce(_) => BlueIce::EMIT_LIGHT,
			Block::Conduit(_) => Conduit::EMIT_LIGHT,
			Block::BambooSapling(_) => BambooSapling::EMIT_LIGHT,
			Block::Bamboo(_) => Bamboo::EMIT_LIGHT,
			Block::PottedBamboo(_) => PottedBamboo::EMIT_LIGHT,
			Block::VoidAir(_) => VoidAir::EMIT_LIGHT,
			Block::CaveAir(_) => CaveAir::EMIT_LIGHT,
			Block::BubbleColumn(_) => BubbleColumn::EMIT_LIGHT,
			Block::PolishedGraniteStairs(_) => PolishedGraniteStairs::EMIT_LIGHT,
			Block::SmoothRedSandstoneStairs(_) => SmoothRedSandstoneStairs::EMIT_LIGHT,
			Block::MossyStoneBrickStairs(_) => MossyStoneBrickStairs::EMIT_LIGHT,
			Block::PolishedDioriteStairs(_) => PolishedDioriteStairs::EMIT_LIGHT,
			Block::MossyCobblestoneStairs(_) => MossyCobblestoneStairs::EMIT_LIGHT,
			Block::EndStoneBrickStairs(_) => EndStoneBrickStairs::EMIT_LIGHT,
			Block::StoneStairs(_) => StoneStairs::EMIT_LIGHT,
			Block::SmoothSandstoneStairs(_) => SmoothSandstoneStairs::EMIT_LIGHT,
			Block::SmoothQuartzStairs(_) => SmoothQuartzStairs::EMIT_LIGHT,
			Block::GraniteStairs(_) => GraniteStairs::EMIT_LIGHT,
			Block::AndesiteStairs(_) => AndesiteStairs::EMIT_LIGHT,
			Block::RedNetherBrickStairs(_) => RedNetherBrickStairs::EMIT_LIGHT,
			Block::PolishedAndesiteStairs(_) => PolishedAndesiteStairs::EMIT_LIGHT,
			Block::DioriteStairs(_) => DioriteStairs::EMIT_LIGHT,
			Block::PolishedGraniteSlab(_) => PolishedGraniteSlab::EMIT_LIGHT,
			Block::SmoothRedSandstoneSlab(_) => SmoothRedSandstoneSlab::EMIT_LIGHT,
			Block::MossyStoneBrickSlab(_) => MossyStoneBrickSlab::EMIT_LIGHT,
			Block::PolishedDioriteSlab(_) => PolishedDioriteSlab::EMIT_LIGHT,
			Block::MossyCobblestoneSlab(_) => MossyCobblestoneSlab::EMIT_LIGHT,
			Block::EndStoneBrickSlab(_) => EndStoneBrickSlab::EMIT_LIGHT,
			Block::SmoothSandstoneSlab(_) => SmoothSandstoneSlab::EMIT_LIGHT,
			Block::SmoothQuartzSlab(_) => SmoothQuartzSlab::EMIT_LIGHT,
			Block::GraniteSlab(_) => GraniteSlab::EMIT_LIGHT,
			Block::AndesiteSlab(_) => AndesiteSlab::EMIT_LIGHT,
			Block::RedNetherBrickSlab(_) => RedNetherBrickSlab::EMIT_LIGHT,
			Block::PolishedAndesiteSlab(_) => PolishedAndesiteSlab::EMIT_LIGHT,
			Block::DioriteSlab(_) => DioriteSlab::EMIT_LIGHT,
			Block::BrickWall(_) => BrickWall::EMIT_LIGHT,
			Block::PrismarineWall(_) => PrismarineWall::EMIT_LIGHT,
			Block::RedSandstoneWall(_) => RedSandstoneWall::EMIT_LIGHT,
			Block::MossyStoneBrickWall(_) => MossyStoneBrickWall::EMIT_LIGHT,
			Block::GraniteWall(_) => GraniteWall::EMIT_LIGHT,
			Block::StoneBrickWall(_) => StoneBrickWall::EMIT_LIGHT,
			Block::MudBrickWall(_) => MudBrickWall::EMIT_LIGHT,
			Block::NetherBrickWall(_) => NetherBrickWall::EMIT_LIGHT,
			Block::AndesiteWall(_) => AndesiteWall::EMIT_LIGHT,
			Block::RedNetherBrickWall(_) => RedNetherBrickWall::EMIT_LIGHT,
			Block::SandstoneWall(_) => SandstoneWall::EMIT_LIGHT,
			Block::EndStoneBrickWall(_) => EndStoneBrickWall::EMIT_LIGHT,
			Block::DioriteWall(_) => DioriteWall::EMIT_LIGHT,
			Block::Scaffolding(_) => Scaffolding::EMIT_LIGHT,
			Block::Loom(_) => Loom::EMIT_LIGHT,
			Block::Barrel(_) => Barrel::EMIT_LIGHT,
			Block::Smoker(_) => Smoker::EMIT_LIGHT,
			Block::BlastFurnace(_) => BlastFurnace::EMIT_LIGHT,
			Block::CartographyTable(_) => CartographyTable::EMIT_LIGHT,
			Block::FletchingTable(_) => FletchingTable::EMIT_LIGHT,
			Block::Grindstone(_) => Grindstone::EMIT_LIGHT,
			Block::Lectern(_) => Lectern::EMIT_LIGHT,
			Block::SmithingTable(_) => SmithingTable::EMIT_LIGHT,
			Block::Stonecutter(_) => Stonecutter::EMIT_LIGHT,
			Block::Bell(_) => Bell::EMIT_LIGHT,
			Block::Lantern(_) => Lantern::EMIT_LIGHT,
			Block::SoulLantern(_) => SoulLantern::EMIT_LIGHT,
			Block::Campfire(_) => Campfire::EMIT_LIGHT,
			Block::SoulCampfire(_) => SoulCampfire::EMIT_LIGHT,
			Block::SweetBerryBush(_) => SweetBerryBush::EMIT_LIGHT,
			Block::WarpedStem(_) => WarpedStem::EMIT_LIGHT,
			Block::StrippedWarpedStem(_) => StrippedWarpedStem::EMIT_LIGHT,
			Block::WarpedHyphae(_) => WarpedHyphae::EMIT_LIGHT,
			Block::StrippedWarpedHyphae(_) => StrippedWarpedHyphae::EMIT_LIGHT,
			Block::WarpedNylium(_) => WarpedNylium::EMIT_LIGHT,
			Block::WarpedFungus(_) => WarpedFungus::EMIT_LIGHT,
			Block::WarpedWartBlock(_) => WarpedWartBlock::EMIT_LIGHT,
			Block::WarpedRoots(_) => WarpedRoots::EMIT_LIGHT,
			Block::NetherSprouts(_) => NetherSprouts::EMIT_LIGHT,
			Block::CrimsonStem(_) => CrimsonStem::EMIT_LIGHT,
			Block::StrippedCrimsonStem(_) => StrippedCrimsonStem::EMIT_LIGHT,
			Block::CrimsonHyphae(_) => CrimsonHyphae::EMIT_LIGHT,
			Block::StrippedCrimsonHyphae(_) => StrippedCrimsonHyphae::EMIT_LIGHT,
			Block::CrimsonNylium(_) => CrimsonNylium::EMIT_LIGHT,
			Block::CrimsonFungus(_) => CrimsonFungus::EMIT_LIGHT,
			Block::Shroomlight(_) => Shroomlight::EMIT_LIGHT,
			Block::WeepingVines(_) => WeepingVines::EMIT_LIGHT,
			Block::WeepingVinesPlant(_) => WeepingVinesPlant::EMIT_LIGHT,
			Block::TwistingVines(_) => TwistingVines::EMIT_LIGHT,
			Block::TwistingVinesPlant(_) => TwistingVinesPlant::EMIT_LIGHT,
			Block::CrimsonRoots(_) => CrimsonRoots::EMIT_LIGHT,
			Block::CrimsonPlanks(_) => CrimsonPlanks::EMIT_LIGHT,
			Block::WarpedPlanks(_) => WarpedPlanks::EMIT_LIGHT,
			Block::CrimsonSlab(_) => CrimsonSlab::EMIT_LIGHT,
			Block::WarpedSlab(_) => WarpedSlab::EMIT_LIGHT,
			Block::CrimsonPressurePlate(_) => CrimsonPressurePlate::EMIT_LIGHT,
			Block::WarpedPressurePlate(_) => WarpedPressurePlate::EMIT_LIGHT,
			Block::CrimsonFence(_) => CrimsonFence::EMIT_LIGHT,
			Block::WarpedFence(_) => WarpedFence::EMIT_LIGHT,
			Block::CrimsonTrapdoor(_) => CrimsonTrapdoor::EMIT_LIGHT,
			Block::WarpedTrapdoor(_) => WarpedTrapdoor::EMIT_LIGHT,
			Block::CrimsonFenceGate(_) => CrimsonFenceGate::EMIT_LIGHT,
			Block::WarpedFenceGate(_) => WarpedFenceGate::EMIT_LIGHT,
			Block::CrimsonStairs(_) => CrimsonStairs::EMIT_LIGHT,
			Block::WarpedStairs(_) => WarpedStairs::EMIT_LIGHT,
			Block::CrimsonButton(_) => CrimsonButton::EMIT_LIGHT,
			Block::WarpedButton(_) => WarpedButton::EMIT_LIGHT,
			Block::CrimsonDoor(_) => CrimsonDoor::EMIT_LIGHT,
			Block::WarpedDoor(_) => WarpedDoor::EMIT_LIGHT,
			Block::CrimsonSign(_) => CrimsonSign::EMIT_LIGHT,
			Block::WarpedSign(_) => WarpedSign::EMIT_LIGHT,
			Block::CrimsonWallSign(_) => CrimsonWallSign::EMIT_LIGHT,
			Block::WarpedWallSign(_) => WarpedWallSign::EMIT_LIGHT,
			Block::StructureBlock(_) => StructureBlock::EMIT_LIGHT,
			Block::Jigsaw(_) => Jigsaw::EMIT_LIGHT,
			Block::Composter(_) => Composter::EMIT_LIGHT,
			Block::Target(_) => Target::EMIT_LIGHT,
			Block::BeeNest(_) => BeeNest::EMIT_LIGHT,
			Block::Beehive(_) => Beehive::EMIT_LIGHT,
			Block::HoneyBlock(_) => HoneyBlock::EMIT_LIGHT,
			Block::HoneycombBlock(_) => HoneycombBlock::EMIT_LIGHT,
			Block::NetheriteBlock(_) => NetheriteBlock::EMIT_LIGHT,
			Block::AncientDebris(_) => AncientDebris::EMIT_LIGHT,
			Block::CryingObsidian(_) => CryingObsidian::EMIT_LIGHT,
			Block::RespawnAnchor(_) => RespawnAnchor::EMIT_LIGHT,
			Block::PottedCrimsonFungus(_) => PottedCrimsonFungus::EMIT_LIGHT,
			Block::PottedWarpedFungus(_) => PottedWarpedFungus::EMIT_LIGHT,
			Block::PottedCrimsonRoots(_) => PottedCrimsonRoots::EMIT_LIGHT,
			Block::PottedWarpedRoots(_) => PottedWarpedRoots::EMIT_LIGHT,
			Block::Lodestone(_) => Lodestone::EMIT_LIGHT,
			Block::Blackstone(_) => Blackstone::EMIT_LIGHT,
			Block::BlackstoneStairs(_) => BlackstoneStairs::EMIT_LIGHT,
			Block::BlackstoneWall(_) => BlackstoneWall::EMIT_LIGHT,
			Block::BlackstoneSlab(_) => BlackstoneSlab::EMIT_LIGHT,
			Block::PolishedBlackstone(_) => PolishedBlackstone::EMIT_LIGHT,
			Block::PolishedBlackstoneBricks(_) => PolishedBlackstoneBricks::EMIT_LIGHT,
			Block::CrackedPolishedBlackstoneBricks(_) => CrackedPolishedBlackstoneBricks::EMIT_LIGHT,
			Block::ChiseledPolishedBlackstone(_) => ChiseledPolishedBlackstone::EMIT_LIGHT,
			Block::PolishedBlackstoneBrickSlab(_) => PolishedBlackstoneBrickSlab::EMIT_LIGHT,
			Block::PolishedBlackstoneBrickStairs(_) => PolishedBlackstoneBrickStairs::EMIT_LIGHT,
			Block::PolishedBlackstoneBrickWall(_) => PolishedBlackstoneBrickWall::EMIT_LIGHT,
			Block::GildedBlackstone(_) => GildedBlackstone::EMIT_LIGHT,
			Block::PolishedBlackstoneStairs(_) => PolishedBlackstoneStairs::EMIT_LIGHT,
			Block::PolishedBlackstoneSlab(_) => PolishedBlackstoneSlab::EMIT_LIGHT,
			Block::PolishedBlackstonePressurePlate(_) => PolishedBlackstonePressurePlate::EMIT_LIGHT,
			Block::PolishedBlackstoneButton(_) => PolishedBlackstoneButton::EMIT_LIGHT,
			Block::PolishedBlackstoneWall(_) => PolishedBlackstoneWall::EMIT_LIGHT,
			Block::ChiseledNetherBricks(_) => ChiseledNetherBricks::EMIT_LIGHT,
			Block::CrackedNetherBricks(_) => CrackedNetherBricks::EMIT_LIGHT,
			Block::QuartzBricks(_) => QuartzBricks::EMIT_LIGHT,
			Block::Candle(_) => Candle::EMIT_LIGHT,
			Block::WhiteCandle(_) => WhiteCandle::EMIT_LIGHT,
			Block::OrangeCandle(_) => OrangeCandle::EMIT_LIGHT,
			Block::MagentaCandle(_) => MagentaCandle::EMIT_LIGHT,
			Block::LightBlueCandle(_) => LightBlueCandle::EMIT_LIGHT,
			Block::YellowCandle(_) => YellowCandle::EMIT_LIGHT,
			Block::LimeCandle(_) => LimeCandle::EMIT_LIGHT,
			Block::PinkCandle(_) => PinkCandle::EMIT_LIGHT,
			Block::GrayCandle(_) => GrayCandle::EMIT_LIGHT,
			Block::LightGrayCandle(_) => LightGrayCandle::EMIT_LIGHT,
			Block::CyanCandle(_) => CyanCandle::EMIT_LIGHT,
			Block::PurpleCandle(_) => PurpleCandle::EMIT_LIGHT,
			Block::BlueCandle(_) => BlueCandle::EMIT_LIGHT,
			Block::BrownCandle(_) => BrownCandle::EMIT_LIGHT,
			Block::GreenCandle(_) => GreenCandle::EMIT_LIGHT,
			Block::RedCandle(_) => RedCandle::EMIT_LIGHT,
			Block::BlackCandle(_) => BlackCandle::EMIT_LIGHT,
			Block::CandleCake(_) => CandleCake::EMIT_LIGHT,
			Block::WhiteCandleCake(_) => WhiteCandleCake::EMIT_LIGHT,
			Block::OrangeCandleCake(_) => OrangeCandleCake::EMIT_LIGHT,
			Block::MagentaCandleCake(_) => MagentaCandleCake::EMIT_LIGHT,
			Block::LightBlueCandleCake(_) => LightBlueCandleCake::EMIT_LIGHT,
			Block::YellowCandleCake(_) => YellowCandleCake::EMIT_LIGHT,
			Block::LimeCandleCake(_) => LimeCandleCake::EMIT_LIGHT,
			Block::PinkCandleCake(_) => PinkCandleCake::EMIT_LIGHT,
			Block::GrayCandleCake(_) => GrayCandleCake::EMIT_LIGHT,
			Block::LightGrayCandleCake(_) => LightGrayCandleCake::EMIT_LIGHT,
			Block::CyanCandleCake(_) => CyanCandleCake::EMIT_LIGHT,
			Block::PurpleCandleCake(_) => PurpleCandleCake::EMIT_LIGHT,
			Block::BlueCandleCake(_) => BlueCandleCake::EMIT_LIGHT,
			Block::BrownCandleCake(_) => BrownCandleCake::EMIT_LIGHT,
			Block::GreenCandleCake(_) => GreenCandleCake::EMIT_LIGHT,
			Block::RedCandleCake(_) => RedCandleCake::EMIT_LIGHT,
			Block::BlackCandleCake(_) => BlackCandleCake::EMIT_LIGHT,
			Block::AmethystBlock(_) => AmethystBlock::EMIT_LIGHT,
			Block::BuddingAmethyst(_) => BuddingAmethyst::EMIT_LIGHT,
			Block::AmethystCluster(_) => AmethystCluster::EMIT_LIGHT,
			Block::LargeAmethystBud(_) => LargeAmethystBud::EMIT_LIGHT,
			Block::MediumAmethystBud(_) => MediumAmethystBud::EMIT_LIGHT,
			Block::SmallAmethystBud(_) => SmallAmethystBud::EMIT_LIGHT,
			Block::Tuff(_) => Tuff::EMIT_LIGHT,
			Block::Calcite(_) => Calcite::EMIT_LIGHT,
			Block::TintedGlass(_) => TintedGlass::EMIT_LIGHT,
			Block::PowderSnow(_) => PowderSnow::EMIT_LIGHT,
			Block::SculkSensor(_) => SculkSensor::EMIT_LIGHT,
			Block::Sculk(_) => Sculk::EMIT_LIGHT,
			Block::SculkVein(_) => SculkVein::EMIT_LIGHT,
			Block::SculkCatalyst(_) => SculkCatalyst::EMIT_LIGHT,
			Block::SculkShrieker(_) => SculkShrieker::EMIT_LIGHT,
			Block::OxidizedCopper(_) => OxidizedCopper::EMIT_LIGHT,
			Block::WeatheredCopper(_) => WeatheredCopper::EMIT_LIGHT,
			Block::ExposedCopper(_) => ExposedCopper::EMIT_LIGHT,
			Block::CopperBlock(_) => CopperBlock::EMIT_LIGHT,
			Block::CopperOre(_) => CopperOre::EMIT_LIGHT,
			Block::DeepslateCopperOre(_) => DeepslateCopperOre::EMIT_LIGHT,
			Block::OxidizedCutCopper(_) => OxidizedCutCopper::EMIT_LIGHT,
			Block::WeatheredCutCopper(_) => WeatheredCutCopper::EMIT_LIGHT,
			Block::ExposedCutCopper(_) => ExposedCutCopper::EMIT_LIGHT,
			Block::CutCopper(_) => CutCopper::EMIT_LIGHT,
			Block::OxidizedCutCopperStairs(_) => OxidizedCutCopperStairs::EMIT_LIGHT,
			Block::WeatheredCutCopperStairs(_) => WeatheredCutCopperStairs::EMIT_LIGHT,
			Block::ExposedCutCopperStairs(_) => ExposedCutCopperStairs::EMIT_LIGHT,
			Block::CutCopperStairs(_) => CutCopperStairs::EMIT_LIGHT,
			Block::OxidizedCutCopperSlab(_) => OxidizedCutCopperSlab::EMIT_LIGHT,
			Block::WeatheredCutCopperSlab(_) => WeatheredCutCopperSlab::EMIT_LIGHT,
			Block::ExposedCutCopperSlab(_) => ExposedCutCopperSlab::EMIT_LIGHT,
			Block::CutCopperSlab(_) => CutCopperSlab::EMIT_LIGHT,
			Block::WaxedCopperBlock(_) => WaxedCopperBlock::EMIT_LIGHT,
			Block::WaxedWeatheredCopper(_) => WaxedWeatheredCopper::EMIT_LIGHT,
			Block::WaxedExposedCopper(_) => WaxedExposedCopper::EMIT_LIGHT,
			Block::WaxedOxidizedCopper(_) => WaxedOxidizedCopper::EMIT_LIGHT,
			Block::WaxedOxidizedCutCopper(_) => WaxedOxidizedCutCopper::EMIT_LIGHT,
			Block::WaxedWeatheredCutCopper(_) => WaxedWeatheredCutCopper::EMIT_LIGHT,
			Block::WaxedExposedCutCopper(_) => WaxedExposedCutCopper::EMIT_LIGHT,
			Block::WaxedCutCopper(_) => WaxedCutCopper::EMIT_LIGHT,
			Block::WaxedOxidizedCutCopperStairs(_) => WaxedOxidizedCutCopperStairs::EMIT_LIGHT,
			Block::WaxedWeatheredCutCopperStairs(_) => WaxedWeatheredCutCopperStairs::EMIT_LIGHT,
			Block::WaxedExposedCutCopperStairs(_) => WaxedExposedCutCopperStairs::EMIT_LIGHT,
			Block::WaxedCutCopperStairs(_) => WaxedCutCopperStairs::EMIT_LIGHT,
			Block::WaxedOxidizedCutCopperSlab(_) => WaxedOxidizedCutCopperSlab::EMIT_LIGHT,
			Block::WaxedWeatheredCutCopperSlab(_) => WaxedWeatheredCutCopperSlab::EMIT_LIGHT,
			Block::WaxedExposedCutCopperSlab(_) => WaxedExposedCutCopperSlab::EMIT_LIGHT,
			Block::WaxedCutCopperSlab(_) => WaxedCutCopperSlab::EMIT_LIGHT,
			Block::LightningRod(_) => LightningRod::EMIT_LIGHT,
			Block::PointedDripstone(_) => PointedDripstone::EMIT_LIGHT,
			Block::DripstoneBlock(_) => DripstoneBlock::EMIT_LIGHT,
			Block::CaveVines(_) => CaveVines::EMIT_LIGHT,
			Block::CaveVinesPlant(_) => CaveVinesPlant::EMIT_LIGHT,
			Block::SporeBlossom(_) => SporeBlossom::EMIT_LIGHT,
			Block::Azalea(_) => Azalea::EMIT_LIGHT,
			Block::FloweringAzalea(_) => FloweringAzalea::EMIT_LIGHT,
			Block::MossCarpet(_) => MossCarpet::EMIT_LIGHT,
			Block::MossBlock(_) => MossBlock::EMIT_LIGHT,
			Block::BigDripleaf(_) => BigDripleaf::EMIT_LIGHT,
			Block::BigDripleafStem(_) => BigDripleafStem::EMIT_LIGHT,
			Block::SmallDripleaf(_) => SmallDripleaf::EMIT_LIGHT,
			Block::HangingRoots(_) => HangingRoots::EMIT_LIGHT,
			Block::RootedDirt(_) => RootedDirt::EMIT_LIGHT,
			Block::Mud(_) => Mud::EMIT_LIGHT,
			Block::Deepslate(_) => Deepslate::EMIT_LIGHT,
			Block::CobbledDeepslate(_) => CobbledDeepslate::EMIT_LIGHT,
			Block::CobbledDeepslateStairs(_) => CobbledDeepslateStairs::EMIT_LIGHT,
			Block::CobbledDeepslateSlab(_) => CobbledDeepslateSlab::EMIT_LIGHT,
			Block::CobbledDeepslateWall(_) => CobbledDeepslateWall::EMIT_LIGHT,
			Block::PolishedDeepslate(_) => PolishedDeepslate::EMIT_LIGHT,
			Block::PolishedDeepslateStairs(_) => PolishedDeepslateStairs::EMIT_LIGHT,
			Block::PolishedDeepslateSlab(_) => PolishedDeepslateSlab::EMIT_LIGHT,
			Block::PolishedDeepslateWall(_) => PolishedDeepslateWall::EMIT_LIGHT,
			Block::DeepslateTiles(_) => DeepslateTiles::EMIT_LIGHT,
			Block::DeepslateTileStairs(_) => DeepslateTileStairs::EMIT_LIGHT,
			Block::DeepslateTileSlab(_) => DeepslateTileSlab::EMIT_LIGHT,
			Block::DeepslateTileWall(_) => DeepslateTileWall::EMIT_LIGHT,
			Block::DeepslateBricks(_) => DeepslateBricks::EMIT_LIGHT,
			Block::DeepslateBrickStairs(_) => DeepslateBrickStairs::EMIT_LIGHT,
			Block::DeepslateBrickSlab(_) => DeepslateBrickSlab::EMIT_LIGHT,
			Block::DeepslateBrickWall(_) => DeepslateBrickWall::EMIT_LIGHT,
			Block::ChiseledDeepslate(_) => ChiseledDeepslate::EMIT_LIGHT,
			Block::CrackedDeepslateBricks(_) => CrackedDeepslateBricks::EMIT_LIGHT,
			Block::CrackedDeepslateTiles(_) => CrackedDeepslateTiles::EMIT_LIGHT,
			Block::InfestedDeepslate(_) => InfestedDeepslate::EMIT_LIGHT,
			Block::SmoothBasalt(_) => SmoothBasalt::EMIT_LIGHT,
			Block::RawIronBlock(_) => RawIronBlock::EMIT_LIGHT,
			Block::RawCopperBlock(_) => RawCopperBlock::EMIT_LIGHT,
			Block::RawGoldBlock(_) => RawGoldBlock::EMIT_LIGHT,
			Block::PottedAzaleaBush(_) => PottedAzaleaBush::EMIT_LIGHT,
			Block::PottedFloweringAzaleaBush(_) => PottedFloweringAzaleaBush::EMIT_LIGHT,
			Block::OchreFroglight(_) => OchreFroglight::EMIT_LIGHT,
			Block::VerdantFroglight(_) => VerdantFroglight::EMIT_LIGHT,
			Block::PearlescentFroglight(_) => PearlescentFroglight::EMIT_LIGHT,
			Block::Frogspawn(_) => Frogspawn::EMIT_LIGHT,
			Block::ReinforcedDeepslate(_) => ReinforcedDeepslate::EMIT_LIGHT,
		}
	}
	pub fn get_filter_light(&self) -> u8 {
		match self {
			Block::Air(_) => Air::FILTER_LIGHT,
			Block::Stone(_) => Stone::FILTER_LIGHT,
			Block::Granite(_) => Granite::FILTER_LIGHT,
			Block::PolishedGranite(_) => PolishedGranite::FILTER_LIGHT,
			Block::Diorite(_) => Diorite::FILTER_LIGHT,
			Block::PolishedDiorite(_) => PolishedDiorite::FILTER_LIGHT,
			Block::Andesite(_) => Andesite::FILTER_LIGHT,
			Block::PolishedAndesite(_) => PolishedAndesite::FILTER_LIGHT,
			Block::GrassBlock(_) => GrassBlock::FILTER_LIGHT,
			Block::Dirt(_) => Dirt::FILTER_LIGHT,
			Block::CoarseDirt(_) => CoarseDirt::FILTER_LIGHT,
			Block::Podzol(_) => Podzol::FILTER_LIGHT,
			Block::Cobblestone(_) => Cobblestone::FILTER_LIGHT,
			Block::OakPlanks(_) => OakPlanks::FILTER_LIGHT,
			Block::SprucePlanks(_) => SprucePlanks::FILTER_LIGHT,
			Block::BirchPlanks(_) => BirchPlanks::FILTER_LIGHT,
			Block::JunglePlanks(_) => JunglePlanks::FILTER_LIGHT,
			Block::AcaciaPlanks(_) => AcaciaPlanks::FILTER_LIGHT,
			Block::DarkOakPlanks(_) => DarkOakPlanks::FILTER_LIGHT,
			Block::MangrovePlanks(_) => MangrovePlanks::FILTER_LIGHT,
			Block::OakSapling(_) => OakSapling::FILTER_LIGHT,
			Block::SpruceSapling(_) => SpruceSapling::FILTER_LIGHT,
			Block::BirchSapling(_) => BirchSapling::FILTER_LIGHT,
			Block::JungleSapling(_) => JungleSapling::FILTER_LIGHT,
			Block::AcaciaSapling(_) => AcaciaSapling::FILTER_LIGHT,
			Block::DarkOakSapling(_) => DarkOakSapling::FILTER_LIGHT,
			Block::MangrovePropagule(_) => MangrovePropagule::FILTER_LIGHT,
			Block::Bedrock(_) => Bedrock::FILTER_LIGHT,
			Block::Water(_) => Water::FILTER_LIGHT,
			Block::Lava(_) => Lava::FILTER_LIGHT,
			Block::Sand(_) => Sand::FILTER_LIGHT,
			Block::RedSand(_) => RedSand::FILTER_LIGHT,
			Block::Gravel(_) => Gravel::FILTER_LIGHT,
			Block::GoldOre(_) => GoldOre::FILTER_LIGHT,
			Block::DeepslateGoldOre(_) => DeepslateGoldOre::FILTER_LIGHT,
			Block::IronOre(_) => IronOre::FILTER_LIGHT,
			Block::DeepslateIronOre(_) => DeepslateIronOre::FILTER_LIGHT,
			Block::CoalOre(_) => CoalOre::FILTER_LIGHT,
			Block::DeepslateCoalOre(_) => DeepslateCoalOre::FILTER_LIGHT,
			Block::NetherGoldOre(_) => NetherGoldOre::FILTER_LIGHT,
			Block::OakLog(_) => OakLog::FILTER_LIGHT,
			Block::SpruceLog(_) => SpruceLog::FILTER_LIGHT,
			Block::BirchLog(_) => BirchLog::FILTER_LIGHT,
			Block::JungleLog(_) => JungleLog::FILTER_LIGHT,
			Block::AcaciaLog(_) => AcaciaLog::FILTER_LIGHT,
			Block::DarkOakLog(_) => DarkOakLog::FILTER_LIGHT,
			Block::MangroveLog(_) => MangroveLog::FILTER_LIGHT,
			Block::MangroveRoots(_) => MangroveRoots::FILTER_LIGHT,
			Block::MuddyMangroveRoots(_) => MuddyMangroveRoots::FILTER_LIGHT,
			Block::StrippedSpruceLog(_) => StrippedSpruceLog::FILTER_LIGHT,
			Block::StrippedBirchLog(_) => StrippedBirchLog::FILTER_LIGHT,
			Block::StrippedJungleLog(_) => StrippedJungleLog::FILTER_LIGHT,
			Block::StrippedAcaciaLog(_) => StrippedAcaciaLog::FILTER_LIGHT,
			Block::StrippedDarkOakLog(_) => StrippedDarkOakLog::FILTER_LIGHT,
			Block::StrippedOakLog(_) => StrippedOakLog::FILTER_LIGHT,
			Block::StrippedMangroveLog(_) => StrippedMangroveLog::FILTER_LIGHT,
			Block::OakWood(_) => OakWood::FILTER_LIGHT,
			Block::SpruceWood(_) => SpruceWood::FILTER_LIGHT,
			Block::BirchWood(_) => BirchWood::FILTER_LIGHT,
			Block::JungleWood(_) => JungleWood::FILTER_LIGHT,
			Block::AcaciaWood(_) => AcaciaWood::FILTER_LIGHT,
			Block::DarkOakWood(_) => DarkOakWood::FILTER_LIGHT,
			Block::MangroveWood(_) => MangroveWood::FILTER_LIGHT,
			Block::StrippedOakWood(_) => StrippedOakWood::FILTER_LIGHT,
			Block::StrippedSpruceWood(_) => StrippedSpruceWood::FILTER_LIGHT,
			Block::StrippedBirchWood(_) => StrippedBirchWood::FILTER_LIGHT,
			Block::StrippedJungleWood(_) => StrippedJungleWood::FILTER_LIGHT,
			Block::StrippedAcaciaWood(_) => StrippedAcaciaWood::FILTER_LIGHT,
			Block::StrippedDarkOakWood(_) => StrippedDarkOakWood::FILTER_LIGHT,
			Block::StrippedMangroveWood(_) => StrippedMangroveWood::FILTER_LIGHT,
			Block::OakLeaves(_) => OakLeaves::FILTER_LIGHT,
			Block::SpruceLeaves(_) => SpruceLeaves::FILTER_LIGHT,
			Block::BirchLeaves(_) => BirchLeaves::FILTER_LIGHT,
			Block::JungleLeaves(_) => JungleLeaves::FILTER_LIGHT,
			Block::AcaciaLeaves(_) => AcaciaLeaves::FILTER_LIGHT,
			Block::DarkOakLeaves(_) => DarkOakLeaves::FILTER_LIGHT,
			Block::MangroveLeaves(_) => MangroveLeaves::FILTER_LIGHT,
			Block::AzaleaLeaves(_) => AzaleaLeaves::FILTER_LIGHT,
			Block::FloweringAzaleaLeaves(_) => FloweringAzaleaLeaves::FILTER_LIGHT,
			Block::Sponge(_) => Sponge::FILTER_LIGHT,
			Block::WetSponge(_) => WetSponge::FILTER_LIGHT,
			Block::Glass(_) => Glass::FILTER_LIGHT,
			Block::LapisOre(_) => LapisOre::FILTER_LIGHT,
			Block::DeepslateLapisOre(_) => DeepslateLapisOre::FILTER_LIGHT,
			Block::LapisBlock(_) => LapisBlock::FILTER_LIGHT,
			Block::Dispenser(_) => Dispenser::FILTER_LIGHT,
			Block::Sandstone(_) => Sandstone::FILTER_LIGHT,
			Block::ChiseledSandstone(_) => ChiseledSandstone::FILTER_LIGHT,
			Block::CutSandstone(_) => CutSandstone::FILTER_LIGHT,
			Block::NoteBlock(_) => NoteBlock::FILTER_LIGHT,
			Block::WhiteBed(_) => WhiteBed::FILTER_LIGHT,
			Block::OrangeBed(_) => OrangeBed::FILTER_LIGHT,
			Block::MagentaBed(_) => MagentaBed::FILTER_LIGHT,
			Block::LightBlueBed(_) => LightBlueBed::FILTER_LIGHT,
			Block::YellowBed(_) => YellowBed::FILTER_LIGHT,
			Block::LimeBed(_) => LimeBed::FILTER_LIGHT,
			Block::PinkBed(_) => PinkBed::FILTER_LIGHT,
			Block::GrayBed(_) => GrayBed::FILTER_LIGHT,
			Block::LightGrayBed(_) => LightGrayBed::FILTER_LIGHT,
			Block::CyanBed(_) => CyanBed::FILTER_LIGHT,
			Block::PurpleBed(_) => PurpleBed::FILTER_LIGHT,
			Block::BlueBed(_) => BlueBed::FILTER_LIGHT,
			Block::BrownBed(_) => BrownBed::FILTER_LIGHT,
			Block::GreenBed(_) => GreenBed::FILTER_LIGHT,
			Block::RedBed(_) => RedBed::FILTER_LIGHT,
			Block::BlackBed(_) => BlackBed::FILTER_LIGHT,
			Block::PoweredRail(_) => PoweredRail::FILTER_LIGHT,
			Block::DetectorRail(_) => DetectorRail::FILTER_LIGHT,
			Block::StickyPiston(_) => StickyPiston::FILTER_LIGHT,
			Block::Cobweb(_) => Cobweb::FILTER_LIGHT,
			Block::Grass(_) => Grass::FILTER_LIGHT,
			Block::Fern(_) => Fern::FILTER_LIGHT,
			Block::DeadBush(_) => DeadBush::FILTER_LIGHT,
			Block::Seagrass(_) => Seagrass::FILTER_LIGHT,
			Block::TallSeagrass(_) => TallSeagrass::FILTER_LIGHT,
			Block::Piston(_) => Piston::FILTER_LIGHT,
			Block::PistonHead(_) => PistonHead::FILTER_LIGHT,
			Block::WhiteWool(_) => WhiteWool::FILTER_LIGHT,
			Block::OrangeWool(_) => OrangeWool::FILTER_LIGHT,
			Block::MagentaWool(_) => MagentaWool::FILTER_LIGHT,
			Block::LightBlueWool(_) => LightBlueWool::FILTER_LIGHT,
			Block::YellowWool(_) => YellowWool::FILTER_LIGHT,
			Block::LimeWool(_) => LimeWool::FILTER_LIGHT,
			Block::PinkWool(_) => PinkWool::FILTER_LIGHT,
			Block::GrayWool(_) => GrayWool::FILTER_LIGHT,
			Block::LightGrayWool(_) => LightGrayWool::FILTER_LIGHT,
			Block::CyanWool(_) => CyanWool::FILTER_LIGHT,
			Block::PurpleWool(_) => PurpleWool::FILTER_LIGHT,
			Block::BlueWool(_) => BlueWool::FILTER_LIGHT,
			Block::BrownWool(_) => BrownWool::FILTER_LIGHT,
			Block::GreenWool(_) => GreenWool::FILTER_LIGHT,
			Block::RedWool(_) => RedWool::FILTER_LIGHT,
			Block::BlackWool(_) => BlackWool::FILTER_LIGHT,
			Block::MovingPiston(_) => MovingPiston::FILTER_LIGHT,
			Block::Dandelion(_) => Dandelion::FILTER_LIGHT,
			Block::Poppy(_) => Poppy::FILTER_LIGHT,
			Block::BlueOrchid(_) => BlueOrchid::FILTER_LIGHT,
			Block::Allium(_) => Allium::FILTER_LIGHT,
			Block::AzureBluet(_) => AzureBluet::FILTER_LIGHT,
			Block::RedTulip(_) => RedTulip::FILTER_LIGHT,
			Block::OrangeTulip(_) => OrangeTulip::FILTER_LIGHT,
			Block::WhiteTulip(_) => WhiteTulip::FILTER_LIGHT,
			Block::PinkTulip(_) => PinkTulip::FILTER_LIGHT,
			Block::OxeyeDaisy(_) => OxeyeDaisy::FILTER_LIGHT,
			Block::Cornflower(_) => Cornflower::FILTER_LIGHT,
			Block::WitherRose(_) => WitherRose::FILTER_LIGHT,
			Block::LilyOfTheValley(_) => LilyOfTheValley::FILTER_LIGHT,
			Block::BrownMushroom(_) => BrownMushroom::FILTER_LIGHT,
			Block::RedMushroom(_) => RedMushroom::FILTER_LIGHT,
			Block::GoldBlock(_) => GoldBlock::FILTER_LIGHT,
			Block::IronBlock(_) => IronBlock::FILTER_LIGHT,
			Block::Bricks(_) => Bricks::FILTER_LIGHT,
			Block::Tnt(_) => Tnt::FILTER_LIGHT,
			Block::Bookshelf(_) => Bookshelf::FILTER_LIGHT,
			Block::MossyCobblestone(_) => MossyCobblestone::FILTER_LIGHT,
			Block::Obsidian(_) => Obsidian::FILTER_LIGHT,
			Block::Torch(_) => Torch::FILTER_LIGHT,
			Block::WallTorch(_) => WallTorch::FILTER_LIGHT,
			Block::Fire(_) => Fire::FILTER_LIGHT,
			Block::SoulFire(_) => SoulFire::FILTER_LIGHT,
			Block::Spawner(_) => Spawner::FILTER_LIGHT,
			Block::OakStairs(_) => OakStairs::FILTER_LIGHT,
			Block::Chest(_) => Chest::FILTER_LIGHT,
			Block::RedstoneWire(_) => RedstoneWire::FILTER_LIGHT,
			Block::DiamondOre(_) => DiamondOre::FILTER_LIGHT,
			Block::DeepslateDiamondOre(_) => DeepslateDiamondOre::FILTER_LIGHT,
			Block::DiamondBlock(_) => DiamondBlock::FILTER_LIGHT,
			Block::CraftingTable(_) => CraftingTable::FILTER_LIGHT,
			Block::Wheat(_) => Wheat::FILTER_LIGHT,
			Block::Farmland(_) => Farmland::FILTER_LIGHT,
			Block::Furnace(_) => Furnace::FILTER_LIGHT,
			Block::OakSign(_) => OakSign::FILTER_LIGHT,
			Block::SpruceSign(_) => SpruceSign::FILTER_LIGHT,
			Block::BirchSign(_) => BirchSign::FILTER_LIGHT,
			Block::AcaciaSign(_) => AcaciaSign::FILTER_LIGHT,
			Block::JungleSign(_) => JungleSign::FILTER_LIGHT,
			Block::DarkOakSign(_) => DarkOakSign::FILTER_LIGHT,
			Block::MangroveSign(_) => MangroveSign::FILTER_LIGHT,
			Block::OakDoor(_) => OakDoor::FILTER_LIGHT,
			Block::Ladder(_) => Ladder::FILTER_LIGHT,
			Block::Rail(_) => Rail::FILTER_LIGHT,
			Block::CobblestoneStairs(_) => CobblestoneStairs::FILTER_LIGHT,
			Block::OakWallSign(_) => OakWallSign::FILTER_LIGHT,
			Block::SpruceWallSign(_) => SpruceWallSign::FILTER_LIGHT,
			Block::BirchWallSign(_) => BirchWallSign::FILTER_LIGHT,
			Block::AcaciaWallSign(_) => AcaciaWallSign::FILTER_LIGHT,
			Block::JungleWallSign(_) => JungleWallSign::FILTER_LIGHT,
			Block::DarkOakWallSign(_) => DarkOakWallSign::FILTER_LIGHT,
			Block::MangroveWallSign(_) => MangroveWallSign::FILTER_LIGHT,
			Block::Lever(_) => Lever::FILTER_LIGHT,
			Block::StonePressurePlate(_) => StonePressurePlate::FILTER_LIGHT,
			Block::IronDoor(_) => IronDoor::FILTER_LIGHT,
			Block::OakPressurePlate(_) => OakPressurePlate::FILTER_LIGHT,
			Block::SprucePressurePlate(_) => SprucePressurePlate::FILTER_LIGHT,
			Block::BirchPressurePlate(_) => BirchPressurePlate::FILTER_LIGHT,
			Block::JunglePressurePlate(_) => JunglePressurePlate::FILTER_LIGHT,
			Block::AcaciaPressurePlate(_) => AcaciaPressurePlate::FILTER_LIGHT,
			Block::DarkOakPressurePlate(_) => DarkOakPressurePlate::FILTER_LIGHT,
			Block::MangrovePressurePlate(_) => MangrovePressurePlate::FILTER_LIGHT,
			Block::RedstoneOre(_) => RedstoneOre::FILTER_LIGHT,
			Block::DeepslateRedstoneOre(_) => DeepslateRedstoneOre::FILTER_LIGHT,
			Block::RedstoneTorch(_) => RedstoneTorch::FILTER_LIGHT,
			Block::RedstoneWallTorch(_) => RedstoneWallTorch::FILTER_LIGHT,
			Block::StoneButton(_) => StoneButton::FILTER_LIGHT,
			Block::Snow(_) => Snow::FILTER_LIGHT,
			Block::Ice(_) => Ice::FILTER_LIGHT,
			Block::SnowBlock(_) => SnowBlock::FILTER_LIGHT,
			Block::Cactus(_) => Cactus::FILTER_LIGHT,
			Block::Clay(_) => Clay::FILTER_LIGHT,
			Block::SugarCane(_) => SugarCane::FILTER_LIGHT,
			Block::Jukebox(_) => Jukebox::FILTER_LIGHT,
			Block::OakFence(_) => OakFence::FILTER_LIGHT,
			Block::Pumpkin(_) => Pumpkin::FILTER_LIGHT,
			Block::Netherrack(_) => Netherrack::FILTER_LIGHT,
			Block::SoulSand(_) => SoulSand::FILTER_LIGHT,
			Block::SoulSoil(_) => SoulSoil::FILTER_LIGHT,
			Block::Basalt(_) => Basalt::FILTER_LIGHT,
			Block::PolishedBasalt(_) => PolishedBasalt::FILTER_LIGHT,
			Block::SoulTorch(_) => SoulTorch::FILTER_LIGHT,
			Block::SoulWallTorch(_) => SoulWallTorch::FILTER_LIGHT,
			Block::Glowstone(_) => Glowstone::FILTER_LIGHT,
			Block::NetherPortal(_) => NetherPortal::FILTER_LIGHT,
			Block::CarvedPumpkin(_) => CarvedPumpkin::FILTER_LIGHT,
			Block::JackOLantern(_) => JackOLantern::FILTER_LIGHT,
			Block::Cake(_) => Cake::FILTER_LIGHT,
			Block::Repeater(_) => Repeater::FILTER_LIGHT,
			Block::WhiteStainedGlass(_) => WhiteStainedGlass::FILTER_LIGHT,
			Block::OrangeStainedGlass(_) => OrangeStainedGlass::FILTER_LIGHT,
			Block::MagentaStainedGlass(_) => MagentaStainedGlass::FILTER_LIGHT,
			Block::LightBlueStainedGlass(_) => LightBlueStainedGlass::FILTER_LIGHT,
			Block::YellowStainedGlass(_) => YellowStainedGlass::FILTER_LIGHT,
			Block::LimeStainedGlass(_) => LimeStainedGlass::FILTER_LIGHT,
			Block::PinkStainedGlass(_) => PinkStainedGlass::FILTER_LIGHT,
			Block::GrayStainedGlass(_) => GrayStainedGlass::FILTER_LIGHT,
			Block::LightGrayStainedGlass(_) => LightGrayStainedGlass::FILTER_LIGHT,
			Block::CyanStainedGlass(_) => CyanStainedGlass::FILTER_LIGHT,
			Block::PurpleStainedGlass(_) => PurpleStainedGlass::FILTER_LIGHT,
			Block::BlueStainedGlass(_) => BlueStainedGlass::FILTER_LIGHT,
			Block::BrownStainedGlass(_) => BrownStainedGlass::FILTER_LIGHT,
			Block::GreenStainedGlass(_) => GreenStainedGlass::FILTER_LIGHT,
			Block::RedStainedGlass(_) => RedStainedGlass::FILTER_LIGHT,
			Block::BlackStainedGlass(_) => BlackStainedGlass::FILTER_LIGHT,
			Block::OakTrapdoor(_) => OakTrapdoor::FILTER_LIGHT,
			Block::SpruceTrapdoor(_) => SpruceTrapdoor::FILTER_LIGHT,
			Block::BirchTrapdoor(_) => BirchTrapdoor::FILTER_LIGHT,
			Block::JungleTrapdoor(_) => JungleTrapdoor::FILTER_LIGHT,
			Block::AcaciaTrapdoor(_) => AcaciaTrapdoor::FILTER_LIGHT,
			Block::DarkOakTrapdoor(_) => DarkOakTrapdoor::FILTER_LIGHT,
			Block::MangroveTrapdoor(_) => MangroveTrapdoor::FILTER_LIGHT,
			Block::StoneBricks(_) => StoneBricks::FILTER_LIGHT,
			Block::MossyStoneBricks(_) => MossyStoneBricks::FILTER_LIGHT,
			Block::CrackedStoneBricks(_) => CrackedStoneBricks::FILTER_LIGHT,
			Block::ChiseledStoneBricks(_) => ChiseledStoneBricks::FILTER_LIGHT,
			Block::PackedMud(_) => PackedMud::FILTER_LIGHT,
			Block::MudBricks(_) => MudBricks::FILTER_LIGHT,
			Block::InfestedStone(_) => InfestedStone::FILTER_LIGHT,
			Block::InfestedCobblestone(_) => InfestedCobblestone::FILTER_LIGHT,
			Block::InfestedStoneBricks(_) => InfestedStoneBricks::FILTER_LIGHT,
			Block::InfestedMossyStoneBricks(_) => InfestedMossyStoneBricks::FILTER_LIGHT,
			Block::InfestedCrackedStoneBricks(_) => InfestedCrackedStoneBricks::FILTER_LIGHT,
			Block::InfestedChiseledStoneBricks(_) => InfestedChiseledStoneBricks::FILTER_LIGHT,
			Block::BrownMushroomBlock(_) => BrownMushroomBlock::FILTER_LIGHT,
			Block::RedMushroomBlock(_) => RedMushroomBlock::FILTER_LIGHT,
			Block::MushroomStem(_) => MushroomStem::FILTER_LIGHT,
			Block::IronBars(_) => IronBars::FILTER_LIGHT,
			Block::Chain(_) => Chain::FILTER_LIGHT,
			Block::GlassPane(_) => GlassPane::FILTER_LIGHT,
			Block::Melon(_) => Melon::FILTER_LIGHT,
			Block::AttachedPumpkinStem(_) => AttachedPumpkinStem::FILTER_LIGHT,
			Block::AttachedMelonStem(_) => AttachedMelonStem::FILTER_LIGHT,
			Block::PumpkinStem(_) => PumpkinStem::FILTER_LIGHT,
			Block::MelonStem(_) => MelonStem::FILTER_LIGHT,
			Block::Vine(_) => Vine::FILTER_LIGHT,
			Block::GlowLichen(_) => GlowLichen::FILTER_LIGHT,
			Block::OakFenceGate(_) => OakFenceGate::FILTER_LIGHT,
			Block::BrickStairs(_) => BrickStairs::FILTER_LIGHT,
			Block::StoneBrickStairs(_) => StoneBrickStairs::FILTER_LIGHT,
			Block::MudBrickStairs(_) => MudBrickStairs::FILTER_LIGHT,
			Block::Mycelium(_) => Mycelium::FILTER_LIGHT,
			Block::LilyPad(_) => LilyPad::FILTER_LIGHT,
			Block::NetherBricks(_) => NetherBricks::FILTER_LIGHT,
			Block::NetherBrickFence(_) => NetherBrickFence::FILTER_LIGHT,
			Block::NetherBrickStairs(_) => NetherBrickStairs::FILTER_LIGHT,
			Block::NetherWart(_) => NetherWart::FILTER_LIGHT,
			Block::EnchantingTable(_) => EnchantingTable::FILTER_LIGHT,
			Block::BrewingStand(_) => BrewingStand::FILTER_LIGHT,
			Block::Cauldron(_) => Cauldron::FILTER_LIGHT,
			Block::WaterCauldron(_) => WaterCauldron::FILTER_LIGHT,
			Block::LavaCauldron(_) => LavaCauldron::FILTER_LIGHT,
			Block::PowderSnowCauldron(_) => PowderSnowCauldron::FILTER_LIGHT,
			Block::EndPortal(_) => EndPortal::FILTER_LIGHT,
			Block::EndPortalFrame(_) => EndPortalFrame::FILTER_LIGHT,
			Block::EndStone(_) => EndStone::FILTER_LIGHT,
			Block::DragonEgg(_) => DragonEgg::FILTER_LIGHT,
			Block::RedstoneLamp(_) => RedstoneLamp::FILTER_LIGHT,
			Block::Cocoa(_) => Cocoa::FILTER_LIGHT,
			Block::SandstoneStairs(_) => SandstoneStairs::FILTER_LIGHT,
			Block::EmeraldOre(_) => EmeraldOre::FILTER_LIGHT,
			Block::DeepslateEmeraldOre(_) => DeepslateEmeraldOre::FILTER_LIGHT,
			Block::EnderChest(_) => EnderChest::FILTER_LIGHT,
			Block::TripwireHook(_) => TripwireHook::FILTER_LIGHT,
			Block::Tripwire(_) => Tripwire::FILTER_LIGHT,
			Block::EmeraldBlock(_) => EmeraldBlock::FILTER_LIGHT,
			Block::SpruceStairs(_) => SpruceStairs::FILTER_LIGHT,
			Block::BirchStairs(_) => BirchStairs::FILTER_LIGHT,
			Block::JungleStairs(_) => JungleStairs::FILTER_LIGHT,
			Block::CommandBlock(_) => CommandBlock::FILTER_LIGHT,
			Block::Beacon(_) => Beacon::FILTER_LIGHT,
			Block::CobblestoneWall(_) => CobblestoneWall::FILTER_LIGHT,
			Block::MossyCobblestoneWall(_) => MossyCobblestoneWall::FILTER_LIGHT,
			Block::FlowerPot(_) => FlowerPot::FILTER_LIGHT,
			Block::PottedOakSapling(_) => PottedOakSapling::FILTER_LIGHT,
			Block::PottedSpruceSapling(_) => PottedSpruceSapling::FILTER_LIGHT,
			Block::PottedBirchSapling(_) => PottedBirchSapling::FILTER_LIGHT,
			Block::PottedJungleSapling(_) => PottedJungleSapling::FILTER_LIGHT,
			Block::PottedAcaciaSapling(_) => PottedAcaciaSapling::FILTER_LIGHT,
			Block::PottedDarkOakSapling(_) => PottedDarkOakSapling::FILTER_LIGHT,
			Block::PottedMangrovePropagule(_) => PottedMangrovePropagule::FILTER_LIGHT,
			Block::PottedFern(_) => PottedFern::FILTER_LIGHT,
			Block::PottedDandelion(_) => PottedDandelion::FILTER_LIGHT,
			Block::PottedPoppy(_) => PottedPoppy::FILTER_LIGHT,
			Block::PottedBlueOrchid(_) => PottedBlueOrchid::FILTER_LIGHT,
			Block::PottedAllium(_) => PottedAllium::FILTER_LIGHT,
			Block::PottedAzureBluet(_) => PottedAzureBluet::FILTER_LIGHT,
			Block::PottedRedTulip(_) => PottedRedTulip::FILTER_LIGHT,
			Block::PottedOrangeTulip(_) => PottedOrangeTulip::FILTER_LIGHT,
			Block::PottedWhiteTulip(_) => PottedWhiteTulip::FILTER_LIGHT,
			Block::PottedPinkTulip(_) => PottedPinkTulip::FILTER_LIGHT,
			Block::PottedOxeyeDaisy(_) => PottedOxeyeDaisy::FILTER_LIGHT,
			Block::PottedCornflower(_) => PottedCornflower::FILTER_LIGHT,
			Block::PottedLilyOfTheValley(_) => PottedLilyOfTheValley::FILTER_LIGHT,
			Block::PottedWitherRose(_) => PottedWitherRose::FILTER_LIGHT,
			Block::PottedRedMushroom(_) => PottedRedMushroom::FILTER_LIGHT,
			Block::PottedBrownMushroom(_) => PottedBrownMushroom::FILTER_LIGHT,
			Block::PottedDeadBush(_) => PottedDeadBush::FILTER_LIGHT,
			Block::PottedCactus(_) => PottedCactus::FILTER_LIGHT,
			Block::Carrots(_) => Carrots::FILTER_LIGHT,
			Block::Potatoes(_) => Potatoes::FILTER_LIGHT,
			Block::OakButton(_) => OakButton::FILTER_LIGHT,
			Block::SpruceButton(_) => SpruceButton::FILTER_LIGHT,
			Block::BirchButton(_) => BirchButton::FILTER_LIGHT,
			Block::JungleButton(_) => JungleButton::FILTER_LIGHT,
			Block::AcaciaButton(_) => AcaciaButton::FILTER_LIGHT,
			Block::DarkOakButton(_) => DarkOakButton::FILTER_LIGHT,
			Block::MangroveButton(_) => MangroveButton::FILTER_LIGHT,
			Block::SkeletonSkull(_) => SkeletonSkull::FILTER_LIGHT,
			Block::SkeletonWallSkull(_) => SkeletonWallSkull::FILTER_LIGHT,
			Block::WitherSkeletonSkull(_) => WitherSkeletonSkull::FILTER_LIGHT,
			Block::WitherSkeletonWallSkull(_) => WitherSkeletonWallSkull::FILTER_LIGHT,
			Block::ZombieHead(_) => ZombieHead::FILTER_LIGHT,
			Block::ZombieWallHead(_) => ZombieWallHead::FILTER_LIGHT,
			Block::PlayerHead(_) => PlayerHead::FILTER_LIGHT,
			Block::PlayerWallHead(_) => PlayerWallHead::FILTER_LIGHT,
			Block::CreeperHead(_) => CreeperHead::FILTER_LIGHT,
			Block::CreeperWallHead(_) => CreeperWallHead::FILTER_LIGHT,
			Block::DragonHead(_) => DragonHead::FILTER_LIGHT,
			Block::DragonWallHead(_) => DragonWallHead::FILTER_LIGHT,
			Block::Anvil(_) => Anvil::FILTER_LIGHT,
			Block::ChippedAnvil(_) => ChippedAnvil::FILTER_LIGHT,
			Block::DamagedAnvil(_) => DamagedAnvil::FILTER_LIGHT,
			Block::TrappedChest(_) => TrappedChest::FILTER_LIGHT,
			Block::LightWeightedPressurePlate(_) => LightWeightedPressurePlate::FILTER_LIGHT,
			Block::HeavyWeightedPressurePlate(_) => HeavyWeightedPressurePlate::FILTER_LIGHT,
			Block::Comparator(_) => Comparator::FILTER_LIGHT,
			Block::DaylightDetector(_) => DaylightDetector::FILTER_LIGHT,
			Block::RedstoneBlock(_) => RedstoneBlock::FILTER_LIGHT,
			Block::NetherQuartzOre(_) => NetherQuartzOre::FILTER_LIGHT,
			Block::Hopper(_) => Hopper::FILTER_LIGHT,
			Block::QuartzBlock(_) => QuartzBlock::FILTER_LIGHT,
			Block::ChiseledQuartzBlock(_) => ChiseledQuartzBlock::FILTER_LIGHT,
			Block::QuartzPillar(_) => QuartzPillar::FILTER_LIGHT,
			Block::QuartzStairs(_) => QuartzStairs::FILTER_LIGHT,
			Block::ActivatorRail(_) => ActivatorRail::FILTER_LIGHT,
			Block::Dropper(_) => Dropper::FILTER_LIGHT,
			Block::WhiteTerracotta(_) => WhiteTerracotta::FILTER_LIGHT,
			Block::OrangeTerracotta(_) => OrangeTerracotta::FILTER_LIGHT,
			Block::MagentaTerracotta(_) => MagentaTerracotta::FILTER_LIGHT,
			Block::LightBlueTerracotta(_) => LightBlueTerracotta::FILTER_LIGHT,
			Block::YellowTerracotta(_) => YellowTerracotta::FILTER_LIGHT,
			Block::LimeTerracotta(_) => LimeTerracotta::FILTER_LIGHT,
			Block::PinkTerracotta(_) => PinkTerracotta::FILTER_LIGHT,
			Block::GrayTerracotta(_) => GrayTerracotta::FILTER_LIGHT,
			Block::LightGrayTerracotta(_) => LightGrayTerracotta::FILTER_LIGHT,
			Block::CyanTerracotta(_) => CyanTerracotta::FILTER_LIGHT,
			Block::PurpleTerracotta(_) => PurpleTerracotta::FILTER_LIGHT,
			Block::BlueTerracotta(_) => BlueTerracotta::FILTER_LIGHT,
			Block::BrownTerracotta(_) => BrownTerracotta::FILTER_LIGHT,
			Block::GreenTerracotta(_) => GreenTerracotta::FILTER_LIGHT,
			Block::RedTerracotta(_) => RedTerracotta::FILTER_LIGHT,
			Block::BlackTerracotta(_) => BlackTerracotta::FILTER_LIGHT,
			Block::WhiteStainedGlassPane(_) => WhiteStainedGlassPane::FILTER_LIGHT,
			Block::OrangeStainedGlassPane(_) => OrangeStainedGlassPane::FILTER_LIGHT,
			Block::MagentaStainedGlassPane(_) => MagentaStainedGlassPane::FILTER_LIGHT,
			Block::LightBlueStainedGlassPane(_) => LightBlueStainedGlassPane::FILTER_LIGHT,
			Block::YellowStainedGlassPane(_) => YellowStainedGlassPane::FILTER_LIGHT,
			Block::LimeStainedGlassPane(_) => LimeStainedGlassPane::FILTER_LIGHT,
			Block::PinkStainedGlassPane(_) => PinkStainedGlassPane::FILTER_LIGHT,
			Block::GrayStainedGlassPane(_) => GrayStainedGlassPane::FILTER_LIGHT,
			Block::LightGrayStainedGlassPane(_) => LightGrayStainedGlassPane::FILTER_LIGHT,
			Block::CyanStainedGlassPane(_) => CyanStainedGlassPane::FILTER_LIGHT,
			Block::PurpleStainedGlassPane(_) => PurpleStainedGlassPane::FILTER_LIGHT,
			Block::BlueStainedGlassPane(_) => BlueStainedGlassPane::FILTER_LIGHT,
			Block::BrownStainedGlassPane(_) => BrownStainedGlassPane::FILTER_LIGHT,
			Block::GreenStainedGlassPane(_) => GreenStainedGlassPane::FILTER_LIGHT,
			Block::RedStainedGlassPane(_) => RedStainedGlassPane::FILTER_LIGHT,
			Block::BlackStainedGlassPane(_) => BlackStainedGlassPane::FILTER_LIGHT,
			Block::AcaciaStairs(_) => AcaciaStairs::FILTER_LIGHT,
			Block::DarkOakStairs(_) => DarkOakStairs::FILTER_LIGHT,
			Block::MangroveStairs(_) => MangroveStairs::FILTER_LIGHT,
			Block::SlimeBlock(_) => SlimeBlock::FILTER_LIGHT,
			Block::Barrier(_) => Barrier::FILTER_LIGHT,
			Block::Light(_) => Light::FILTER_LIGHT,
			Block::IronTrapdoor(_) => IronTrapdoor::FILTER_LIGHT,
			Block::Prismarine(_) => Prismarine::FILTER_LIGHT,
			Block::PrismarineBricks(_) => PrismarineBricks::FILTER_LIGHT,
			Block::DarkPrismarine(_) => DarkPrismarine::FILTER_LIGHT,
			Block::PrismarineStairs(_) => PrismarineStairs::FILTER_LIGHT,
			Block::PrismarineBrickStairs(_) => PrismarineBrickStairs::FILTER_LIGHT,
			Block::DarkPrismarineStairs(_) => DarkPrismarineStairs::FILTER_LIGHT,
			Block::PrismarineSlab(_) => PrismarineSlab::FILTER_LIGHT,
			Block::PrismarineBrickSlab(_) => PrismarineBrickSlab::FILTER_LIGHT,
			Block::DarkPrismarineSlab(_) => DarkPrismarineSlab::FILTER_LIGHT,
			Block::SeaLantern(_) => SeaLantern::FILTER_LIGHT,
			Block::HayBlock(_) => HayBlock::FILTER_LIGHT,
			Block::WhiteCarpet(_) => WhiteCarpet::FILTER_LIGHT,
			Block::OrangeCarpet(_) => OrangeCarpet::FILTER_LIGHT,
			Block::MagentaCarpet(_) => MagentaCarpet::FILTER_LIGHT,
			Block::LightBlueCarpet(_) => LightBlueCarpet::FILTER_LIGHT,
			Block::YellowCarpet(_) => YellowCarpet::FILTER_LIGHT,
			Block::LimeCarpet(_) => LimeCarpet::FILTER_LIGHT,
			Block::PinkCarpet(_) => PinkCarpet::FILTER_LIGHT,
			Block::GrayCarpet(_) => GrayCarpet::FILTER_LIGHT,
			Block::LightGrayCarpet(_) => LightGrayCarpet::FILTER_LIGHT,
			Block::CyanCarpet(_) => CyanCarpet::FILTER_LIGHT,
			Block::PurpleCarpet(_) => PurpleCarpet::FILTER_LIGHT,
			Block::BlueCarpet(_) => BlueCarpet::FILTER_LIGHT,
			Block::BrownCarpet(_) => BrownCarpet::FILTER_LIGHT,
			Block::GreenCarpet(_) => GreenCarpet::FILTER_LIGHT,
			Block::RedCarpet(_) => RedCarpet::FILTER_LIGHT,
			Block::BlackCarpet(_) => BlackCarpet::FILTER_LIGHT,
			Block::Terracotta(_) => Terracotta::FILTER_LIGHT,
			Block::CoalBlock(_) => CoalBlock::FILTER_LIGHT,
			Block::PackedIce(_) => PackedIce::FILTER_LIGHT,
			Block::Sunflower(_) => Sunflower::FILTER_LIGHT,
			Block::Lilac(_) => Lilac::FILTER_LIGHT,
			Block::RoseBush(_) => RoseBush::FILTER_LIGHT,
			Block::Peony(_) => Peony::FILTER_LIGHT,
			Block::TallGrass(_) => TallGrass::FILTER_LIGHT,
			Block::LargeFern(_) => LargeFern::FILTER_LIGHT,
			Block::WhiteBanner(_) => WhiteBanner::FILTER_LIGHT,
			Block::OrangeBanner(_) => OrangeBanner::FILTER_LIGHT,
			Block::MagentaBanner(_) => MagentaBanner::FILTER_LIGHT,
			Block::LightBlueBanner(_) => LightBlueBanner::FILTER_LIGHT,
			Block::YellowBanner(_) => YellowBanner::FILTER_LIGHT,
			Block::LimeBanner(_) => LimeBanner::FILTER_LIGHT,
			Block::PinkBanner(_) => PinkBanner::FILTER_LIGHT,
			Block::GrayBanner(_) => GrayBanner::FILTER_LIGHT,
			Block::LightGrayBanner(_) => LightGrayBanner::FILTER_LIGHT,
			Block::CyanBanner(_) => CyanBanner::FILTER_LIGHT,
			Block::PurpleBanner(_) => PurpleBanner::FILTER_LIGHT,
			Block::BlueBanner(_) => BlueBanner::FILTER_LIGHT,
			Block::BrownBanner(_) => BrownBanner::FILTER_LIGHT,
			Block::GreenBanner(_) => GreenBanner::FILTER_LIGHT,
			Block::RedBanner(_) => RedBanner::FILTER_LIGHT,
			Block::BlackBanner(_) => BlackBanner::FILTER_LIGHT,
			Block::WhiteWallBanner(_) => WhiteWallBanner::FILTER_LIGHT,
			Block::OrangeWallBanner(_) => OrangeWallBanner::FILTER_LIGHT,
			Block::MagentaWallBanner(_) => MagentaWallBanner::FILTER_LIGHT,
			Block::LightBlueWallBanner(_) => LightBlueWallBanner::FILTER_LIGHT,
			Block::YellowWallBanner(_) => YellowWallBanner::FILTER_LIGHT,
			Block::LimeWallBanner(_) => LimeWallBanner::FILTER_LIGHT,
			Block::PinkWallBanner(_) => PinkWallBanner::FILTER_LIGHT,
			Block::GrayWallBanner(_) => GrayWallBanner::FILTER_LIGHT,
			Block::LightGrayWallBanner(_) => LightGrayWallBanner::FILTER_LIGHT,
			Block::CyanWallBanner(_) => CyanWallBanner::FILTER_LIGHT,
			Block::PurpleWallBanner(_) => PurpleWallBanner::FILTER_LIGHT,
			Block::BlueWallBanner(_) => BlueWallBanner::FILTER_LIGHT,
			Block::BrownWallBanner(_) => BrownWallBanner::FILTER_LIGHT,
			Block::GreenWallBanner(_) => GreenWallBanner::FILTER_LIGHT,
			Block::RedWallBanner(_) => RedWallBanner::FILTER_LIGHT,
			Block::BlackWallBanner(_) => BlackWallBanner::FILTER_LIGHT,
			Block::RedSandstone(_) => RedSandstone::FILTER_LIGHT,
			Block::ChiseledRedSandstone(_) => ChiseledRedSandstone::FILTER_LIGHT,
			Block::CutRedSandstone(_) => CutRedSandstone::FILTER_LIGHT,
			Block::RedSandstoneStairs(_) => RedSandstoneStairs::FILTER_LIGHT,
			Block::OakSlab(_) => OakSlab::FILTER_LIGHT,
			Block::SpruceSlab(_) => SpruceSlab::FILTER_LIGHT,
			Block::BirchSlab(_) => BirchSlab::FILTER_LIGHT,
			Block::JungleSlab(_) => JungleSlab::FILTER_LIGHT,
			Block::AcaciaSlab(_) => AcaciaSlab::FILTER_LIGHT,
			Block::DarkOakSlab(_) => DarkOakSlab::FILTER_LIGHT,
			Block::MangroveSlab(_) => MangroveSlab::FILTER_LIGHT,
			Block::StoneSlab(_) => StoneSlab::FILTER_LIGHT,
			Block::SmoothStoneSlab(_) => SmoothStoneSlab::FILTER_LIGHT,
			Block::SandstoneSlab(_) => SandstoneSlab::FILTER_LIGHT,
			Block::CutSandstoneSlab(_) => CutSandstoneSlab::FILTER_LIGHT,
			Block::PetrifiedOakSlab(_) => PetrifiedOakSlab::FILTER_LIGHT,
			Block::CobblestoneSlab(_) => CobblestoneSlab::FILTER_LIGHT,
			Block::BrickSlab(_) => BrickSlab::FILTER_LIGHT,
			Block::StoneBrickSlab(_) => StoneBrickSlab::FILTER_LIGHT,
			Block::MudBrickSlab(_) => MudBrickSlab::FILTER_LIGHT,
			Block::NetherBrickSlab(_) => NetherBrickSlab::FILTER_LIGHT,
			Block::QuartzSlab(_) => QuartzSlab::FILTER_LIGHT,
			Block::RedSandstoneSlab(_) => RedSandstoneSlab::FILTER_LIGHT,
			Block::CutRedSandstoneSlab(_) => CutRedSandstoneSlab::FILTER_LIGHT,
			Block::PurpurSlab(_) => PurpurSlab::FILTER_LIGHT,
			Block::SmoothStone(_) => SmoothStone::FILTER_LIGHT,
			Block::SmoothSandstone(_) => SmoothSandstone::FILTER_LIGHT,
			Block::SmoothQuartz(_) => SmoothQuartz::FILTER_LIGHT,
			Block::SmoothRedSandstone(_) => SmoothRedSandstone::FILTER_LIGHT,
			Block::SpruceFenceGate(_) => SpruceFenceGate::FILTER_LIGHT,
			Block::BirchFenceGate(_) => BirchFenceGate::FILTER_LIGHT,
			Block::JungleFenceGate(_) => JungleFenceGate::FILTER_LIGHT,
			Block::AcaciaFenceGate(_) => AcaciaFenceGate::FILTER_LIGHT,
			Block::DarkOakFenceGate(_) => DarkOakFenceGate::FILTER_LIGHT,
			Block::MangroveFenceGate(_) => MangroveFenceGate::FILTER_LIGHT,
			Block::SpruceFence(_) => SpruceFence::FILTER_LIGHT,
			Block::BirchFence(_) => BirchFence::FILTER_LIGHT,
			Block::JungleFence(_) => JungleFence::FILTER_LIGHT,
			Block::AcaciaFence(_) => AcaciaFence::FILTER_LIGHT,
			Block::DarkOakFence(_) => DarkOakFence::FILTER_LIGHT,
			Block::MangroveFence(_) => MangroveFence::FILTER_LIGHT,
			Block::SpruceDoor(_) => SpruceDoor::FILTER_LIGHT,
			Block::BirchDoor(_) => BirchDoor::FILTER_LIGHT,
			Block::JungleDoor(_) => JungleDoor::FILTER_LIGHT,
			Block::AcaciaDoor(_) => AcaciaDoor::FILTER_LIGHT,
			Block::DarkOakDoor(_) => DarkOakDoor::FILTER_LIGHT,
			Block::MangroveDoor(_) => MangroveDoor::FILTER_LIGHT,
			Block::EndRod(_) => EndRod::FILTER_LIGHT,
			Block::ChorusPlant(_) => ChorusPlant::FILTER_LIGHT,
			Block::ChorusFlower(_) => ChorusFlower::FILTER_LIGHT,
			Block::PurpurBlock(_) => PurpurBlock::FILTER_LIGHT,
			Block::PurpurPillar(_) => PurpurPillar::FILTER_LIGHT,
			Block::PurpurStairs(_) => PurpurStairs::FILTER_LIGHT,
			Block::EndStoneBricks(_) => EndStoneBricks::FILTER_LIGHT,
			Block::Beetroots(_) => Beetroots::FILTER_LIGHT,
			Block::DirtPath(_) => DirtPath::FILTER_LIGHT,
			Block::EndGateway(_) => EndGateway::FILTER_LIGHT,
			Block::RepeatingCommandBlock(_) => RepeatingCommandBlock::FILTER_LIGHT,
			Block::ChainCommandBlock(_) => ChainCommandBlock::FILTER_LIGHT,
			Block::FrostedIce(_) => FrostedIce::FILTER_LIGHT,
			Block::MagmaBlock(_) => MagmaBlock::FILTER_LIGHT,
			Block::NetherWartBlock(_) => NetherWartBlock::FILTER_LIGHT,
			Block::RedNetherBricks(_) => RedNetherBricks::FILTER_LIGHT,
			Block::BoneBlock(_) => BoneBlock::FILTER_LIGHT,
			Block::StructureVoid(_) => StructureVoid::FILTER_LIGHT,
			Block::Observer(_) => Observer::FILTER_LIGHT,
			Block::ShulkerBox(_) => ShulkerBox::FILTER_LIGHT,
			Block::WhiteShulkerBox(_) => WhiteShulkerBox::FILTER_LIGHT,
			Block::OrangeShulkerBox(_) => OrangeShulkerBox::FILTER_LIGHT,
			Block::MagentaShulkerBox(_) => MagentaShulkerBox::FILTER_LIGHT,
			Block::LightBlueShulkerBox(_) => LightBlueShulkerBox::FILTER_LIGHT,
			Block::YellowShulkerBox(_) => YellowShulkerBox::FILTER_LIGHT,
			Block::LimeShulkerBox(_) => LimeShulkerBox::FILTER_LIGHT,
			Block::PinkShulkerBox(_) => PinkShulkerBox::FILTER_LIGHT,
			Block::GrayShulkerBox(_) => GrayShulkerBox::FILTER_LIGHT,
			Block::LightGrayShulkerBox(_) => LightGrayShulkerBox::FILTER_LIGHT,
			Block::CyanShulkerBox(_) => CyanShulkerBox::FILTER_LIGHT,
			Block::PurpleShulkerBox(_) => PurpleShulkerBox::FILTER_LIGHT,
			Block::BlueShulkerBox(_) => BlueShulkerBox::FILTER_LIGHT,
			Block::BrownShulkerBox(_) => BrownShulkerBox::FILTER_LIGHT,
			Block::GreenShulkerBox(_) => GreenShulkerBox::FILTER_LIGHT,
			Block::RedShulkerBox(_) => RedShulkerBox::FILTER_LIGHT,
			Block::BlackShulkerBox(_) => BlackShulkerBox::FILTER_LIGHT,
			Block::WhiteGlazedTerracotta(_) => WhiteGlazedTerracotta::FILTER_LIGHT,
			Block::OrangeGlazedTerracotta(_) => OrangeGlazedTerracotta::FILTER_LIGHT,
			Block::MagentaGlazedTerracotta(_) => MagentaGlazedTerracotta::FILTER_LIGHT,
			Block::LightBlueGlazedTerracotta(_) => LightBlueGlazedTerracotta::FILTER_LIGHT,
			Block::YellowGlazedTerracotta(_) => YellowGlazedTerracotta::FILTER_LIGHT,
			Block::LimeGlazedTerracotta(_) => LimeGlazedTerracotta::FILTER_LIGHT,
			Block::PinkGlazedTerracotta(_) => PinkGlazedTerracotta::FILTER_LIGHT,
			Block::GrayGlazedTerracotta(_) => GrayGlazedTerracotta::FILTER_LIGHT,
			Block::LightGrayGlazedTerracotta(_) => LightGrayGlazedTerracotta::FILTER_LIGHT,
			Block::CyanGlazedTerracotta(_) => CyanGlazedTerracotta::FILTER_LIGHT,
			Block::PurpleGlazedTerracotta(_) => PurpleGlazedTerracotta::FILTER_LIGHT,
			Block::BlueGlazedTerracotta(_) => BlueGlazedTerracotta::FILTER_LIGHT,
			Block::BrownGlazedTerracotta(_) => BrownGlazedTerracotta::FILTER_LIGHT,
			Block::GreenGlazedTerracotta(_) => GreenGlazedTerracotta::FILTER_LIGHT,
			Block::RedGlazedTerracotta(_) => RedGlazedTerracotta::FILTER_LIGHT,
			Block::BlackGlazedTerracotta(_) => BlackGlazedTerracotta::FILTER_LIGHT,
			Block::WhiteConcrete(_) => WhiteConcrete::FILTER_LIGHT,
			Block::OrangeConcrete(_) => OrangeConcrete::FILTER_LIGHT,
			Block::MagentaConcrete(_) => MagentaConcrete::FILTER_LIGHT,
			Block::LightBlueConcrete(_) => LightBlueConcrete::FILTER_LIGHT,
			Block::YellowConcrete(_) => YellowConcrete::FILTER_LIGHT,
			Block::LimeConcrete(_) => LimeConcrete::FILTER_LIGHT,
			Block::PinkConcrete(_) => PinkConcrete::FILTER_LIGHT,
			Block::GrayConcrete(_) => GrayConcrete::FILTER_LIGHT,
			Block::LightGrayConcrete(_) => LightGrayConcrete::FILTER_LIGHT,
			Block::CyanConcrete(_) => CyanConcrete::FILTER_LIGHT,
			Block::PurpleConcrete(_) => PurpleConcrete::FILTER_LIGHT,
			Block::BlueConcrete(_) => BlueConcrete::FILTER_LIGHT,
			Block::BrownConcrete(_) => BrownConcrete::FILTER_LIGHT,
			Block::GreenConcrete(_) => GreenConcrete::FILTER_LIGHT,
			Block::RedConcrete(_) => RedConcrete::FILTER_LIGHT,
			Block::BlackConcrete(_) => BlackConcrete::FILTER_LIGHT,
			Block::WhiteConcretePowder(_) => WhiteConcretePowder::FILTER_LIGHT,
			Block::OrangeConcretePowder(_) => OrangeConcretePowder::FILTER_LIGHT,
			Block::MagentaConcretePowder(_) => MagentaConcretePowder::FILTER_LIGHT,
			Block::LightBlueConcretePowder(_) => LightBlueConcretePowder::FILTER_LIGHT,
			Block::YellowConcretePowder(_) => YellowConcretePowder::FILTER_LIGHT,
			Block::LimeConcretePowder(_) => LimeConcretePowder::FILTER_LIGHT,
			Block::PinkConcretePowder(_) => PinkConcretePowder::FILTER_LIGHT,
			Block::GrayConcretePowder(_) => GrayConcretePowder::FILTER_LIGHT,
			Block::LightGrayConcretePowder(_) => LightGrayConcretePowder::FILTER_LIGHT,
			Block::CyanConcretePowder(_) => CyanConcretePowder::FILTER_LIGHT,
			Block::PurpleConcretePowder(_) => PurpleConcretePowder::FILTER_LIGHT,
			Block::BlueConcretePowder(_) => BlueConcretePowder::FILTER_LIGHT,
			Block::BrownConcretePowder(_) => BrownConcretePowder::FILTER_LIGHT,
			Block::GreenConcretePowder(_) => GreenConcretePowder::FILTER_LIGHT,
			Block::RedConcretePowder(_) => RedConcretePowder::FILTER_LIGHT,
			Block::BlackConcretePowder(_) => BlackConcretePowder::FILTER_LIGHT,
			Block::Kelp(_) => Kelp::FILTER_LIGHT,
			Block::KelpPlant(_) => KelpPlant::FILTER_LIGHT,
			Block::DriedKelpBlock(_) => DriedKelpBlock::FILTER_LIGHT,
			Block::TurtleEgg(_) => TurtleEgg::FILTER_LIGHT,
			Block::DeadTubeCoralBlock(_) => DeadTubeCoralBlock::FILTER_LIGHT,
			Block::DeadBrainCoralBlock(_) => DeadBrainCoralBlock::FILTER_LIGHT,
			Block::DeadBubbleCoralBlock(_) => DeadBubbleCoralBlock::FILTER_LIGHT,
			Block::DeadFireCoralBlock(_) => DeadFireCoralBlock::FILTER_LIGHT,
			Block::DeadHornCoralBlock(_) => DeadHornCoralBlock::FILTER_LIGHT,
			Block::TubeCoralBlock(_) => TubeCoralBlock::FILTER_LIGHT,
			Block::BrainCoralBlock(_) => BrainCoralBlock::FILTER_LIGHT,
			Block::BubbleCoralBlock(_) => BubbleCoralBlock::FILTER_LIGHT,
			Block::FireCoralBlock(_) => FireCoralBlock::FILTER_LIGHT,
			Block::HornCoralBlock(_) => HornCoralBlock::FILTER_LIGHT,
			Block::DeadTubeCoral(_) => DeadTubeCoral::FILTER_LIGHT,
			Block::DeadBrainCoral(_) => DeadBrainCoral::FILTER_LIGHT,
			Block::DeadBubbleCoral(_) => DeadBubbleCoral::FILTER_LIGHT,
			Block::DeadFireCoral(_) => DeadFireCoral::FILTER_LIGHT,
			Block::DeadHornCoral(_) => DeadHornCoral::FILTER_LIGHT,
			Block::TubeCoral(_) => TubeCoral::FILTER_LIGHT,
			Block::BrainCoral(_) => BrainCoral::FILTER_LIGHT,
			Block::BubbleCoral(_) => BubbleCoral::FILTER_LIGHT,
			Block::FireCoral(_) => FireCoral::FILTER_LIGHT,
			Block::HornCoral(_) => HornCoral::FILTER_LIGHT,
			Block::DeadTubeCoralFan(_) => DeadTubeCoralFan::FILTER_LIGHT,
			Block::DeadBrainCoralFan(_) => DeadBrainCoralFan::FILTER_LIGHT,
			Block::DeadBubbleCoralFan(_) => DeadBubbleCoralFan::FILTER_LIGHT,
			Block::DeadFireCoralFan(_) => DeadFireCoralFan::FILTER_LIGHT,
			Block::DeadHornCoralFan(_) => DeadHornCoralFan::FILTER_LIGHT,
			Block::TubeCoralFan(_) => TubeCoralFan::FILTER_LIGHT,
			Block::BrainCoralFan(_) => BrainCoralFan::FILTER_LIGHT,
			Block::BubbleCoralFan(_) => BubbleCoralFan::FILTER_LIGHT,
			Block::FireCoralFan(_) => FireCoralFan::FILTER_LIGHT,
			Block::HornCoralFan(_) => HornCoralFan::FILTER_LIGHT,
			Block::DeadTubeCoralWallFan(_) => DeadTubeCoralWallFan::FILTER_LIGHT,
			Block::DeadBrainCoralWallFan(_) => DeadBrainCoralWallFan::FILTER_LIGHT,
			Block::DeadBubbleCoralWallFan(_) => DeadBubbleCoralWallFan::FILTER_LIGHT,
			Block::DeadFireCoralWallFan(_) => DeadFireCoralWallFan::FILTER_LIGHT,
			Block::DeadHornCoralWallFan(_) => DeadHornCoralWallFan::FILTER_LIGHT,
			Block::TubeCoralWallFan(_) => TubeCoralWallFan::FILTER_LIGHT,
			Block::BrainCoralWallFan(_) => BrainCoralWallFan::FILTER_LIGHT,
			Block::BubbleCoralWallFan(_) => BubbleCoralWallFan::FILTER_LIGHT,
			Block::FireCoralWallFan(_) => FireCoralWallFan::FILTER_LIGHT,
			Block::HornCoralWallFan(_) => HornCoralWallFan::FILTER_LIGHT,
			Block::SeaPickle(_) => SeaPickle::FILTER_LIGHT,
			Block::BlueIce(_) => BlueIce::FILTER_LIGHT,
			Block::Conduit(_) => Conduit::FILTER_LIGHT,
			Block::BambooSapling(_) => BambooSapling::FILTER_LIGHT,
			Block::Bamboo(_) => Bamboo::FILTER_LIGHT,
			Block::PottedBamboo(_) => PottedBamboo::FILTER_LIGHT,
			Block::VoidAir(_) => VoidAir::FILTER_LIGHT,
			Block::CaveAir(_) => CaveAir::FILTER_LIGHT,
			Block::BubbleColumn(_) => BubbleColumn::FILTER_LIGHT,
			Block::PolishedGraniteStairs(_) => PolishedGraniteStairs::FILTER_LIGHT,
			Block::SmoothRedSandstoneStairs(_) => SmoothRedSandstoneStairs::FILTER_LIGHT,
			Block::MossyStoneBrickStairs(_) => MossyStoneBrickStairs::FILTER_LIGHT,
			Block::PolishedDioriteStairs(_) => PolishedDioriteStairs::FILTER_LIGHT,
			Block::MossyCobblestoneStairs(_) => MossyCobblestoneStairs::FILTER_LIGHT,
			Block::EndStoneBrickStairs(_) => EndStoneBrickStairs::FILTER_LIGHT,
			Block::StoneStairs(_) => StoneStairs::FILTER_LIGHT,
			Block::SmoothSandstoneStairs(_) => SmoothSandstoneStairs::FILTER_LIGHT,
			Block::SmoothQuartzStairs(_) => SmoothQuartzStairs::FILTER_LIGHT,
			Block::GraniteStairs(_) => GraniteStairs::FILTER_LIGHT,
			Block::AndesiteStairs(_) => AndesiteStairs::FILTER_LIGHT,
			Block::RedNetherBrickStairs(_) => RedNetherBrickStairs::FILTER_LIGHT,
			Block::PolishedAndesiteStairs(_) => PolishedAndesiteStairs::FILTER_LIGHT,
			Block::DioriteStairs(_) => DioriteStairs::FILTER_LIGHT,
			Block::PolishedGraniteSlab(_) => PolishedGraniteSlab::FILTER_LIGHT,
			Block::SmoothRedSandstoneSlab(_) => SmoothRedSandstoneSlab::FILTER_LIGHT,
			Block::MossyStoneBrickSlab(_) => MossyStoneBrickSlab::FILTER_LIGHT,
			Block::PolishedDioriteSlab(_) => PolishedDioriteSlab::FILTER_LIGHT,
			Block::MossyCobblestoneSlab(_) => MossyCobblestoneSlab::FILTER_LIGHT,
			Block::EndStoneBrickSlab(_) => EndStoneBrickSlab::FILTER_LIGHT,
			Block::SmoothSandstoneSlab(_) => SmoothSandstoneSlab::FILTER_LIGHT,
			Block::SmoothQuartzSlab(_) => SmoothQuartzSlab::FILTER_LIGHT,
			Block::GraniteSlab(_) => GraniteSlab::FILTER_LIGHT,
			Block::AndesiteSlab(_) => AndesiteSlab::FILTER_LIGHT,
			Block::RedNetherBrickSlab(_) => RedNetherBrickSlab::FILTER_LIGHT,
			Block::PolishedAndesiteSlab(_) => PolishedAndesiteSlab::FILTER_LIGHT,
			Block::DioriteSlab(_) => DioriteSlab::FILTER_LIGHT,
			Block::BrickWall(_) => BrickWall::FILTER_LIGHT,
			Block::PrismarineWall(_) => PrismarineWall::FILTER_LIGHT,
			Block::RedSandstoneWall(_) => RedSandstoneWall::FILTER_LIGHT,
			Block::MossyStoneBrickWall(_) => MossyStoneBrickWall::FILTER_LIGHT,
			Block::GraniteWall(_) => GraniteWall::FILTER_LIGHT,
			Block::StoneBrickWall(_) => StoneBrickWall::FILTER_LIGHT,
			Block::MudBrickWall(_) => MudBrickWall::FILTER_LIGHT,
			Block::NetherBrickWall(_) => NetherBrickWall::FILTER_LIGHT,
			Block::AndesiteWall(_) => AndesiteWall::FILTER_LIGHT,
			Block::RedNetherBrickWall(_) => RedNetherBrickWall::FILTER_LIGHT,
			Block::SandstoneWall(_) => SandstoneWall::FILTER_LIGHT,
			Block::EndStoneBrickWall(_) => EndStoneBrickWall::FILTER_LIGHT,
			Block::DioriteWall(_) => DioriteWall::FILTER_LIGHT,
			Block::Scaffolding(_) => Scaffolding::FILTER_LIGHT,
			Block::Loom(_) => Loom::FILTER_LIGHT,
			Block::Barrel(_) => Barrel::FILTER_LIGHT,
			Block::Smoker(_) => Smoker::FILTER_LIGHT,
			Block::BlastFurnace(_) => BlastFurnace::FILTER_LIGHT,
			Block::CartographyTable(_) => CartographyTable::FILTER_LIGHT,
			Block::FletchingTable(_) => FletchingTable::FILTER_LIGHT,
			Block::Grindstone(_) => Grindstone::FILTER_LIGHT,
			Block::Lectern(_) => Lectern::FILTER_LIGHT,
			Block::SmithingTable(_) => SmithingTable::FILTER_LIGHT,
			Block::Stonecutter(_) => Stonecutter::FILTER_LIGHT,
			Block::Bell(_) => Bell::FILTER_LIGHT,
			Block::Lantern(_) => Lantern::FILTER_LIGHT,
			Block::SoulLantern(_) => SoulLantern::FILTER_LIGHT,
			Block::Campfire(_) => Campfire::FILTER_LIGHT,
			Block::SoulCampfire(_) => SoulCampfire::FILTER_LIGHT,
			Block::SweetBerryBush(_) => SweetBerryBush::FILTER_LIGHT,
			Block::WarpedStem(_) => WarpedStem::FILTER_LIGHT,
			Block::StrippedWarpedStem(_) => StrippedWarpedStem::FILTER_LIGHT,
			Block::WarpedHyphae(_) => WarpedHyphae::FILTER_LIGHT,
			Block::StrippedWarpedHyphae(_) => StrippedWarpedHyphae::FILTER_LIGHT,
			Block::WarpedNylium(_) => WarpedNylium::FILTER_LIGHT,
			Block::WarpedFungus(_) => WarpedFungus::FILTER_LIGHT,
			Block::WarpedWartBlock(_) => WarpedWartBlock::FILTER_LIGHT,
			Block::WarpedRoots(_) => WarpedRoots::FILTER_LIGHT,
			Block::NetherSprouts(_) => NetherSprouts::FILTER_LIGHT,
			Block::CrimsonStem(_) => CrimsonStem::FILTER_LIGHT,
			Block::StrippedCrimsonStem(_) => StrippedCrimsonStem::FILTER_LIGHT,
			Block::CrimsonHyphae(_) => CrimsonHyphae::FILTER_LIGHT,
			Block::StrippedCrimsonHyphae(_) => StrippedCrimsonHyphae::FILTER_LIGHT,
			Block::CrimsonNylium(_) => CrimsonNylium::FILTER_LIGHT,
			Block::CrimsonFungus(_) => CrimsonFungus::FILTER_LIGHT,
			Block::Shroomlight(_) => Shroomlight::FILTER_LIGHT,
			Block::WeepingVines(_) => WeepingVines::FILTER_LIGHT,
			Block::WeepingVinesPlant(_) => WeepingVinesPlant::FILTER_LIGHT,
			Block::TwistingVines(_) => TwistingVines::FILTER_LIGHT,
			Block::TwistingVinesPlant(_) => TwistingVinesPlant::FILTER_LIGHT,
			Block::CrimsonRoots(_) => CrimsonRoots::FILTER_LIGHT,
			Block::CrimsonPlanks(_) => CrimsonPlanks::FILTER_LIGHT,
			Block::WarpedPlanks(_) => WarpedPlanks::FILTER_LIGHT,
			Block::CrimsonSlab(_) => CrimsonSlab::FILTER_LIGHT,
			Block::WarpedSlab(_) => WarpedSlab::FILTER_LIGHT,
			Block::CrimsonPressurePlate(_) => CrimsonPressurePlate::FILTER_LIGHT,
			Block::WarpedPressurePlate(_) => WarpedPressurePlate::FILTER_LIGHT,
			Block::CrimsonFence(_) => CrimsonFence::FILTER_LIGHT,
			Block::WarpedFence(_) => WarpedFence::FILTER_LIGHT,
			Block::CrimsonTrapdoor(_) => CrimsonTrapdoor::FILTER_LIGHT,
			Block::WarpedTrapdoor(_) => WarpedTrapdoor::FILTER_LIGHT,
			Block::CrimsonFenceGate(_) => CrimsonFenceGate::FILTER_LIGHT,
			Block::WarpedFenceGate(_) => WarpedFenceGate::FILTER_LIGHT,
			Block::CrimsonStairs(_) => CrimsonStairs::FILTER_LIGHT,
			Block::WarpedStairs(_) => WarpedStairs::FILTER_LIGHT,
			Block::CrimsonButton(_) => CrimsonButton::FILTER_LIGHT,
			Block::WarpedButton(_) => WarpedButton::FILTER_LIGHT,
			Block::CrimsonDoor(_) => CrimsonDoor::FILTER_LIGHT,
			Block::WarpedDoor(_) => WarpedDoor::FILTER_LIGHT,
			Block::CrimsonSign(_) => CrimsonSign::FILTER_LIGHT,
			Block::WarpedSign(_) => WarpedSign::FILTER_LIGHT,
			Block::CrimsonWallSign(_) => CrimsonWallSign::FILTER_LIGHT,
			Block::WarpedWallSign(_) => WarpedWallSign::FILTER_LIGHT,
			Block::StructureBlock(_) => StructureBlock::FILTER_LIGHT,
			Block::Jigsaw(_) => Jigsaw::FILTER_LIGHT,
			Block::Composter(_) => Composter::FILTER_LIGHT,
			Block::Target(_) => Target::FILTER_LIGHT,
			Block::BeeNest(_) => BeeNest::FILTER_LIGHT,
			Block::Beehive(_) => Beehive::FILTER_LIGHT,
			Block::HoneyBlock(_) => HoneyBlock::FILTER_LIGHT,
			Block::HoneycombBlock(_) => HoneycombBlock::FILTER_LIGHT,
			Block::NetheriteBlock(_) => NetheriteBlock::FILTER_LIGHT,
			Block::AncientDebris(_) => AncientDebris::FILTER_LIGHT,
			Block::CryingObsidian(_) => CryingObsidian::FILTER_LIGHT,
			Block::RespawnAnchor(_) => RespawnAnchor::FILTER_LIGHT,
			Block::PottedCrimsonFungus(_) => PottedCrimsonFungus::FILTER_LIGHT,
			Block::PottedWarpedFungus(_) => PottedWarpedFungus::FILTER_LIGHT,
			Block::PottedCrimsonRoots(_) => PottedCrimsonRoots::FILTER_LIGHT,
			Block::PottedWarpedRoots(_) => PottedWarpedRoots::FILTER_LIGHT,
			Block::Lodestone(_) => Lodestone::FILTER_LIGHT,
			Block::Blackstone(_) => Blackstone::FILTER_LIGHT,
			Block::BlackstoneStairs(_) => BlackstoneStairs::FILTER_LIGHT,
			Block::BlackstoneWall(_) => BlackstoneWall::FILTER_LIGHT,
			Block::BlackstoneSlab(_) => BlackstoneSlab::FILTER_LIGHT,
			Block::PolishedBlackstone(_) => PolishedBlackstone::FILTER_LIGHT,
			Block::PolishedBlackstoneBricks(_) => PolishedBlackstoneBricks::FILTER_LIGHT,
			Block::CrackedPolishedBlackstoneBricks(_) => CrackedPolishedBlackstoneBricks::FILTER_LIGHT,
			Block::ChiseledPolishedBlackstone(_) => ChiseledPolishedBlackstone::FILTER_LIGHT,
			Block::PolishedBlackstoneBrickSlab(_) => PolishedBlackstoneBrickSlab::FILTER_LIGHT,
			Block::PolishedBlackstoneBrickStairs(_) => PolishedBlackstoneBrickStairs::FILTER_LIGHT,
			Block::PolishedBlackstoneBrickWall(_) => PolishedBlackstoneBrickWall::FILTER_LIGHT,
			Block::GildedBlackstone(_) => GildedBlackstone::FILTER_LIGHT,
			Block::PolishedBlackstoneStairs(_) => PolishedBlackstoneStairs::FILTER_LIGHT,
			Block::PolishedBlackstoneSlab(_) => PolishedBlackstoneSlab::FILTER_LIGHT,
			Block::PolishedBlackstonePressurePlate(_) => PolishedBlackstonePressurePlate::FILTER_LIGHT,
			Block::PolishedBlackstoneButton(_) => PolishedBlackstoneButton::FILTER_LIGHT,
			Block::PolishedBlackstoneWall(_) => PolishedBlackstoneWall::FILTER_LIGHT,
			Block::ChiseledNetherBricks(_) => ChiseledNetherBricks::FILTER_LIGHT,
			Block::CrackedNetherBricks(_) => CrackedNetherBricks::FILTER_LIGHT,
			Block::QuartzBricks(_) => QuartzBricks::FILTER_LIGHT,
			Block::Candle(_) => Candle::FILTER_LIGHT,
			Block::WhiteCandle(_) => WhiteCandle::FILTER_LIGHT,
			Block::OrangeCandle(_) => OrangeCandle::FILTER_LIGHT,
			Block::MagentaCandle(_) => MagentaCandle::FILTER_LIGHT,
			Block::LightBlueCandle(_) => LightBlueCandle::FILTER_LIGHT,
			Block::YellowCandle(_) => YellowCandle::FILTER_LIGHT,
			Block::LimeCandle(_) => LimeCandle::FILTER_LIGHT,
			Block::PinkCandle(_) => PinkCandle::FILTER_LIGHT,
			Block::GrayCandle(_) => GrayCandle::FILTER_LIGHT,
			Block::LightGrayCandle(_) => LightGrayCandle::FILTER_LIGHT,
			Block::CyanCandle(_) => CyanCandle::FILTER_LIGHT,
			Block::PurpleCandle(_) => PurpleCandle::FILTER_LIGHT,
			Block::BlueCandle(_) => BlueCandle::FILTER_LIGHT,
			Block::BrownCandle(_) => BrownCandle::FILTER_LIGHT,
			Block::GreenCandle(_) => GreenCandle::FILTER_LIGHT,
			Block::RedCandle(_) => RedCandle::FILTER_LIGHT,
			Block::BlackCandle(_) => BlackCandle::FILTER_LIGHT,
			Block::CandleCake(_) => CandleCake::FILTER_LIGHT,
			Block::WhiteCandleCake(_) => WhiteCandleCake::FILTER_LIGHT,
			Block::OrangeCandleCake(_) => OrangeCandleCake::FILTER_LIGHT,
			Block::MagentaCandleCake(_) => MagentaCandleCake::FILTER_LIGHT,
			Block::LightBlueCandleCake(_) => LightBlueCandleCake::FILTER_LIGHT,
			Block::YellowCandleCake(_) => YellowCandleCake::FILTER_LIGHT,
			Block::LimeCandleCake(_) => LimeCandleCake::FILTER_LIGHT,
			Block::PinkCandleCake(_) => PinkCandleCake::FILTER_LIGHT,
			Block::GrayCandleCake(_) => GrayCandleCake::FILTER_LIGHT,
			Block::LightGrayCandleCake(_) => LightGrayCandleCake::FILTER_LIGHT,
			Block::CyanCandleCake(_) => CyanCandleCake::FILTER_LIGHT,
			Block::PurpleCandleCake(_) => PurpleCandleCake::FILTER_LIGHT,
			Block::BlueCandleCake(_) => BlueCandleCake::FILTER_LIGHT,
			Block::BrownCandleCake(_) => BrownCandleCake::FILTER_LIGHT,
			Block::GreenCandleCake(_) => GreenCandleCake::FILTER_LIGHT,
			Block::RedCandleCake(_) => RedCandleCake::FILTER_LIGHT,
			Block::BlackCandleCake(_) => BlackCandleCake::FILTER_LIGHT,
			Block::AmethystBlock(_) => AmethystBlock::FILTER_LIGHT,
			Block::BuddingAmethyst(_) => BuddingAmethyst::FILTER_LIGHT,
			Block::AmethystCluster(_) => AmethystCluster::FILTER_LIGHT,
			Block::LargeAmethystBud(_) => LargeAmethystBud::FILTER_LIGHT,
			Block::MediumAmethystBud(_) => MediumAmethystBud::FILTER_LIGHT,
			Block::SmallAmethystBud(_) => SmallAmethystBud::FILTER_LIGHT,
			Block::Tuff(_) => Tuff::FILTER_LIGHT,
			Block::Calcite(_) => Calcite::FILTER_LIGHT,
			Block::TintedGlass(_) => TintedGlass::FILTER_LIGHT,
			Block::PowderSnow(_) => PowderSnow::FILTER_LIGHT,
			Block::SculkSensor(_) => SculkSensor::FILTER_LIGHT,
			Block::Sculk(_) => Sculk::FILTER_LIGHT,
			Block::SculkVein(_) => SculkVein::FILTER_LIGHT,
			Block::SculkCatalyst(_) => SculkCatalyst::FILTER_LIGHT,
			Block::SculkShrieker(_) => SculkShrieker::FILTER_LIGHT,
			Block::OxidizedCopper(_) => OxidizedCopper::FILTER_LIGHT,
			Block::WeatheredCopper(_) => WeatheredCopper::FILTER_LIGHT,
			Block::ExposedCopper(_) => ExposedCopper::FILTER_LIGHT,
			Block::CopperBlock(_) => CopperBlock::FILTER_LIGHT,
			Block::CopperOre(_) => CopperOre::FILTER_LIGHT,
			Block::DeepslateCopperOre(_) => DeepslateCopperOre::FILTER_LIGHT,
			Block::OxidizedCutCopper(_) => OxidizedCutCopper::FILTER_LIGHT,
			Block::WeatheredCutCopper(_) => WeatheredCutCopper::FILTER_LIGHT,
			Block::ExposedCutCopper(_) => ExposedCutCopper::FILTER_LIGHT,
			Block::CutCopper(_) => CutCopper::FILTER_LIGHT,
			Block::OxidizedCutCopperStairs(_) => OxidizedCutCopperStairs::FILTER_LIGHT,
			Block::WeatheredCutCopperStairs(_) => WeatheredCutCopperStairs::FILTER_LIGHT,
			Block::ExposedCutCopperStairs(_) => ExposedCutCopperStairs::FILTER_LIGHT,
			Block::CutCopperStairs(_) => CutCopperStairs::FILTER_LIGHT,
			Block::OxidizedCutCopperSlab(_) => OxidizedCutCopperSlab::FILTER_LIGHT,
			Block::WeatheredCutCopperSlab(_) => WeatheredCutCopperSlab::FILTER_LIGHT,
			Block::ExposedCutCopperSlab(_) => ExposedCutCopperSlab::FILTER_LIGHT,
			Block::CutCopperSlab(_) => CutCopperSlab::FILTER_LIGHT,
			Block::WaxedCopperBlock(_) => WaxedCopperBlock::FILTER_LIGHT,
			Block::WaxedWeatheredCopper(_) => WaxedWeatheredCopper::FILTER_LIGHT,
			Block::WaxedExposedCopper(_) => WaxedExposedCopper::FILTER_LIGHT,
			Block::WaxedOxidizedCopper(_) => WaxedOxidizedCopper::FILTER_LIGHT,
			Block::WaxedOxidizedCutCopper(_) => WaxedOxidizedCutCopper::FILTER_LIGHT,
			Block::WaxedWeatheredCutCopper(_) => WaxedWeatheredCutCopper::FILTER_LIGHT,
			Block::WaxedExposedCutCopper(_) => WaxedExposedCutCopper::FILTER_LIGHT,
			Block::WaxedCutCopper(_) => WaxedCutCopper::FILTER_LIGHT,
			Block::WaxedOxidizedCutCopperStairs(_) => WaxedOxidizedCutCopperStairs::FILTER_LIGHT,
			Block::WaxedWeatheredCutCopperStairs(_) => WaxedWeatheredCutCopperStairs::FILTER_LIGHT,
			Block::WaxedExposedCutCopperStairs(_) => WaxedExposedCutCopperStairs::FILTER_LIGHT,
			Block::WaxedCutCopperStairs(_) => WaxedCutCopperStairs::FILTER_LIGHT,
			Block::WaxedOxidizedCutCopperSlab(_) => WaxedOxidizedCutCopperSlab::FILTER_LIGHT,
			Block::WaxedWeatheredCutCopperSlab(_) => WaxedWeatheredCutCopperSlab::FILTER_LIGHT,
			Block::WaxedExposedCutCopperSlab(_) => WaxedExposedCutCopperSlab::FILTER_LIGHT,
			Block::WaxedCutCopperSlab(_) => WaxedCutCopperSlab::FILTER_LIGHT,
			Block::LightningRod(_) => LightningRod::FILTER_LIGHT,
			Block::PointedDripstone(_) => PointedDripstone::FILTER_LIGHT,
			Block::DripstoneBlock(_) => DripstoneBlock::FILTER_LIGHT,
			Block::CaveVines(_) => CaveVines::FILTER_LIGHT,
			Block::CaveVinesPlant(_) => CaveVinesPlant::FILTER_LIGHT,
			Block::SporeBlossom(_) => SporeBlossom::FILTER_LIGHT,
			Block::Azalea(_) => Azalea::FILTER_LIGHT,
			Block::FloweringAzalea(_) => FloweringAzalea::FILTER_LIGHT,
			Block::MossCarpet(_) => MossCarpet::FILTER_LIGHT,
			Block::MossBlock(_) => MossBlock::FILTER_LIGHT,
			Block::BigDripleaf(_) => BigDripleaf::FILTER_LIGHT,
			Block::BigDripleafStem(_) => BigDripleafStem::FILTER_LIGHT,
			Block::SmallDripleaf(_) => SmallDripleaf::FILTER_LIGHT,
			Block::HangingRoots(_) => HangingRoots::FILTER_LIGHT,
			Block::RootedDirt(_) => RootedDirt::FILTER_LIGHT,
			Block::Mud(_) => Mud::FILTER_LIGHT,
			Block::Deepslate(_) => Deepslate::FILTER_LIGHT,
			Block::CobbledDeepslate(_) => CobbledDeepslate::FILTER_LIGHT,
			Block::CobbledDeepslateStairs(_) => CobbledDeepslateStairs::FILTER_LIGHT,
			Block::CobbledDeepslateSlab(_) => CobbledDeepslateSlab::FILTER_LIGHT,
			Block::CobbledDeepslateWall(_) => CobbledDeepslateWall::FILTER_LIGHT,
			Block::PolishedDeepslate(_) => PolishedDeepslate::FILTER_LIGHT,
			Block::PolishedDeepslateStairs(_) => PolishedDeepslateStairs::FILTER_LIGHT,
			Block::PolishedDeepslateSlab(_) => PolishedDeepslateSlab::FILTER_LIGHT,
			Block::PolishedDeepslateWall(_) => PolishedDeepslateWall::FILTER_LIGHT,
			Block::DeepslateTiles(_) => DeepslateTiles::FILTER_LIGHT,
			Block::DeepslateTileStairs(_) => DeepslateTileStairs::FILTER_LIGHT,
			Block::DeepslateTileSlab(_) => DeepslateTileSlab::FILTER_LIGHT,
			Block::DeepslateTileWall(_) => DeepslateTileWall::FILTER_LIGHT,
			Block::DeepslateBricks(_) => DeepslateBricks::FILTER_LIGHT,
			Block::DeepslateBrickStairs(_) => DeepslateBrickStairs::FILTER_LIGHT,
			Block::DeepslateBrickSlab(_) => DeepslateBrickSlab::FILTER_LIGHT,
			Block::DeepslateBrickWall(_) => DeepslateBrickWall::FILTER_LIGHT,
			Block::ChiseledDeepslate(_) => ChiseledDeepslate::FILTER_LIGHT,
			Block::CrackedDeepslateBricks(_) => CrackedDeepslateBricks::FILTER_LIGHT,
			Block::CrackedDeepslateTiles(_) => CrackedDeepslateTiles::FILTER_LIGHT,
			Block::InfestedDeepslate(_) => InfestedDeepslate::FILTER_LIGHT,
			Block::SmoothBasalt(_) => SmoothBasalt::FILTER_LIGHT,
			Block::RawIronBlock(_) => RawIronBlock::FILTER_LIGHT,
			Block::RawCopperBlock(_) => RawCopperBlock::FILTER_LIGHT,
			Block::RawGoldBlock(_) => RawGoldBlock::FILTER_LIGHT,
			Block::PottedAzaleaBush(_) => PottedAzaleaBush::FILTER_LIGHT,
			Block::PottedFloweringAzaleaBush(_) => PottedFloweringAzaleaBush::FILTER_LIGHT,
			Block::OchreFroglight(_) => OchreFroglight::FILTER_LIGHT,
			Block::VerdantFroglight(_) => VerdantFroglight::FILTER_LIGHT,
			Block::PearlescentFroglight(_) => PearlescentFroglight::FILTER_LIGHT,
			Block::Frogspawn(_) => Frogspawn::FILTER_LIGHT,
			Block::ReinforcedDeepslate(_) => ReinforcedDeepslate::FILTER_LIGHT,
		}
	}
}

pub fn deserialize_content<'de, T: MapAccess<'de>>(
	tag: &str,
	map: Option<&HashMap<String, String>>,
) -> Result<Block, String> {
	Ok(match tag {
		"minecraft:air" => Block::Air(Air {}),
		"minecraft:stone" => Block::Stone(Stone {}),
		"minecraft:granite" => Block::Granite(Granite {}),
		"minecraft:polished_granite" => Block::PolishedGranite(PolishedGranite {}),
		"minecraft:diorite" => Block::Diorite(Diorite {}),
		"minecraft:polished_diorite" => Block::PolishedDiorite(PolishedDiorite {}),
		"minecraft:andesite" => Block::Andesite(Andesite {}),
		"minecraft:polished_andesite" => Block::PolishedAndesite(PolishedAndesite {}),
		"minecraft:grass_block" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GrassBlock(GrassBlock {
				r#snowy: map.get("snowy").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dirt" => Block::Dirt(Dirt {}),
		"minecraft:coarse_dirt" => Block::CoarseDirt(CoarseDirt {}),
		"minecraft:podzol" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Podzol(Podzol {
				r#snowy: map.get("snowy").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cobblestone" => Block::Cobblestone(Cobblestone {}),
		"minecraft:oak_planks" => Block::OakPlanks(OakPlanks {}),
		"minecraft:spruce_planks" => Block::SprucePlanks(SprucePlanks {}),
		"minecraft:birch_planks" => Block::BirchPlanks(BirchPlanks {}),
		"minecraft:jungle_planks" => Block::JunglePlanks(JunglePlanks {}),
		"minecraft:acacia_planks" => Block::AcaciaPlanks(AcaciaPlanks {}),
		"minecraft:dark_oak_planks" => Block::DarkOakPlanks(DarkOakPlanks {}),
		"minecraft:mangrove_planks" => Block::MangrovePlanks(MangrovePlanks {}),
		"minecraft:oak_sapling" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OakSapling(OakSapling {
				r#stage: map.get("stage").unwrap().parse().unwrap(),
			})
		},
		"minecraft:spruce_sapling" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SpruceSapling(SpruceSapling {
				r#stage: map.get("stage").unwrap().parse().unwrap(),
			})
		},
		"minecraft:birch_sapling" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BirchSapling(BirchSapling {
				r#stage: map.get("stage").unwrap().parse().unwrap(),
			})
		},
		"minecraft:jungle_sapling" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::JungleSapling(JungleSapling {
				r#stage: map.get("stage").unwrap().parse().unwrap(),
			})
		},
		"minecraft:acacia_sapling" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AcaciaSapling(AcaciaSapling {
				r#stage: map.get("stage").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dark_oak_sapling" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DarkOakSapling(DarkOakSapling {
				r#stage: map.get("stage").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mangrove_propagule" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MangrovePropagule(MangrovePropagule {
				r#age: map.get("age").unwrap().parse().unwrap(),
				r#hanging: map.get("hanging").unwrap().parse().unwrap(),
				r#stage: map.get("stage").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:bedrock" => Block::Bedrock(Bedrock {}),
		"minecraft:water" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Water(Water {
				r#level: map.get("level").unwrap().parse().unwrap(),
			})
		},
		"minecraft:lava" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Lava(Lava {
				r#level: map.get("level").unwrap().parse().unwrap(),
			})
		},
		"minecraft:sand" => Block::Sand(Sand {}),
		"minecraft:red_sand" => Block::RedSand(RedSand {}),
		"minecraft:gravel" => Block::Gravel(Gravel {}),
		"minecraft:gold_ore" => Block::GoldOre(GoldOre {}),
		"minecraft:deepslate_gold_ore" => Block::DeepslateGoldOre(DeepslateGoldOre {}),
		"minecraft:iron_ore" => Block::IronOre(IronOre {}),
		"minecraft:deepslate_iron_ore" => Block::DeepslateIronOre(DeepslateIronOre {}),
		"minecraft:coal_ore" => Block::CoalOre(CoalOre {}),
		"minecraft:deepslate_coal_ore" => Block::DeepslateCoalOre(DeepslateCoalOre {}),
		"minecraft:nether_gold_ore" => Block::NetherGoldOre(NetherGoldOre {}),
		"minecraft:oak_log" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OakLog(OakLog {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:spruce_log" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SpruceLog(SpruceLog {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:birch_log" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BirchLog(BirchLog {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:jungle_log" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::JungleLog(JungleLog {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:acacia_log" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AcaciaLog(AcaciaLog {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dark_oak_log" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DarkOakLog(DarkOakLog {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mangrove_log" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MangroveLog(MangroveLog {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mangrove_roots" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MangroveRoots(MangroveRoots {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:muddy_mangrove_roots" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MuddyMangroveRoots(MuddyMangroveRoots {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_spruce_log" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedSpruceLog(StrippedSpruceLog {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_birch_log" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedBirchLog(StrippedBirchLog {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_jungle_log" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedJungleLog(StrippedJungleLog {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_acacia_log" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedAcaciaLog(StrippedAcaciaLog {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_dark_oak_log" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedDarkOakLog(StrippedDarkOakLog {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_oak_log" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedOakLog(StrippedOakLog {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_mangrove_log" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedMangroveLog(StrippedMangroveLog {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:oak_wood" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OakWood(OakWood {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:spruce_wood" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SpruceWood(SpruceWood {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:birch_wood" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BirchWood(BirchWood {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:jungle_wood" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::JungleWood(JungleWood {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:acacia_wood" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AcaciaWood(AcaciaWood {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dark_oak_wood" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DarkOakWood(DarkOakWood {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mangrove_wood" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MangroveWood(MangroveWood {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_oak_wood" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedOakWood(StrippedOakWood {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_spruce_wood" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedSpruceWood(StrippedSpruceWood {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_birch_wood" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedBirchWood(StrippedBirchWood {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_jungle_wood" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedJungleWood(StrippedJungleWood {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_acacia_wood" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedAcaciaWood(StrippedAcaciaWood {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_dark_oak_wood" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedDarkOakWood(StrippedDarkOakWood {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_mangrove_wood" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedMangroveWood(StrippedMangroveWood {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:oak_leaves" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OakLeaves(OakLeaves {
				r#distance: map.get("distance").unwrap().parse().unwrap(),
				r#persistent: map.get("persistent").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:spruce_leaves" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SpruceLeaves(SpruceLeaves {
				r#distance: map.get("distance").unwrap().parse().unwrap(),
				r#persistent: map.get("persistent").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:birch_leaves" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BirchLeaves(BirchLeaves {
				r#distance: map.get("distance").unwrap().parse().unwrap(),
				r#persistent: map.get("persistent").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:jungle_leaves" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::JungleLeaves(JungleLeaves {
				r#distance: map.get("distance").unwrap().parse().unwrap(),
				r#persistent: map.get("persistent").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:acacia_leaves" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AcaciaLeaves(AcaciaLeaves {
				r#distance: map.get("distance").unwrap().parse().unwrap(),
				r#persistent: map.get("persistent").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dark_oak_leaves" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DarkOakLeaves(DarkOakLeaves {
				r#distance: map.get("distance").unwrap().parse().unwrap(),
				r#persistent: map.get("persistent").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mangrove_leaves" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MangroveLeaves(MangroveLeaves {
				r#distance: map.get("distance").unwrap().parse().unwrap(),
				r#persistent: map.get("persistent").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:azalea_leaves" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AzaleaLeaves(AzaleaLeaves {
				r#distance: map.get("distance").unwrap().parse().unwrap(),
				r#persistent: map.get("persistent").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:flowering_azalea_leaves" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::FloweringAzaleaLeaves(FloweringAzaleaLeaves {
				r#distance: map.get("distance").unwrap().parse().unwrap(),
				r#persistent: map.get("persistent").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:sponge" => Block::Sponge(Sponge {}),
		"minecraft:wet_sponge" => Block::WetSponge(WetSponge {}),
		"minecraft:glass" => Block::Glass(Glass {}),
		"minecraft:lapis_ore" => Block::LapisOre(LapisOre {}),
		"minecraft:deepslate_lapis_ore" => Block::DeepslateLapisOre(DeepslateLapisOre {}),
		"minecraft:lapis_block" => Block::LapisBlock(LapisBlock {}),
		"minecraft:dispenser" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Dispenser(Dispenser {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#triggered: map.get("triggered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:sandstone" => Block::Sandstone(Sandstone {}),
		"minecraft:chiseled_sandstone" => Block::ChiseledSandstone(ChiseledSandstone {}),
		"minecraft:cut_sandstone" => Block::CutSandstone(CutSandstone {}),
		"minecraft:note_block" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::NoteBlock(NoteBlock {
				r#instrument: map.get("instrument").unwrap().parse().unwrap(),
				r#note: map.get("note").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:white_bed" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WhiteBed(WhiteBed {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#occupied: map.get("occupied").unwrap().parse().unwrap(),
				r#part: map.get("part").unwrap().parse().unwrap(),
			})
		},
		"minecraft:orange_bed" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OrangeBed(OrangeBed {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#occupied: map.get("occupied").unwrap().parse().unwrap(),
				r#part: map.get("part").unwrap().parse().unwrap(),
			})
		},
		"minecraft:magenta_bed" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MagentaBed(MagentaBed {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#occupied: map.get("occupied").unwrap().parse().unwrap(),
				r#part: map.get("part").unwrap().parse().unwrap(),
			})
		},
		"minecraft:light_blue_bed" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightBlueBed(LightBlueBed {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#occupied: map.get("occupied").unwrap().parse().unwrap(),
				r#part: map.get("part").unwrap().parse().unwrap(),
			})
		},
		"minecraft:yellow_bed" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::YellowBed(YellowBed {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#occupied: map.get("occupied").unwrap().parse().unwrap(),
				r#part: map.get("part").unwrap().parse().unwrap(),
			})
		},
		"minecraft:lime_bed" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LimeBed(LimeBed {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#occupied: map.get("occupied").unwrap().parse().unwrap(),
				r#part: map.get("part").unwrap().parse().unwrap(),
			})
		},
		"minecraft:pink_bed" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PinkBed(PinkBed {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#occupied: map.get("occupied").unwrap().parse().unwrap(),
				r#part: map.get("part").unwrap().parse().unwrap(),
			})
		},
		"minecraft:gray_bed" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GrayBed(GrayBed {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#occupied: map.get("occupied").unwrap().parse().unwrap(),
				r#part: map.get("part").unwrap().parse().unwrap(),
			})
		},
		"minecraft:light_gray_bed" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightGrayBed(LightGrayBed {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#occupied: map.get("occupied").unwrap().parse().unwrap(),
				r#part: map.get("part").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cyan_bed" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CyanBed(CyanBed {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#occupied: map.get("occupied").unwrap().parse().unwrap(),
				r#part: map.get("part").unwrap().parse().unwrap(),
			})
		},
		"minecraft:purple_bed" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PurpleBed(PurpleBed {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#occupied: map.get("occupied").unwrap().parse().unwrap(),
				r#part: map.get("part").unwrap().parse().unwrap(),
			})
		},
		"minecraft:blue_bed" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlueBed(BlueBed {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#occupied: map.get("occupied").unwrap().parse().unwrap(),
				r#part: map.get("part").unwrap().parse().unwrap(),
			})
		},
		"minecraft:brown_bed" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BrownBed(BrownBed {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#occupied: map.get("occupied").unwrap().parse().unwrap(),
				r#part: map.get("part").unwrap().parse().unwrap(),
			})
		},
		"minecraft:green_bed" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GreenBed(GreenBed {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#occupied: map.get("occupied").unwrap().parse().unwrap(),
				r#part: map.get("part").unwrap().parse().unwrap(),
			})
		},
		"minecraft:red_bed" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedBed(RedBed {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#occupied: map.get("occupied").unwrap().parse().unwrap(),
				r#part: map.get("part").unwrap().parse().unwrap(),
			})
		},
		"minecraft:black_bed" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlackBed(BlackBed {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#occupied: map.get("occupied").unwrap().parse().unwrap(),
				r#part: map.get("part").unwrap().parse().unwrap(),
			})
		},
		"minecraft:powered_rail" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PoweredRail(PoweredRail {
				r#powered: map.get("powered").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:detector_rail" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DetectorRail(DetectorRail {
				r#powered: map.get("powered").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:sticky_piston" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StickyPiston(StickyPiston {
				r#extended: map.get("extended").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cobweb" => Block::Cobweb(Cobweb {}),
		"minecraft:grass" => Block::Grass(Grass {}),
		"minecraft:fern" => Block::Fern(Fern {}),
		"minecraft:dead_bush" => Block::DeadBush(DeadBush {}),
		"minecraft:seagrass" => Block::Seagrass(Seagrass {}),
		"minecraft:tall_seagrass" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::TallSeagrass(TallSeagrass {
				r#half: map.get("half").unwrap().parse().unwrap(),
			})
		},
		"minecraft:piston" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Piston(Piston {
				r#extended: map.get("extended").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:piston_head" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PistonHead(PistonHead {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#short: map.get("short").unwrap().parse().unwrap(),
				r#type: map.get("type").unwrap().parse().unwrap(),
			})
		},
		"minecraft:white_wool" => Block::WhiteWool(WhiteWool {}),
		"minecraft:orange_wool" => Block::OrangeWool(OrangeWool {}),
		"minecraft:magenta_wool" => Block::MagentaWool(MagentaWool {}),
		"minecraft:light_blue_wool" => Block::LightBlueWool(LightBlueWool {}),
		"minecraft:yellow_wool" => Block::YellowWool(YellowWool {}),
		"minecraft:lime_wool" => Block::LimeWool(LimeWool {}),
		"minecraft:pink_wool" => Block::PinkWool(PinkWool {}),
		"minecraft:gray_wool" => Block::GrayWool(GrayWool {}),
		"minecraft:light_gray_wool" => Block::LightGrayWool(LightGrayWool {}),
		"minecraft:cyan_wool" => Block::CyanWool(CyanWool {}),
		"minecraft:purple_wool" => Block::PurpleWool(PurpleWool {}),
		"minecraft:blue_wool" => Block::BlueWool(BlueWool {}),
		"minecraft:brown_wool" => Block::BrownWool(BrownWool {}),
		"minecraft:green_wool" => Block::GreenWool(GreenWool {}),
		"minecraft:red_wool" => Block::RedWool(RedWool {}),
		"minecraft:black_wool" => Block::BlackWool(BlackWool {}),
		"minecraft:moving_piston" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MovingPiston(MovingPiston {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#type: map.get("type").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dandelion" => Block::Dandelion(Dandelion {}),
		"minecraft:poppy" => Block::Poppy(Poppy {}),
		"minecraft:blue_orchid" => Block::BlueOrchid(BlueOrchid {}),
		"minecraft:allium" => Block::Allium(Allium {}),
		"minecraft:azure_bluet" => Block::AzureBluet(AzureBluet {}),
		"minecraft:red_tulip" => Block::RedTulip(RedTulip {}),
		"minecraft:orange_tulip" => Block::OrangeTulip(OrangeTulip {}),
		"minecraft:white_tulip" => Block::WhiteTulip(WhiteTulip {}),
		"minecraft:pink_tulip" => Block::PinkTulip(PinkTulip {}),
		"minecraft:oxeye_daisy" => Block::OxeyeDaisy(OxeyeDaisy {}),
		"minecraft:cornflower" => Block::Cornflower(Cornflower {}),
		"minecraft:wither_rose" => Block::WitherRose(WitherRose {}),
		"minecraft:lily_of_the_valley" => Block::LilyOfTheValley(LilyOfTheValley {}),
		"minecraft:brown_mushroom" => Block::BrownMushroom(BrownMushroom {}),
		"minecraft:red_mushroom" => Block::RedMushroom(RedMushroom {}),
		"minecraft:gold_block" => Block::GoldBlock(GoldBlock {}),
		"minecraft:iron_block" => Block::IronBlock(IronBlock {}),
		"minecraft:bricks" => Block::Bricks(Bricks {}),
		"minecraft:tnt" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Tnt(Tnt {
				r#unstable: map.get("unstable").unwrap().parse().unwrap(),
			})
		},
		"minecraft:bookshelf" => Block::Bookshelf(Bookshelf {}),
		"minecraft:mossy_cobblestone" => Block::MossyCobblestone(MossyCobblestone {}),
		"minecraft:obsidian" => Block::Obsidian(Obsidian {}),
		"minecraft:torch" => Block::Torch(Torch {}),
		"minecraft:wall_torch" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WallTorch(WallTorch {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:fire" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Fire(Fire {
				r#age: map.get("age").unwrap().parse().unwrap(),
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:soul_fire" => Block::SoulFire(SoulFire {}),
		"minecraft:spawner" => Block::Spawner(Spawner {}),
		"minecraft:oak_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OakStairs(OakStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:chest" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Chest(Chest {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:redstone_wire" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedstoneWire(RedstoneWire {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#power: map.get("power").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:diamond_ore" => Block::DiamondOre(DiamondOre {}),
		"minecraft:deepslate_diamond_ore" => Block::DeepslateDiamondOre(DeepslateDiamondOre {}),
		"minecraft:diamond_block" => Block::DiamondBlock(DiamondBlock {}),
		"minecraft:crafting_table" => Block::CraftingTable(CraftingTable {}),
		"minecraft:wheat" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Wheat(Wheat {
				r#age: map.get("age").unwrap().parse().unwrap(),
			})
		},
		"minecraft:farmland" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Farmland(Farmland {
				r#moisture: map.get("moisture").unwrap().parse().unwrap(),
			})
		},
		"minecraft:furnace" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Furnace(Furnace {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:oak_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OakSign(OakSign {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:spruce_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SpruceSign(SpruceSign {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:birch_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BirchSign(BirchSign {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:acacia_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AcaciaSign(AcaciaSign {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:jungle_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::JungleSign(JungleSign {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dark_oak_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DarkOakSign(DarkOakSign {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mangrove_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MangroveSign(MangroveSign {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:oak_door" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OakDoor(OakDoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#hinge: map.get("hinge").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:ladder" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Ladder(Ladder {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:rail" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Rail(Rail {
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cobblestone_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CobblestoneStairs(CobblestoneStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:oak_wall_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OakWallSign(OakWallSign {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:spruce_wall_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SpruceWallSign(SpruceWallSign {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:birch_wall_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BirchWallSign(BirchWallSign {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:acacia_wall_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AcaciaWallSign(AcaciaWallSign {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:jungle_wall_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::JungleWallSign(JungleWallSign {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dark_oak_wall_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DarkOakWallSign(DarkOakWallSign {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mangrove_wall_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MangroveWallSign(MangroveWallSign {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:lever" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Lever(Lever {
				r#face: map.get("face").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stone_pressure_plate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StonePressurePlate(StonePressurePlate {
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:iron_door" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::IronDoor(IronDoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#hinge: map.get("hinge").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:oak_pressure_plate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OakPressurePlate(OakPressurePlate {
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:spruce_pressure_plate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SprucePressurePlate(SprucePressurePlate {
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:birch_pressure_plate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BirchPressurePlate(BirchPressurePlate {
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:jungle_pressure_plate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::JunglePressurePlate(JunglePressurePlate {
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:acacia_pressure_plate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AcaciaPressurePlate(AcaciaPressurePlate {
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dark_oak_pressure_plate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DarkOakPressurePlate(DarkOakPressurePlate {
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mangrove_pressure_plate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MangrovePressurePlate(MangrovePressurePlate {
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:redstone_ore" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedstoneOre(RedstoneOre {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:deepslate_redstone_ore" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeepslateRedstoneOre(DeepslateRedstoneOre {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:redstone_torch" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedstoneTorch(RedstoneTorch {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:redstone_wall_torch" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedstoneWallTorch(RedstoneWallTorch {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stone_button" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StoneButton(StoneButton {
				r#face: map.get("face").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:snow" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Snow(Snow {
				r#layers: map.get("layers").unwrap().parse().unwrap(),
			})
		},
		"minecraft:ice" => Block::Ice(Ice {}),
		"minecraft:snow_block" => Block::SnowBlock(SnowBlock {}),
		"minecraft:cactus" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Cactus(Cactus {
				r#age: map.get("age").unwrap().parse().unwrap(),
			})
		},
		"minecraft:clay" => Block::Clay(Clay {}),
		"minecraft:sugar_cane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SugarCane(SugarCane {
				r#age: map.get("age").unwrap().parse().unwrap(),
			})
		},
		"minecraft:jukebox" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Jukebox(Jukebox {
				r#has_record: map.get("has_record").unwrap().parse().unwrap(),
			})
		},
		"minecraft:oak_fence" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OakFence(OakFence {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:pumpkin" => Block::Pumpkin(Pumpkin {}),
		"minecraft:netherrack" => Block::Netherrack(Netherrack {}),
		"minecraft:soul_sand" => Block::SoulSand(SoulSand {}),
		"minecraft:soul_soil" => Block::SoulSoil(SoulSoil {}),
		"minecraft:basalt" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Basalt(Basalt {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:polished_basalt" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedBasalt(PolishedBasalt {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:soul_torch" => Block::SoulTorch(SoulTorch {}),
		"minecraft:soul_wall_torch" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SoulWallTorch(SoulWallTorch {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:glowstone" => Block::Glowstone(Glowstone {}),
		"minecraft:nether_portal" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::NetherPortal(NetherPortal {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:carved_pumpkin" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CarvedPumpkin(CarvedPumpkin {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:jack_o_lantern" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::JackOLantern(JackOLantern {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Cake(Cake {
				r#bites: map.get("bites").unwrap().parse().unwrap(),
			})
		},
		"minecraft:repeater" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Repeater(Repeater {
				r#delay: map.get("delay").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#locked: map.get("locked").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:white_stained_glass" => Block::WhiteStainedGlass(WhiteStainedGlass {}),
		"minecraft:orange_stained_glass" => Block::OrangeStainedGlass(OrangeStainedGlass {}),
		"minecraft:magenta_stained_glass" => Block::MagentaStainedGlass(MagentaStainedGlass {}),
		"minecraft:light_blue_stained_glass" => Block::LightBlueStainedGlass(LightBlueStainedGlass {}),
		"minecraft:yellow_stained_glass" => Block::YellowStainedGlass(YellowStainedGlass {}),
		"minecraft:lime_stained_glass" => Block::LimeStainedGlass(LimeStainedGlass {}),
		"minecraft:pink_stained_glass" => Block::PinkStainedGlass(PinkStainedGlass {}),
		"minecraft:gray_stained_glass" => Block::GrayStainedGlass(GrayStainedGlass {}),
		"minecraft:light_gray_stained_glass" => Block::LightGrayStainedGlass(LightGrayStainedGlass {}),
		"minecraft:cyan_stained_glass" => Block::CyanStainedGlass(CyanStainedGlass {}),
		"minecraft:purple_stained_glass" => Block::PurpleStainedGlass(PurpleStainedGlass {}),
		"minecraft:blue_stained_glass" => Block::BlueStainedGlass(BlueStainedGlass {}),
		"minecraft:brown_stained_glass" => Block::BrownStainedGlass(BrownStainedGlass {}),
		"minecraft:green_stained_glass" => Block::GreenStainedGlass(GreenStainedGlass {}),
		"minecraft:red_stained_glass" => Block::RedStainedGlass(RedStainedGlass {}),
		"minecraft:black_stained_glass" => Block::BlackStainedGlass(BlackStainedGlass {}),
		"minecraft:oak_trapdoor" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OakTrapdoor(OakTrapdoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:spruce_trapdoor" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SpruceTrapdoor(SpruceTrapdoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:birch_trapdoor" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BirchTrapdoor(BirchTrapdoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:jungle_trapdoor" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::JungleTrapdoor(JungleTrapdoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:acacia_trapdoor" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AcaciaTrapdoor(AcaciaTrapdoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dark_oak_trapdoor" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DarkOakTrapdoor(DarkOakTrapdoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mangrove_trapdoor" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MangroveTrapdoor(MangroveTrapdoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stone_bricks" => Block::StoneBricks(StoneBricks {}),
		"minecraft:mossy_stone_bricks" => Block::MossyStoneBricks(MossyStoneBricks {}),
		"minecraft:cracked_stone_bricks" => Block::CrackedStoneBricks(CrackedStoneBricks {}),
		"minecraft:chiseled_stone_bricks" => Block::ChiseledStoneBricks(ChiseledStoneBricks {}),
		"minecraft:packed_mud" => Block::PackedMud(PackedMud {}),
		"minecraft:mud_bricks" => Block::MudBricks(MudBricks {}),
		"minecraft:infested_stone" => Block::InfestedStone(InfestedStone {}),
		"minecraft:infested_cobblestone" => Block::InfestedCobblestone(InfestedCobblestone {}),
		"minecraft:infested_stone_bricks" => Block::InfestedStoneBricks(InfestedStoneBricks {}),
		"minecraft:infested_mossy_stone_bricks" => Block::InfestedMossyStoneBricks(InfestedMossyStoneBricks {}),
		"minecraft:infested_cracked_stone_bricks" => Block::InfestedCrackedStoneBricks(InfestedCrackedStoneBricks {}),
		"minecraft:infested_chiseled_stone_bricks" => Block::InfestedChiseledStoneBricks(InfestedChiseledStoneBricks {}),
		"minecraft:brown_mushroom_block" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BrownMushroomBlock(BrownMushroomBlock {
				r#down: map.get("down").unwrap().parse().unwrap(),
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:red_mushroom_block" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedMushroomBlock(RedMushroomBlock {
				r#down: map.get("down").unwrap().parse().unwrap(),
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mushroom_stem" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MushroomStem(MushroomStem {
				r#down: map.get("down").unwrap().parse().unwrap(),
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:iron_bars" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::IronBars(IronBars {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:chain" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Chain(Chain {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:glass_pane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GlassPane(GlassPane {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:melon" => Block::Melon(Melon {}),
		"minecraft:attached_pumpkin_stem" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AttachedPumpkinStem(AttachedPumpkinStem {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:attached_melon_stem" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AttachedMelonStem(AttachedMelonStem {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:pumpkin_stem" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PumpkinStem(PumpkinStem {
				r#age: map.get("age").unwrap().parse().unwrap(),
			})
		},
		"minecraft:melon_stem" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MelonStem(MelonStem {
				r#age: map.get("age").unwrap().parse().unwrap(),
			})
		},
		"minecraft:vine" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Vine(Vine {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:glow_lichen" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GlowLichen(GlowLichen {
				r#down: map.get("down").unwrap().parse().unwrap(),
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:oak_fence_gate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OakFenceGate(OakFenceGate {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#in_wall: map.get("in_wall").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:brick_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BrickStairs(BrickStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stone_brick_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StoneBrickStairs(StoneBrickStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mud_brick_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MudBrickStairs(MudBrickStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mycelium" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Mycelium(Mycelium {
				r#snowy: map.get("snowy").unwrap().parse().unwrap(),
			})
		},
		"minecraft:lily_pad" => Block::LilyPad(LilyPad {}),
		"minecraft:nether_bricks" => Block::NetherBricks(NetherBricks {}),
		"minecraft:nether_brick_fence" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::NetherBrickFence(NetherBrickFence {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:nether_brick_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::NetherBrickStairs(NetherBrickStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:nether_wart" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::NetherWart(NetherWart {
				r#age: map.get("age").unwrap().parse().unwrap(),
			})
		},
		"minecraft:enchanting_table" => Block::EnchantingTable(EnchantingTable {}),
		"minecraft:brewing_stand" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BrewingStand(BrewingStand {
				r#has_bottle_0: map.get("has_bottle_0").unwrap().parse().unwrap(),
				r#has_bottle_1: map.get("has_bottle_1").unwrap().parse().unwrap(),
				r#has_bottle_2: map.get("has_bottle_2").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cauldron" => Block::Cauldron(Cauldron {}),
		"minecraft:water_cauldron" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WaterCauldron(WaterCauldron {
				r#level: map.get("level").unwrap().parse().unwrap(),
			})
		},
		"minecraft:lava_cauldron" => Block::LavaCauldron(LavaCauldron {}),
		"minecraft:powder_snow_cauldron" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PowderSnowCauldron(PowderSnowCauldron {
				r#level: map.get("level").unwrap().parse().unwrap(),
			})
		},
		"minecraft:end_portal" => Block::EndPortal(EndPortal {}),
		"minecraft:end_portal_frame" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::EndPortalFrame(EndPortalFrame {
				r#eye: map.get("eye").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:end_stone" => Block::EndStone(EndStone {}),
		"minecraft:dragon_egg" => Block::DragonEgg(DragonEgg {}),
		"minecraft:redstone_lamp" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedstoneLamp(RedstoneLamp {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cocoa" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Cocoa(Cocoa {
				r#age: map.get("age").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:sandstone_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SandstoneStairs(SandstoneStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:emerald_ore" => Block::EmeraldOre(EmeraldOre {}),
		"minecraft:deepslate_emerald_ore" => Block::DeepslateEmeraldOre(DeepslateEmeraldOre {}),
		"minecraft:ender_chest" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::EnderChest(EnderChest {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:tripwire_hook" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::TripwireHook(TripwireHook {
				r#attached: map.get("attached").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:tripwire" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Tripwire(Tripwire {
				r#attached: map.get("attached").unwrap().parse().unwrap(),
				r#disarmed: map.get("disarmed").unwrap().parse().unwrap(),
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:emerald_block" => Block::EmeraldBlock(EmeraldBlock {}),
		"minecraft:spruce_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SpruceStairs(SpruceStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:birch_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BirchStairs(BirchStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:jungle_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::JungleStairs(JungleStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:command_block" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CommandBlock(CommandBlock {
				r#conditional: map.get("conditional").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:beacon" => Block::Beacon(Beacon {}),
		"minecraft:cobblestone_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CobblestoneWall(CobblestoneWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mossy_cobblestone_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MossyCobblestoneWall(MossyCobblestoneWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:flower_pot" => Block::FlowerPot(FlowerPot {}),
		"minecraft:potted_oak_sapling" => Block::PottedOakSapling(PottedOakSapling {}),
		"minecraft:potted_spruce_sapling" => Block::PottedSpruceSapling(PottedSpruceSapling {}),
		"minecraft:potted_birch_sapling" => Block::PottedBirchSapling(PottedBirchSapling {}),
		"minecraft:potted_jungle_sapling" => Block::PottedJungleSapling(PottedJungleSapling {}),
		"minecraft:potted_acacia_sapling" => Block::PottedAcaciaSapling(PottedAcaciaSapling {}),
		"minecraft:potted_dark_oak_sapling" => Block::PottedDarkOakSapling(PottedDarkOakSapling {}),
		"minecraft:potted_mangrove_propagule" => Block::PottedMangrovePropagule(PottedMangrovePropagule {}),
		"minecraft:potted_fern" => Block::PottedFern(PottedFern {}),
		"minecraft:potted_dandelion" => Block::PottedDandelion(PottedDandelion {}),
		"minecraft:potted_poppy" => Block::PottedPoppy(PottedPoppy {}),
		"minecraft:potted_blue_orchid" => Block::PottedBlueOrchid(PottedBlueOrchid {}),
		"minecraft:potted_allium" => Block::PottedAllium(PottedAllium {}),
		"minecraft:potted_azure_bluet" => Block::PottedAzureBluet(PottedAzureBluet {}),
		"minecraft:potted_red_tulip" => Block::PottedRedTulip(PottedRedTulip {}),
		"minecraft:potted_orange_tulip" => Block::PottedOrangeTulip(PottedOrangeTulip {}),
		"minecraft:potted_white_tulip" => Block::PottedWhiteTulip(PottedWhiteTulip {}),
		"minecraft:potted_pink_tulip" => Block::PottedPinkTulip(PottedPinkTulip {}),
		"minecraft:potted_oxeye_daisy" => Block::PottedOxeyeDaisy(PottedOxeyeDaisy {}),
		"minecraft:potted_cornflower" => Block::PottedCornflower(PottedCornflower {}),
		"minecraft:potted_lily_of_the_valley" => Block::PottedLilyOfTheValley(PottedLilyOfTheValley {}),
		"minecraft:potted_wither_rose" => Block::PottedWitherRose(PottedWitherRose {}),
		"minecraft:potted_red_mushroom" => Block::PottedRedMushroom(PottedRedMushroom {}),
		"minecraft:potted_brown_mushroom" => Block::PottedBrownMushroom(PottedBrownMushroom {}),
		"minecraft:potted_dead_bush" => Block::PottedDeadBush(PottedDeadBush {}),
		"minecraft:potted_cactus" => Block::PottedCactus(PottedCactus {}),
		"minecraft:carrots" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Carrots(Carrots {
				r#age: map.get("age").unwrap().parse().unwrap(),
			})
		},
		"minecraft:potatoes" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Potatoes(Potatoes {
				r#age: map.get("age").unwrap().parse().unwrap(),
			})
		},
		"minecraft:oak_button" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OakButton(OakButton {
				r#face: map.get("face").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:spruce_button" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SpruceButton(SpruceButton {
				r#face: map.get("face").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:birch_button" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BirchButton(BirchButton {
				r#face: map.get("face").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:jungle_button" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::JungleButton(JungleButton {
				r#face: map.get("face").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:acacia_button" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AcaciaButton(AcaciaButton {
				r#face: map.get("face").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dark_oak_button" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DarkOakButton(DarkOakButton {
				r#face: map.get("face").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mangrove_button" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MangroveButton(MangroveButton {
				r#face: map.get("face").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:skeleton_skull" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SkeletonSkull(SkeletonSkull {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:skeleton_wall_skull" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SkeletonWallSkull(SkeletonWallSkull {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:wither_skeleton_skull" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WitherSkeletonSkull(WitherSkeletonSkull {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:wither_skeleton_wall_skull" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WitherSkeletonWallSkull(WitherSkeletonWallSkull {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:zombie_head" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::ZombieHead(ZombieHead {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:zombie_wall_head" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::ZombieWallHead(ZombieWallHead {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:player_head" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PlayerHead(PlayerHead {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:player_wall_head" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PlayerWallHead(PlayerWallHead {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:creeper_head" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CreeperHead(CreeperHead {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:creeper_wall_head" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CreeperWallHead(CreeperWallHead {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dragon_head" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DragonHead(DragonHead {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dragon_wall_head" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DragonWallHead(DragonWallHead {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:anvil" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Anvil(Anvil {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:chipped_anvil" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::ChippedAnvil(ChippedAnvil {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:damaged_anvil" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DamagedAnvil(DamagedAnvil {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:trapped_chest" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::TrappedChest(TrappedChest {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:light_weighted_pressure_plate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightWeightedPressurePlate(LightWeightedPressurePlate {
				r#power: map.get("power").unwrap().parse().unwrap(),
			})
		},
		"minecraft:heavy_weighted_pressure_plate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::HeavyWeightedPressurePlate(HeavyWeightedPressurePlate {
				r#power: map.get("power").unwrap().parse().unwrap(),
			})
		},
		"minecraft:comparator" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Comparator(Comparator {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#mode: map.get("mode").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:daylight_detector" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DaylightDetector(DaylightDetector {
				r#inverted: map.get("inverted").unwrap().parse().unwrap(),
				r#power: map.get("power").unwrap().parse().unwrap(),
			})
		},
		"minecraft:redstone_block" => Block::RedstoneBlock(RedstoneBlock {}),
		"minecraft:nether_quartz_ore" => Block::NetherQuartzOre(NetherQuartzOre {}),
		"minecraft:hopper" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Hopper(Hopper {
				r#enabled: map.get("enabled").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:quartz_block" => Block::QuartzBlock(QuartzBlock {}),
		"minecraft:chiseled_quartz_block" => Block::ChiseledQuartzBlock(ChiseledQuartzBlock {}),
		"minecraft:quartz_pillar" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::QuartzPillar(QuartzPillar {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:quartz_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::QuartzStairs(QuartzStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:activator_rail" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::ActivatorRail(ActivatorRail {
				r#powered: map.get("powered").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dropper" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Dropper(Dropper {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#triggered: map.get("triggered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:white_terracotta" => Block::WhiteTerracotta(WhiteTerracotta {}),
		"minecraft:orange_terracotta" => Block::OrangeTerracotta(OrangeTerracotta {}),
		"minecraft:magenta_terracotta" => Block::MagentaTerracotta(MagentaTerracotta {}),
		"minecraft:light_blue_terracotta" => Block::LightBlueTerracotta(LightBlueTerracotta {}),
		"minecraft:yellow_terracotta" => Block::YellowTerracotta(YellowTerracotta {}),
		"minecraft:lime_terracotta" => Block::LimeTerracotta(LimeTerracotta {}),
		"minecraft:pink_terracotta" => Block::PinkTerracotta(PinkTerracotta {}),
		"minecraft:gray_terracotta" => Block::GrayTerracotta(GrayTerracotta {}),
		"minecraft:light_gray_terracotta" => Block::LightGrayTerracotta(LightGrayTerracotta {}),
		"minecraft:cyan_terracotta" => Block::CyanTerracotta(CyanTerracotta {}),
		"minecraft:purple_terracotta" => Block::PurpleTerracotta(PurpleTerracotta {}),
		"minecraft:blue_terracotta" => Block::BlueTerracotta(BlueTerracotta {}),
		"minecraft:brown_terracotta" => Block::BrownTerracotta(BrownTerracotta {}),
		"minecraft:green_terracotta" => Block::GreenTerracotta(GreenTerracotta {}),
		"minecraft:red_terracotta" => Block::RedTerracotta(RedTerracotta {}),
		"minecraft:black_terracotta" => Block::BlackTerracotta(BlackTerracotta {}),
		"minecraft:white_stained_glass_pane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WhiteStainedGlassPane(WhiteStainedGlassPane {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:orange_stained_glass_pane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OrangeStainedGlassPane(OrangeStainedGlassPane {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:magenta_stained_glass_pane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MagentaStainedGlassPane(MagentaStainedGlassPane {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:light_blue_stained_glass_pane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightBlueStainedGlassPane(LightBlueStainedGlassPane {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:yellow_stained_glass_pane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::YellowStainedGlassPane(YellowStainedGlassPane {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:lime_stained_glass_pane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LimeStainedGlassPane(LimeStainedGlassPane {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:pink_stained_glass_pane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PinkStainedGlassPane(PinkStainedGlassPane {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:gray_stained_glass_pane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GrayStainedGlassPane(GrayStainedGlassPane {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:light_gray_stained_glass_pane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightGrayStainedGlassPane(LightGrayStainedGlassPane {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cyan_stained_glass_pane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CyanStainedGlassPane(CyanStainedGlassPane {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:purple_stained_glass_pane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PurpleStainedGlassPane(PurpleStainedGlassPane {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:blue_stained_glass_pane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlueStainedGlassPane(BlueStainedGlassPane {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:brown_stained_glass_pane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BrownStainedGlassPane(BrownStainedGlassPane {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:green_stained_glass_pane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GreenStainedGlassPane(GreenStainedGlassPane {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:red_stained_glass_pane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedStainedGlassPane(RedStainedGlassPane {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:black_stained_glass_pane" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlackStainedGlassPane(BlackStainedGlassPane {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:acacia_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AcaciaStairs(AcaciaStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dark_oak_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DarkOakStairs(DarkOakStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mangrove_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MangroveStairs(MangroveStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:slime_block" => Block::SlimeBlock(SlimeBlock {}),
		"minecraft:barrier" => Block::Barrier(Barrier {}),
		"minecraft:light" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Light(Light {
				r#level: map.get("level").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:iron_trapdoor" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::IronTrapdoor(IronTrapdoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:prismarine" => Block::Prismarine(Prismarine {}),
		"minecraft:prismarine_bricks" => Block::PrismarineBricks(PrismarineBricks {}),
		"minecraft:dark_prismarine" => Block::DarkPrismarine(DarkPrismarine {}),
		"minecraft:prismarine_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PrismarineStairs(PrismarineStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:prismarine_brick_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PrismarineBrickStairs(PrismarineBrickStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dark_prismarine_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DarkPrismarineStairs(DarkPrismarineStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:prismarine_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PrismarineSlab(PrismarineSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:prismarine_brick_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PrismarineBrickSlab(PrismarineBrickSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dark_prismarine_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DarkPrismarineSlab(DarkPrismarineSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:sea_lantern" => Block::SeaLantern(SeaLantern {}),
		"minecraft:hay_block" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::HayBlock(HayBlock {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:white_carpet" => Block::WhiteCarpet(WhiteCarpet {}),
		"minecraft:orange_carpet" => Block::OrangeCarpet(OrangeCarpet {}),
		"minecraft:magenta_carpet" => Block::MagentaCarpet(MagentaCarpet {}),
		"minecraft:light_blue_carpet" => Block::LightBlueCarpet(LightBlueCarpet {}),
		"minecraft:yellow_carpet" => Block::YellowCarpet(YellowCarpet {}),
		"minecraft:lime_carpet" => Block::LimeCarpet(LimeCarpet {}),
		"minecraft:pink_carpet" => Block::PinkCarpet(PinkCarpet {}),
		"minecraft:gray_carpet" => Block::GrayCarpet(GrayCarpet {}),
		"minecraft:light_gray_carpet" => Block::LightGrayCarpet(LightGrayCarpet {}),
		"minecraft:cyan_carpet" => Block::CyanCarpet(CyanCarpet {}),
		"minecraft:purple_carpet" => Block::PurpleCarpet(PurpleCarpet {}),
		"minecraft:blue_carpet" => Block::BlueCarpet(BlueCarpet {}),
		"minecraft:brown_carpet" => Block::BrownCarpet(BrownCarpet {}),
		"minecraft:green_carpet" => Block::GreenCarpet(GreenCarpet {}),
		"minecraft:red_carpet" => Block::RedCarpet(RedCarpet {}),
		"minecraft:black_carpet" => Block::BlackCarpet(BlackCarpet {}),
		"minecraft:terracotta" => Block::Terracotta(Terracotta {}),
		"minecraft:coal_block" => Block::CoalBlock(CoalBlock {}),
		"minecraft:packed_ice" => Block::PackedIce(PackedIce {}),
		"minecraft:sunflower" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Sunflower(Sunflower {
				r#half: map.get("half").unwrap().parse().unwrap(),
			})
		},
		"minecraft:lilac" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Lilac(Lilac {
				r#half: map.get("half").unwrap().parse().unwrap(),
			})
		},
		"minecraft:rose_bush" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RoseBush(RoseBush {
				r#half: map.get("half").unwrap().parse().unwrap(),
			})
		},
		"minecraft:peony" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Peony(Peony {
				r#half: map.get("half").unwrap().parse().unwrap(),
			})
		},
		"minecraft:tall_grass" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::TallGrass(TallGrass {
				r#half: map.get("half").unwrap().parse().unwrap(),
			})
		},
		"minecraft:large_fern" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LargeFern(LargeFern {
				r#half: map.get("half").unwrap().parse().unwrap(),
			})
		},
		"minecraft:white_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WhiteBanner(WhiteBanner {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:orange_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OrangeBanner(OrangeBanner {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:magenta_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MagentaBanner(MagentaBanner {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:light_blue_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightBlueBanner(LightBlueBanner {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:yellow_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::YellowBanner(YellowBanner {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:lime_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LimeBanner(LimeBanner {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:pink_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PinkBanner(PinkBanner {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:gray_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GrayBanner(GrayBanner {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:light_gray_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightGrayBanner(LightGrayBanner {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cyan_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CyanBanner(CyanBanner {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:purple_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PurpleBanner(PurpleBanner {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:blue_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlueBanner(BlueBanner {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:brown_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BrownBanner(BrownBanner {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:green_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GreenBanner(GreenBanner {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:red_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedBanner(RedBanner {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:black_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlackBanner(BlackBanner {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:white_wall_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WhiteWallBanner(WhiteWallBanner {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:orange_wall_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OrangeWallBanner(OrangeWallBanner {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:magenta_wall_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MagentaWallBanner(MagentaWallBanner {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:light_blue_wall_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightBlueWallBanner(LightBlueWallBanner {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:yellow_wall_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::YellowWallBanner(YellowWallBanner {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:lime_wall_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LimeWallBanner(LimeWallBanner {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:pink_wall_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PinkWallBanner(PinkWallBanner {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:gray_wall_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GrayWallBanner(GrayWallBanner {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:light_gray_wall_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightGrayWallBanner(LightGrayWallBanner {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cyan_wall_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CyanWallBanner(CyanWallBanner {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:purple_wall_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PurpleWallBanner(PurpleWallBanner {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:blue_wall_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlueWallBanner(BlueWallBanner {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:brown_wall_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BrownWallBanner(BrownWallBanner {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:green_wall_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GreenWallBanner(GreenWallBanner {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:red_wall_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedWallBanner(RedWallBanner {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:black_wall_banner" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlackWallBanner(BlackWallBanner {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:red_sandstone" => Block::RedSandstone(RedSandstone {}),
		"minecraft:chiseled_red_sandstone" => Block::ChiseledRedSandstone(ChiseledRedSandstone {}),
		"minecraft:cut_red_sandstone" => Block::CutRedSandstone(CutRedSandstone {}),
		"minecraft:red_sandstone_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedSandstoneStairs(RedSandstoneStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:oak_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OakSlab(OakSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:spruce_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SpruceSlab(SpruceSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:birch_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BirchSlab(BirchSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:jungle_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::JungleSlab(JungleSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:acacia_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AcaciaSlab(AcaciaSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dark_oak_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DarkOakSlab(DarkOakSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mangrove_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MangroveSlab(MangroveSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stone_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StoneSlab(StoneSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:smooth_stone_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SmoothStoneSlab(SmoothStoneSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:sandstone_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SandstoneSlab(SandstoneSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cut_sandstone_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CutSandstoneSlab(CutSandstoneSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:petrified_oak_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PetrifiedOakSlab(PetrifiedOakSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cobblestone_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CobblestoneSlab(CobblestoneSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:brick_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BrickSlab(BrickSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stone_brick_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StoneBrickSlab(StoneBrickSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mud_brick_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MudBrickSlab(MudBrickSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:nether_brick_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::NetherBrickSlab(NetherBrickSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:quartz_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::QuartzSlab(QuartzSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:red_sandstone_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedSandstoneSlab(RedSandstoneSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cut_red_sandstone_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CutRedSandstoneSlab(CutRedSandstoneSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:purpur_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PurpurSlab(PurpurSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:smooth_stone" => Block::SmoothStone(SmoothStone {}),
		"minecraft:smooth_sandstone" => Block::SmoothSandstone(SmoothSandstone {}),
		"minecraft:smooth_quartz" => Block::SmoothQuartz(SmoothQuartz {}),
		"minecraft:smooth_red_sandstone" => Block::SmoothRedSandstone(SmoothRedSandstone {}),
		"minecraft:spruce_fence_gate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SpruceFenceGate(SpruceFenceGate {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#in_wall: map.get("in_wall").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:birch_fence_gate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BirchFenceGate(BirchFenceGate {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#in_wall: map.get("in_wall").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:jungle_fence_gate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::JungleFenceGate(JungleFenceGate {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#in_wall: map.get("in_wall").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:acacia_fence_gate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AcaciaFenceGate(AcaciaFenceGate {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#in_wall: map.get("in_wall").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dark_oak_fence_gate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DarkOakFenceGate(DarkOakFenceGate {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#in_wall: map.get("in_wall").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mangrove_fence_gate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MangroveFenceGate(MangroveFenceGate {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#in_wall: map.get("in_wall").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:spruce_fence" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SpruceFence(SpruceFence {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:birch_fence" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BirchFence(BirchFence {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:jungle_fence" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::JungleFence(JungleFence {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:acacia_fence" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AcaciaFence(AcaciaFence {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dark_oak_fence" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DarkOakFence(DarkOakFence {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mangrove_fence" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MangroveFence(MangroveFence {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:spruce_door" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SpruceDoor(SpruceDoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#hinge: map.get("hinge").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:birch_door" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BirchDoor(BirchDoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#hinge: map.get("hinge").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:jungle_door" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::JungleDoor(JungleDoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#hinge: map.get("hinge").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:acacia_door" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AcaciaDoor(AcaciaDoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#hinge: map.get("hinge").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dark_oak_door" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DarkOakDoor(DarkOakDoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#hinge: map.get("hinge").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mangrove_door" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MangroveDoor(MangroveDoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#hinge: map.get("hinge").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:end_rod" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::EndRod(EndRod {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:chorus_plant" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::ChorusPlant(ChorusPlant {
				r#down: map.get("down").unwrap().parse().unwrap(),
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:chorus_flower" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::ChorusFlower(ChorusFlower {
				r#age: map.get("age").unwrap().parse().unwrap(),
			})
		},
		"minecraft:purpur_block" => Block::PurpurBlock(PurpurBlock {}),
		"minecraft:purpur_pillar" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PurpurPillar(PurpurPillar {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:purpur_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PurpurStairs(PurpurStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:end_stone_bricks" => Block::EndStoneBricks(EndStoneBricks {}),
		"minecraft:beetroots" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Beetroots(Beetroots {
				r#age: map.get("age").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dirt_path" => Block::DirtPath(DirtPath {}),
		"minecraft:end_gateway" => Block::EndGateway(EndGateway {}),
		"minecraft:repeating_command_block" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RepeatingCommandBlock(RepeatingCommandBlock {
				r#conditional: map.get("conditional").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:chain_command_block" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::ChainCommandBlock(ChainCommandBlock {
				r#conditional: map.get("conditional").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:frosted_ice" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::FrostedIce(FrostedIce {
				r#age: map.get("age").unwrap().parse().unwrap(),
			})
		},
		"minecraft:magma_block" => Block::MagmaBlock(MagmaBlock {}),
		"minecraft:nether_wart_block" => Block::NetherWartBlock(NetherWartBlock {}),
		"minecraft:red_nether_bricks" => Block::RedNetherBricks(RedNetherBricks {}),
		"minecraft:bone_block" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BoneBlock(BoneBlock {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:structure_void" => Block::StructureVoid(StructureVoid {}),
		"minecraft:observer" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Observer(Observer {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:shulker_box" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::ShulkerBox(ShulkerBox {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:white_shulker_box" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WhiteShulkerBox(WhiteShulkerBox {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:orange_shulker_box" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OrangeShulkerBox(OrangeShulkerBox {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:magenta_shulker_box" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MagentaShulkerBox(MagentaShulkerBox {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:light_blue_shulker_box" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightBlueShulkerBox(LightBlueShulkerBox {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:yellow_shulker_box" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::YellowShulkerBox(YellowShulkerBox {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:lime_shulker_box" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LimeShulkerBox(LimeShulkerBox {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:pink_shulker_box" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PinkShulkerBox(PinkShulkerBox {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:gray_shulker_box" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GrayShulkerBox(GrayShulkerBox {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:light_gray_shulker_box" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightGrayShulkerBox(LightGrayShulkerBox {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cyan_shulker_box" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CyanShulkerBox(CyanShulkerBox {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:purple_shulker_box" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PurpleShulkerBox(PurpleShulkerBox {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:blue_shulker_box" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlueShulkerBox(BlueShulkerBox {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:brown_shulker_box" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BrownShulkerBox(BrownShulkerBox {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:green_shulker_box" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GreenShulkerBox(GreenShulkerBox {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:red_shulker_box" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedShulkerBox(RedShulkerBox {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:black_shulker_box" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlackShulkerBox(BlackShulkerBox {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:white_glazed_terracotta" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WhiteGlazedTerracotta(WhiteGlazedTerracotta {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:orange_glazed_terracotta" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OrangeGlazedTerracotta(OrangeGlazedTerracotta {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:magenta_glazed_terracotta" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MagentaGlazedTerracotta(MagentaGlazedTerracotta {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:light_blue_glazed_terracotta" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightBlueGlazedTerracotta(LightBlueGlazedTerracotta {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:yellow_glazed_terracotta" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::YellowGlazedTerracotta(YellowGlazedTerracotta {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:lime_glazed_terracotta" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LimeGlazedTerracotta(LimeGlazedTerracotta {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:pink_glazed_terracotta" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PinkGlazedTerracotta(PinkGlazedTerracotta {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:gray_glazed_terracotta" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GrayGlazedTerracotta(GrayGlazedTerracotta {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:light_gray_glazed_terracotta" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightGrayGlazedTerracotta(LightGrayGlazedTerracotta {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cyan_glazed_terracotta" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CyanGlazedTerracotta(CyanGlazedTerracotta {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:purple_glazed_terracotta" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PurpleGlazedTerracotta(PurpleGlazedTerracotta {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:blue_glazed_terracotta" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlueGlazedTerracotta(BlueGlazedTerracotta {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:brown_glazed_terracotta" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BrownGlazedTerracotta(BrownGlazedTerracotta {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:green_glazed_terracotta" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GreenGlazedTerracotta(GreenGlazedTerracotta {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:red_glazed_terracotta" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedGlazedTerracotta(RedGlazedTerracotta {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:black_glazed_terracotta" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlackGlazedTerracotta(BlackGlazedTerracotta {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:white_concrete" => Block::WhiteConcrete(WhiteConcrete {}),
		"minecraft:orange_concrete" => Block::OrangeConcrete(OrangeConcrete {}),
		"minecraft:magenta_concrete" => Block::MagentaConcrete(MagentaConcrete {}),
		"minecraft:light_blue_concrete" => Block::LightBlueConcrete(LightBlueConcrete {}),
		"minecraft:yellow_concrete" => Block::YellowConcrete(YellowConcrete {}),
		"minecraft:lime_concrete" => Block::LimeConcrete(LimeConcrete {}),
		"minecraft:pink_concrete" => Block::PinkConcrete(PinkConcrete {}),
		"minecraft:gray_concrete" => Block::GrayConcrete(GrayConcrete {}),
		"minecraft:light_gray_concrete" => Block::LightGrayConcrete(LightGrayConcrete {}),
		"minecraft:cyan_concrete" => Block::CyanConcrete(CyanConcrete {}),
		"minecraft:purple_concrete" => Block::PurpleConcrete(PurpleConcrete {}),
		"minecraft:blue_concrete" => Block::BlueConcrete(BlueConcrete {}),
		"minecraft:brown_concrete" => Block::BrownConcrete(BrownConcrete {}),
		"minecraft:green_concrete" => Block::GreenConcrete(GreenConcrete {}),
		"minecraft:red_concrete" => Block::RedConcrete(RedConcrete {}),
		"minecraft:black_concrete" => Block::BlackConcrete(BlackConcrete {}),
		"minecraft:white_concrete_powder" => Block::WhiteConcretePowder(WhiteConcretePowder {}),
		"minecraft:orange_concrete_powder" => Block::OrangeConcretePowder(OrangeConcretePowder {}),
		"minecraft:magenta_concrete_powder" => Block::MagentaConcretePowder(MagentaConcretePowder {}),
		"minecraft:light_blue_concrete_powder" => Block::LightBlueConcretePowder(LightBlueConcretePowder {}),
		"minecraft:yellow_concrete_powder" => Block::YellowConcretePowder(YellowConcretePowder {}),
		"minecraft:lime_concrete_powder" => Block::LimeConcretePowder(LimeConcretePowder {}),
		"minecraft:pink_concrete_powder" => Block::PinkConcretePowder(PinkConcretePowder {}),
		"minecraft:gray_concrete_powder" => Block::GrayConcretePowder(GrayConcretePowder {}),
		"minecraft:light_gray_concrete_powder" => Block::LightGrayConcretePowder(LightGrayConcretePowder {}),
		"minecraft:cyan_concrete_powder" => Block::CyanConcretePowder(CyanConcretePowder {}),
		"minecraft:purple_concrete_powder" => Block::PurpleConcretePowder(PurpleConcretePowder {}),
		"minecraft:blue_concrete_powder" => Block::BlueConcretePowder(BlueConcretePowder {}),
		"minecraft:brown_concrete_powder" => Block::BrownConcretePowder(BrownConcretePowder {}),
		"minecraft:green_concrete_powder" => Block::GreenConcretePowder(GreenConcretePowder {}),
		"minecraft:red_concrete_powder" => Block::RedConcretePowder(RedConcretePowder {}),
		"minecraft:black_concrete_powder" => Block::BlackConcretePowder(BlackConcretePowder {}),
		"minecraft:kelp" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Kelp(Kelp {
				r#age: map.get("age").unwrap().parse().unwrap(),
			})
		},
		"minecraft:kelp_plant" => Block::KelpPlant(KelpPlant {}),
		"minecraft:dried_kelp_block" => Block::DriedKelpBlock(DriedKelpBlock {}),
		"minecraft:turtle_egg" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::TurtleEgg(TurtleEgg {
				r#eggs: map.get("eggs").unwrap().parse().unwrap(),
				r#hatch: map.get("hatch").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dead_tube_coral_block" => Block::DeadTubeCoralBlock(DeadTubeCoralBlock {}),
		"minecraft:dead_brain_coral_block" => Block::DeadBrainCoralBlock(DeadBrainCoralBlock {}),
		"minecraft:dead_bubble_coral_block" => Block::DeadBubbleCoralBlock(DeadBubbleCoralBlock {}),
		"minecraft:dead_fire_coral_block" => Block::DeadFireCoralBlock(DeadFireCoralBlock {}),
		"minecraft:dead_horn_coral_block" => Block::DeadHornCoralBlock(DeadHornCoralBlock {}),
		"minecraft:tube_coral_block" => Block::TubeCoralBlock(TubeCoralBlock {}),
		"minecraft:brain_coral_block" => Block::BrainCoralBlock(BrainCoralBlock {}),
		"minecraft:bubble_coral_block" => Block::BubbleCoralBlock(BubbleCoralBlock {}),
		"minecraft:fire_coral_block" => Block::FireCoralBlock(FireCoralBlock {}),
		"minecraft:horn_coral_block" => Block::HornCoralBlock(HornCoralBlock {}),
		"minecraft:dead_tube_coral" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeadTubeCoral(DeadTubeCoral {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dead_brain_coral" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeadBrainCoral(DeadBrainCoral {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dead_bubble_coral" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeadBubbleCoral(DeadBubbleCoral {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dead_fire_coral" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeadFireCoral(DeadFireCoral {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dead_horn_coral" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeadHornCoral(DeadHornCoral {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:tube_coral" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::TubeCoral(TubeCoral {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:brain_coral" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BrainCoral(BrainCoral {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:bubble_coral" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BubbleCoral(BubbleCoral {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:fire_coral" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::FireCoral(FireCoral {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:horn_coral" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::HornCoral(HornCoral {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dead_tube_coral_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeadTubeCoralFan(DeadTubeCoralFan {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dead_brain_coral_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeadBrainCoralFan(DeadBrainCoralFan {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dead_bubble_coral_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeadBubbleCoralFan(DeadBubbleCoralFan {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dead_fire_coral_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeadFireCoralFan(DeadFireCoralFan {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dead_horn_coral_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeadHornCoralFan(DeadHornCoralFan {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:tube_coral_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::TubeCoralFan(TubeCoralFan {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:brain_coral_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BrainCoralFan(BrainCoralFan {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:bubble_coral_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BubbleCoralFan(BubbleCoralFan {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:fire_coral_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::FireCoralFan(FireCoralFan {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:horn_coral_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::HornCoralFan(HornCoralFan {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dead_tube_coral_wall_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeadTubeCoralWallFan(DeadTubeCoralWallFan {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dead_brain_coral_wall_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeadBrainCoralWallFan(DeadBrainCoralWallFan {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dead_bubble_coral_wall_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeadBubbleCoralWallFan(DeadBubbleCoralWallFan {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dead_fire_coral_wall_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeadFireCoralWallFan(DeadFireCoralWallFan {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dead_horn_coral_wall_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeadHornCoralWallFan(DeadHornCoralWallFan {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:tube_coral_wall_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::TubeCoralWallFan(TubeCoralWallFan {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:brain_coral_wall_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BrainCoralWallFan(BrainCoralWallFan {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:bubble_coral_wall_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BubbleCoralWallFan(BubbleCoralWallFan {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:fire_coral_wall_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::FireCoralWallFan(FireCoralWallFan {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:horn_coral_wall_fan" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::HornCoralWallFan(HornCoralWallFan {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:sea_pickle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SeaPickle(SeaPickle {
				r#pickles: map.get("pickles").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:blue_ice" => Block::BlueIce(BlueIce {}),
		"minecraft:conduit" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Conduit(Conduit {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:bamboo_sapling" => Block::BambooSapling(BambooSapling {}),
		"minecraft:bamboo" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Bamboo(Bamboo {
				r#age: map.get("age").unwrap().parse().unwrap(),
				r#leaves: map.get("leaves").unwrap().parse().unwrap(),
				r#stage: map.get("stage").unwrap().parse().unwrap(),
			})
		},
		"minecraft:potted_bamboo" => Block::PottedBamboo(PottedBamboo {}),
		"minecraft:void_air" => Block::VoidAir(VoidAir {}),
		"minecraft:cave_air" => Block::CaveAir(CaveAir {}),
		"minecraft:bubble_column" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BubbleColumn(BubbleColumn {
				r#drag: map.get("drag").unwrap().parse().unwrap(),
			})
		},
		"minecraft:polished_granite_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedGraniteStairs(PolishedGraniteStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:smooth_red_sandstone_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SmoothRedSandstoneStairs(SmoothRedSandstoneStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mossy_stone_brick_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MossyStoneBrickStairs(MossyStoneBrickStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:polished_diorite_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedDioriteStairs(PolishedDioriteStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mossy_cobblestone_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MossyCobblestoneStairs(MossyCobblestoneStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:end_stone_brick_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::EndStoneBrickStairs(EndStoneBrickStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stone_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StoneStairs(StoneStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:smooth_sandstone_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SmoothSandstoneStairs(SmoothSandstoneStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:smooth_quartz_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SmoothQuartzStairs(SmoothQuartzStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:granite_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GraniteStairs(GraniteStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:andesite_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AndesiteStairs(AndesiteStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:red_nether_brick_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedNetherBrickStairs(RedNetherBrickStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:polished_andesite_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedAndesiteStairs(PolishedAndesiteStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:diorite_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DioriteStairs(DioriteStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:polished_granite_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedGraniteSlab(PolishedGraniteSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:smooth_red_sandstone_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SmoothRedSandstoneSlab(SmoothRedSandstoneSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mossy_stone_brick_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MossyStoneBrickSlab(MossyStoneBrickSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:polished_diorite_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedDioriteSlab(PolishedDioriteSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mossy_cobblestone_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MossyCobblestoneSlab(MossyCobblestoneSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:end_stone_brick_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::EndStoneBrickSlab(EndStoneBrickSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:smooth_sandstone_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SmoothSandstoneSlab(SmoothSandstoneSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:smooth_quartz_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SmoothQuartzSlab(SmoothQuartzSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:granite_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GraniteSlab(GraniteSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:andesite_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AndesiteSlab(AndesiteSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:red_nether_brick_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedNetherBrickSlab(RedNetherBrickSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:polished_andesite_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedAndesiteSlab(PolishedAndesiteSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:diorite_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DioriteSlab(DioriteSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:brick_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BrickWall(BrickWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:prismarine_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PrismarineWall(PrismarineWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:red_sandstone_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedSandstoneWall(RedSandstoneWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mossy_stone_brick_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MossyStoneBrickWall(MossyStoneBrickWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:granite_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GraniteWall(GraniteWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stone_brick_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StoneBrickWall(StoneBrickWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:mud_brick_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MudBrickWall(MudBrickWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:nether_brick_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::NetherBrickWall(NetherBrickWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:andesite_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AndesiteWall(AndesiteWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:red_nether_brick_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedNetherBrickWall(RedNetherBrickWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:sandstone_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SandstoneWall(SandstoneWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:end_stone_brick_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::EndStoneBrickWall(EndStoneBrickWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:diorite_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DioriteWall(DioriteWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:scaffolding" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Scaffolding(Scaffolding {
				r#bottom: map.get("bottom").unwrap().parse().unwrap(),
				r#distance: map.get("distance").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:loom" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Loom(Loom {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:barrel" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Barrel(Barrel {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
			})
		},
		"minecraft:smoker" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Smoker(Smoker {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:blast_furnace" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlastFurnace(BlastFurnace {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cartography_table" => Block::CartographyTable(CartographyTable {}),
		"minecraft:fletching_table" => Block::FletchingTable(FletchingTable {}),
		"minecraft:grindstone" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Grindstone(Grindstone {
				r#face: map.get("face").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:lectern" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Lectern(Lectern {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#has_book: map.get("has_book").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:smithing_table" => Block::SmithingTable(SmithingTable {}),
		"minecraft:stonecutter" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Stonecutter(Stonecutter {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
			})
		},
		"minecraft:bell" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Bell(Bell {
				r#attachment: map.get("attachment").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:lantern" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Lantern(Lantern {
				r#hanging: map.get("hanging").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:soul_lantern" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SoulLantern(SoulLantern {
				r#hanging: map.get("hanging").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:campfire" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Campfire(Campfire {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#signal_fire: map.get("signal_fire").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:soul_campfire" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SoulCampfire(SoulCampfire {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#signal_fire: map.get("signal_fire").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:sweet_berry_bush" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SweetBerryBush(SweetBerryBush {
				r#age: map.get("age").unwrap().parse().unwrap(),
			})
		},
		"minecraft:warped_stem" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WarpedStem(WarpedStem {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_warped_stem" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedWarpedStem(StrippedWarpedStem {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:warped_hyphae" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WarpedHyphae(WarpedHyphae {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_warped_hyphae" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedWarpedHyphae(StrippedWarpedHyphae {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:warped_nylium" => Block::WarpedNylium(WarpedNylium {}),
		"minecraft:warped_fungus" => Block::WarpedFungus(WarpedFungus {}),
		"minecraft:warped_wart_block" => Block::WarpedWartBlock(WarpedWartBlock {}),
		"minecraft:warped_roots" => Block::WarpedRoots(WarpedRoots {}),
		"minecraft:nether_sprouts" => Block::NetherSprouts(NetherSprouts {}),
		"minecraft:crimson_stem" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CrimsonStem(CrimsonStem {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_crimson_stem" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedCrimsonStem(StrippedCrimsonStem {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:crimson_hyphae" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CrimsonHyphae(CrimsonHyphae {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:stripped_crimson_hyphae" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StrippedCrimsonHyphae(StrippedCrimsonHyphae {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:crimson_nylium" => Block::CrimsonNylium(CrimsonNylium {}),
		"minecraft:crimson_fungus" => Block::CrimsonFungus(CrimsonFungus {}),
		"minecraft:shroomlight" => Block::Shroomlight(Shroomlight {}),
		"minecraft:weeping_vines" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WeepingVines(WeepingVines {
				r#age: map.get("age").unwrap().parse().unwrap(),
			})
		},
		"minecraft:weeping_vines_plant" => Block::WeepingVinesPlant(WeepingVinesPlant {}),
		"minecraft:twisting_vines" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::TwistingVines(TwistingVines {
				r#age: map.get("age").unwrap().parse().unwrap(),
			})
		},
		"minecraft:twisting_vines_plant" => Block::TwistingVinesPlant(TwistingVinesPlant {}),
		"minecraft:crimson_roots" => Block::CrimsonRoots(CrimsonRoots {}),
		"minecraft:crimson_planks" => Block::CrimsonPlanks(CrimsonPlanks {}),
		"minecraft:warped_planks" => Block::WarpedPlanks(WarpedPlanks {}),
		"minecraft:crimson_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CrimsonSlab(CrimsonSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:warped_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WarpedSlab(WarpedSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:crimson_pressure_plate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CrimsonPressurePlate(CrimsonPressurePlate {
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:warped_pressure_plate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WarpedPressurePlate(WarpedPressurePlate {
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:crimson_fence" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CrimsonFence(CrimsonFence {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:warped_fence" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WarpedFence(WarpedFence {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:crimson_trapdoor" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CrimsonTrapdoor(CrimsonTrapdoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:warped_trapdoor" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WarpedTrapdoor(WarpedTrapdoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:crimson_fence_gate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CrimsonFenceGate(CrimsonFenceGate {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#in_wall: map.get("in_wall").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:warped_fence_gate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WarpedFenceGate(WarpedFenceGate {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#in_wall: map.get("in_wall").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:crimson_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CrimsonStairs(CrimsonStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:warped_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WarpedStairs(WarpedStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:crimson_button" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CrimsonButton(CrimsonButton {
				r#face: map.get("face").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:warped_button" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WarpedButton(WarpedButton {
				r#face: map.get("face").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:crimson_door" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CrimsonDoor(CrimsonDoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#hinge: map.get("hinge").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:warped_door" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WarpedDoor(WarpedDoor {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#hinge: map.get("hinge").unwrap().parse().unwrap(),
				r#open: map.get("open").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:crimson_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CrimsonSign(CrimsonSign {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:warped_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WarpedSign(WarpedSign {
				r#rotation: map.get("rotation").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:crimson_wall_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CrimsonWallSign(CrimsonWallSign {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:warped_wall_sign" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WarpedWallSign(WarpedWallSign {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:structure_block" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::StructureBlock(StructureBlock {
				r#mode: map.get("mode").unwrap().parse().unwrap(),
			})
		},
		"minecraft:jigsaw" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Jigsaw(Jigsaw {
				r#orientation: map.get("orientation").unwrap().parse().unwrap(),
			})
		},
		"minecraft:composter" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Composter(Composter {
				r#level: map.get("level").unwrap().parse().unwrap(),
			})
		},
		"minecraft:target" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Target(Target {
				r#power: map.get("power").unwrap().parse().unwrap(),
			})
		},
		"minecraft:bee_nest" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BeeNest(BeeNest {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#honey_level: map.get("honey_level").unwrap().parse().unwrap(),
			})
		},
		"minecraft:beehive" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Beehive(Beehive {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#honey_level: map.get("honey_level").unwrap().parse().unwrap(),
			})
		},
		"minecraft:honey_block" => Block::HoneyBlock(HoneyBlock {}),
		"minecraft:honeycomb_block" => Block::HoneycombBlock(HoneycombBlock {}),
		"minecraft:netherite_block" => Block::NetheriteBlock(NetheriteBlock {}),
		"minecraft:ancient_debris" => Block::AncientDebris(AncientDebris {}),
		"minecraft:crying_obsidian" => Block::CryingObsidian(CryingObsidian {}),
		"minecraft:respawn_anchor" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RespawnAnchor(RespawnAnchor {
				r#charges: map.get("charges").unwrap().parse().unwrap(),
			})
		},
		"minecraft:potted_crimson_fungus" => Block::PottedCrimsonFungus(PottedCrimsonFungus {}),
		"minecraft:potted_warped_fungus" => Block::PottedWarpedFungus(PottedWarpedFungus {}),
		"minecraft:potted_crimson_roots" => Block::PottedCrimsonRoots(PottedCrimsonRoots {}),
		"minecraft:potted_warped_roots" => Block::PottedWarpedRoots(PottedWarpedRoots {}),
		"minecraft:lodestone" => Block::Lodestone(Lodestone {}),
		"minecraft:blackstone" => Block::Blackstone(Blackstone {}),
		"minecraft:blackstone_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlackstoneStairs(BlackstoneStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:blackstone_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlackstoneWall(BlackstoneWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:blackstone_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlackstoneSlab(BlackstoneSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:polished_blackstone" => Block::PolishedBlackstone(PolishedBlackstone {}),
		"minecraft:polished_blackstone_bricks" => Block::PolishedBlackstoneBricks(PolishedBlackstoneBricks {}),
		"minecraft:cracked_polished_blackstone_bricks" => Block::CrackedPolishedBlackstoneBricks(CrackedPolishedBlackstoneBricks {}),
		"minecraft:chiseled_polished_blackstone" => Block::ChiseledPolishedBlackstone(ChiseledPolishedBlackstone {}),
		"minecraft:polished_blackstone_brick_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedBlackstoneBrickSlab(PolishedBlackstoneBrickSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:polished_blackstone_brick_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedBlackstoneBrickStairs(PolishedBlackstoneBrickStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:polished_blackstone_brick_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedBlackstoneBrickWall(PolishedBlackstoneBrickWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:gilded_blackstone" => Block::GildedBlackstone(GildedBlackstone {}),
		"minecraft:polished_blackstone_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedBlackstoneStairs(PolishedBlackstoneStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:polished_blackstone_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedBlackstoneSlab(PolishedBlackstoneSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:polished_blackstone_pressure_plate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedBlackstonePressurePlate(PolishedBlackstonePressurePlate {
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:polished_blackstone_button" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedBlackstoneButton(PolishedBlackstoneButton {
				r#face: map.get("face").unwrap().parse().unwrap(),
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
			})
		},
		"minecraft:polished_blackstone_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedBlackstoneWall(PolishedBlackstoneWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:chiseled_nether_bricks" => Block::ChiseledNetherBricks(ChiseledNetherBricks {}),
		"minecraft:cracked_nether_bricks" => Block::CrackedNetherBricks(CrackedNetherBricks {}),
		"minecraft:quartz_bricks" => Block::QuartzBricks(QuartzBricks {}),
		"minecraft:candle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Candle(Candle {
				r#candles: map.get("candles").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:white_candle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WhiteCandle(WhiteCandle {
				r#candles: map.get("candles").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:orange_candle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OrangeCandle(OrangeCandle {
				r#candles: map.get("candles").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:magenta_candle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MagentaCandle(MagentaCandle {
				r#candles: map.get("candles").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:light_blue_candle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightBlueCandle(LightBlueCandle {
				r#candles: map.get("candles").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:yellow_candle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::YellowCandle(YellowCandle {
				r#candles: map.get("candles").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:lime_candle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LimeCandle(LimeCandle {
				r#candles: map.get("candles").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:pink_candle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PinkCandle(PinkCandle {
				r#candles: map.get("candles").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:gray_candle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GrayCandle(GrayCandle {
				r#candles: map.get("candles").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:light_gray_candle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightGrayCandle(LightGrayCandle {
				r#candles: map.get("candles").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cyan_candle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CyanCandle(CyanCandle {
				r#candles: map.get("candles").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:purple_candle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PurpleCandle(PurpleCandle {
				r#candles: map.get("candles").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:blue_candle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlueCandle(BlueCandle {
				r#candles: map.get("candles").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:brown_candle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BrownCandle(BrownCandle {
				r#candles: map.get("candles").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:green_candle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GreenCandle(GreenCandle {
				r#candles: map.get("candles").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:red_candle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedCandle(RedCandle {
				r#candles: map.get("candles").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:black_candle" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlackCandle(BlackCandle {
				r#candles: map.get("candles").unwrap().parse().unwrap(),
				r#lit: map.get("lit").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:candle_cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CandleCake(CandleCake {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:white_candle_cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WhiteCandleCake(WhiteCandleCake {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:orange_candle_cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OrangeCandleCake(OrangeCandleCake {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:magenta_candle_cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MagentaCandleCake(MagentaCandleCake {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:light_blue_candle_cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightBlueCandleCake(LightBlueCandleCake {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:yellow_candle_cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::YellowCandleCake(YellowCandleCake {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:lime_candle_cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LimeCandleCake(LimeCandleCake {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:pink_candle_cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PinkCandleCake(PinkCandleCake {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:gray_candle_cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GrayCandleCake(GrayCandleCake {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:light_gray_candle_cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightGrayCandleCake(LightGrayCandleCake {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cyan_candle_cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CyanCandleCake(CyanCandleCake {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:purple_candle_cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PurpleCandleCake(PurpleCandleCake {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:blue_candle_cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlueCandleCake(BlueCandleCake {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:brown_candle_cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BrownCandleCake(BrownCandleCake {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:green_candle_cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::GreenCandleCake(GreenCandleCake {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:red_candle_cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::RedCandleCake(RedCandleCake {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:black_candle_cake" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BlackCandleCake(BlackCandleCake {
				r#lit: map.get("lit").unwrap().parse().unwrap(),
			})
		},
		"minecraft:amethyst_block" => Block::AmethystBlock(AmethystBlock {}),
		"minecraft:budding_amethyst" => Block::BuddingAmethyst(BuddingAmethyst {}),
		"minecraft:amethyst_cluster" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::AmethystCluster(AmethystCluster {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:large_amethyst_bud" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LargeAmethystBud(LargeAmethystBud {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:medium_amethyst_bud" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::MediumAmethystBud(MediumAmethystBud {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:small_amethyst_bud" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SmallAmethystBud(SmallAmethystBud {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:tuff" => Block::Tuff(Tuff {}),
		"minecraft:calcite" => Block::Calcite(Calcite {}),
		"minecraft:tinted_glass" => Block::TintedGlass(TintedGlass {}),
		"minecraft:powder_snow" => Block::PowderSnow(PowderSnow {}),
		"minecraft:sculk_sensor" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SculkSensor(SculkSensor {
				r#power: map.get("power").unwrap().parse().unwrap(),
				r#sculk_sensor_phase: map.get("sculk_sensor_phase").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:sculk" => Block::Sculk(Sculk {}),
		"minecraft:sculk_vein" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SculkVein(SculkVein {
				r#down: map.get("down").unwrap().parse().unwrap(),
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:sculk_catalyst" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SculkCatalyst(SculkCatalyst {
				r#bloom: map.get("bloom").unwrap().parse().unwrap(),
			})
		},
		"minecraft:sculk_shrieker" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SculkShrieker(SculkShrieker {
				r#can_summon: map.get("can_summon").unwrap().parse().unwrap(),
				r#shrieking: map.get("shrieking").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:oxidized_copper" => Block::OxidizedCopper(OxidizedCopper {}),
		"minecraft:weathered_copper" => Block::WeatheredCopper(WeatheredCopper {}),
		"minecraft:exposed_copper" => Block::ExposedCopper(ExposedCopper {}),
		"minecraft:copper_block" => Block::CopperBlock(CopperBlock {}),
		"minecraft:copper_ore" => Block::CopperOre(CopperOre {}),
		"minecraft:deepslate_copper_ore" => Block::DeepslateCopperOre(DeepslateCopperOre {}),
		"minecraft:oxidized_cut_copper" => Block::OxidizedCutCopper(OxidizedCutCopper {}),
		"minecraft:weathered_cut_copper" => Block::WeatheredCutCopper(WeatheredCutCopper {}),
		"minecraft:exposed_cut_copper" => Block::ExposedCutCopper(ExposedCutCopper {}),
		"minecraft:cut_copper" => Block::CutCopper(CutCopper {}),
		"minecraft:oxidized_cut_copper_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OxidizedCutCopperStairs(OxidizedCutCopperStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:weathered_cut_copper_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WeatheredCutCopperStairs(WeatheredCutCopperStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:exposed_cut_copper_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::ExposedCutCopperStairs(ExposedCutCopperStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cut_copper_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CutCopperStairs(CutCopperStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:oxidized_cut_copper_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OxidizedCutCopperSlab(OxidizedCutCopperSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:weathered_cut_copper_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WeatheredCutCopperSlab(WeatheredCutCopperSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:exposed_cut_copper_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::ExposedCutCopperSlab(ExposedCutCopperSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cut_copper_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CutCopperSlab(CutCopperSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:waxed_copper_block" => Block::WaxedCopperBlock(WaxedCopperBlock {}),
		"minecraft:waxed_weathered_copper" => Block::WaxedWeatheredCopper(WaxedWeatheredCopper {}),
		"minecraft:waxed_exposed_copper" => Block::WaxedExposedCopper(WaxedExposedCopper {}),
		"minecraft:waxed_oxidized_copper" => Block::WaxedOxidizedCopper(WaxedOxidizedCopper {}),
		"minecraft:waxed_oxidized_cut_copper" => Block::WaxedOxidizedCutCopper(WaxedOxidizedCutCopper {}),
		"minecraft:waxed_weathered_cut_copper" => Block::WaxedWeatheredCutCopper(WaxedWeatheredCutCopper {}),
		"minecraft:waxed_exposed_cut_copper" => Block::WaxedExposedCutCopper(WaxedExposedCutCopper {}),
		"minecraft:waxed_cut_copper" => Block::WaxedCutCopper(WaxedCutCopper {}),
		"minecraft:waxed_oxidized_cut_copper_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WaxedOxidizedCutCopperStairs(WaxedOxidizedCutCopperStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:waxed_weathered_cut_copper_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WaxedWeatheredCutCopperStairs(WaxedWeatheredCutCopperStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:waxed_exposed_cut_copper_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WaxedExposedCutCopperStairs(WaxedExposedCutCopperStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:waxed_cut_copper_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WaxedCutCopperStairs(WaxedCutCopperStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:waxed_oxidized_cut_copper_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WaxedOxidizedCutCopperSlab(WaxedOxidizedCutCopperSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:waxed_weathered_cut_copper_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WaxedWeatheredCutCopperSlab(WaxedWeatheredCutCopperSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:waxed_exposed_cut_copper_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WaxedExposedCutCopperSlab(WaxedExposedCutCopperSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:waxed_cut_copper_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::WaxedCutCopperSlab(WaxedCutCopperSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:lightning_rod" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::LightningRod(LightningRod {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#powered: map.get("powered").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:pointed_dripstone" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PointedDripstone(PointedDripstone {
				r#thickness: map.get("thickness").unwrap().parse().unwrap(),
				r#vertical_direction: map.get("vertical_direction").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:dripstone_block" => Block::DripstoneBlock(DripstoneBlock {}),
		"minecraft:cave_vines" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CaveVines(CaveVines {
				r#age: map.get("age").unwrap().parse().unwrap(),
				r#berries: map.get("berries").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cave_vines_plant" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CaveVinesPlant(CaveVinesPlant {
				r#berries: map.get("berries").unwrap().parse().unwrap(),
			})
		},
		"minecraft:spore_blossom" => Block::SporeBlossom(SporeBlossom {}),
		"minecraft:azalea" => Block::Azalea(Azalea {}),
		"minecraft:flowering_azalea" => Block::FloweringAzalea(FloweringAzalea {}),
		"minecraft:moss_carpet" => Block::MossCarpet(MossCarpet {}),
		"minecraft:moss_block" => Block::MossBlock(MossBlock {}),
		"minecraft:big_dripleaf" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BigDripleaf(BigDripleaf {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#tilt: map.get("tilt").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:big_dripleaf_stem" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::BigDripleafStem(BigDripleafStem {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:small_dripleaf" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::SmallDripleaf(SmallDripleaf {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:hanging_roots" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::HangingRoots(HangingRoots {
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:rooted_dirt" => Block::RootedDirt(RootedDirt {}),
		"minecraft:mud" => Block::Mud(Mud {}),
		"minecraft:deepslate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::Deepslate(Deepslate {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cobbled_deepslate" => Block::CobbledDeepslate(CobbledDeepslate {}),
		"minecraft:cobbled_deepslate_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CobbledDeepslateStairs(CobbledDeepslateStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cobbled_deepslate_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CobbledDeepslateSlab(CobbledDeepslateSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:cobbled_deepslate_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::CobbledDeepslateWall(CobbledDeepslateWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:polished_deepslate" => Block::PolishedDeepslate(PolishedDeepslate {}),
		"minecraft:polished_deepslate_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedDeepslateStairs(PolishedDeepslateStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:polished_deepslate_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedDeepslateSlab(PolishedDeepslateSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:polished_deepslate_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PolishedDeepslateWall(PolishedDeepslateWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:deepslate_tiles" => Block::DeepslateTiles(DeepslateTiles {}),
		"minecraft:deepslate_tile_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeepslateTileStairs(DeepslateTileStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:deepslate_tile_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeepslateTileSlab(DeepslateTileSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:deepslate_tile_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeepslateTileWall(DeepslateTileWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:deepslate_bricks" => Block::DeepslateBricks(DeepslateBricks {}),
		"minecraft:deepslate_brick_stairs" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeepslateBrickStairs(DeepslateBrickStairs {
				r#facing: map.get("facing").unwrap().parse().unwrap(),
				r#half: map.get("half").unwrap().parse().unwrap(),
				r#shape: map.get("shape").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:deepslate_brick_slab" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeepslateBrickSlab(DeepslateBrickSlab {
				r#type: map.get("type").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
			})
		},
		"minecraft:deepslate_brick_wall" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::DeepslateBrickWall(DeepslateBrickWall {
				r#east: map.get("east").unwrap().parse().unwrap(),
				r#north: map.get("north").unwrap().parse().unwrap(),
				r#south: map.get("south").unwrap().parse().unwrap(),
				r#up: map.get("up").unwrap().parse().unwrap(),
				r#waterlogged: map.get("waterlogged").unwrap().parse().unwrap(),
				r#west: map.get("west").unwrap().parse().unwrap(),
			})
		},
		"minecraft:chiseled_deepslate" => Block::ChiseledDeepslate(ChiseledDeepslate {}),
		"minecraft:cracked_deepslate_bricks" => Block::CrackedDeepslateBricks(CrackedDeepslateBricks {}),
		"minecraft:cracked_deepslate_tiles" => Block::CrackedDeepslateTiles(CrackedDeepslateTiles {}),
		"minecraft:infested_deepslate" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::InfestedDeepslate(InfestedDeepslate {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:smooth_basalt" => Block::SmoothBasalt(SmoothBasalt {}),
		"minecraft:raw_iron_block" => Block::RawIronBlock(RawIronBlock {}),
		"minecraft:raw_copper_block" => Block::RawCopperBlock(RawCopperBlock {}),
		"minecraft:raw_gold_block" => Block::RawGoldBlock(RawGoldBlock {}),
		"minecraft:potted_azalea_bush" => Block::PottedAzaleaBush(PottedAzaleaBush {}),
		"minecraft:potted_flowering_azalea_bush" => Block::PottedFloweringAzaleaBush(PottedFloweringAzaleaBush {}),
		"minecraft:ochre_froglight" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::OchreFroglight(OchreFroglight {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:verdant_froglight" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::VerdantFroglight(VerdantFroglight {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:pearlescent_froglight" => {
			if map.is_none() { return Err("Missing block state".to_owned()); }
			let map = map.unwrap();
			Block::PearlescentFroglight(PearlescentFroglight {
				r#axis: map.get("axis").unwrap().parse().unwrap(),
			})
		},
		"minecraft:frogspawn" => Block::Frogspawn(Frogspawn {}),
		"minecraft:reinforced_deepslate" => Block::ReinforcedDeepslate(ReinforcedDeepslate {}),
		_ => return Err(format!("unknown block: {}", tag)),
	})
}

pub mod property_enums {
	use std::str::FromStr;
	
	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Mode {
		compare,
		subtract,
	}
	impl FromStr for Mode {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"compare" => Ok(Mode::compare),
				"subtract" => Ok(Mode::subtract),
				_ => Err(format!("Invalid Mode value: {}", s)),
			}
		}
	}
	impl crate::Values for Mode {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::compare,
				Self::subtract,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Shape {
		north_south,
		east_west,
		ascending_east,
		ascending_west,
		ascending_north,
		ascending_south,
	}
	impl FromStr for Shape {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"north_south" => Ok(Shape::north_south),
				"east_west" => Ok(Shape::east_west),
				"ascending_east" => Ok(Shape::ascending_east),
				"ascending_west" => Ok(Shape::ascending_west),
				"ascending_north" => Ok(Shape::ascending_north),
				"ascending_south" => Ok(Shape::ascending_south),
				_ => Err(format!("Invalid Shape value: {}", s)),
			}
		}
	}
	impl crate::Values for Shape {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::north_south,
				Self::east_west,
				Self::ascending_east,
				Self::ascending_west,
				Self::ascending_north,
				Self::ascending_south,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Half1 {
		top,
		bottom,
	}
	impl FromStr for Half1 {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"top" => Ok(Half1::top),
				"bottom" => Ok(Half1::bottom),
				_ => Err(format!("Invalid Half1 value: {}", s)),
			}
		}
	}
	impl crate::Values for Half1 {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::top,
				Self::bottom,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Axis {
		x,
		y,
		z,
	}
	impl FromStr for Axis {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"x" => Ok(Axis::x),
				"y" => Ok(Axis::y),
				"z" => Ok(Axis::z),
				_ => Err(format!("Invalid Axis value: {}", s)),
			}
		}
	}
	impl crate::Values for Axis {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::x,
				Self::y,
				Self::z,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum North {
		up,
		side,
		none,
	}
	impl FromStr for North {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"up" => Ok(North::up),
				"side" => Ok(North::side),
				"none" => Ok(North::none),
				_ => Err(format!("Invalid North value: {}", s)),
			}
		}
	}
	impl crate::Values for North {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::up,
				Self::side,
				Self::none,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum West1 {
		none,
		low,
		tall,
	}
	impl FromStr for West1 {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"none" => Ok(West1::none),
				"low" => Ok(West1::low),
				"tall" => Ok(West1::tall),
				_ => Err(format!("Invalid West1 value: {}", s)),
			}
		}
	}
	impl crate::Values for West1 {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::none,
				Self::low,
				Self::tall,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Shape2 {
		north_south,
		east_west,
		ascending_east,
		ascending_west,
		ascending_north,
		ascending_south,
		south_east,
		south_west,
		north_west,
		north_east,
	}
	impl FromStr for Shape2 {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"north_south" => Ok(Shape2::north_south),
				"east_west" => Ok(Shape2::east_west),
				"ascending_east" => Ok(Shape2::ascending_east),
				"ascending_west" => Ok(Shape2::ascending_west),
				"ascending_north" => Ok(Shape2::ascending_north),
				"ascending_south" => Ok(Shape2::ascending_south),
				"south_east" => Ok(Shape2::south_east),
				"south_west" => Ok(Shape2::south_west),
				"north_west" => Ok(Shape2::north_west),
				"north_east" => Ok(Shape2::north_east),
				_ => Err(format!("Invalid Shape2 value: {}", s)),
			}
		}
	}
	impl crate::Values for Shape2 {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::north_south,
				Self::east_west,
				Self::ascending_east,
				Self::ascending_west,
				Self::ascending_north,
				Self::ascending_south,
				Self::south_east,
				Self::south_west,
				Self::north_west,
				Self::north_east,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum VerticalDirection {
		up,
		down,
	}
	impl FromStr for VerticalDirection {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"up" => Ok(VerticalDirection::up),
				"down" => Ok(VerticalDirection::down),
				_ => Err(format!("Invalid VerticalDirection value: {}", s)),
			}
		}
	}
	impl crate::Values for VerticalDirection {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::up,
				Self::down,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Tilt {
		none,
		unstable,
		partial,
		full,
	}
	impl FromStr for Tilt {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"none" => Ok(Tilt::none),
				"unstable" => Ok(Tilt::unstable),
				"partial" => Ok(Tilt::partial),
				"full" => Ok(Tilt::full),
				_ => Err(format!("Invalid Tilt value: {}", s)),
			}
		}
	}
	impl crate::Values for Tilt {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::none,
				Self::unstable,
				Self::partial,
				Self::full,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Type {
		normal,
		sticky,
	}
	impl FromStr for Type {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"normal" => Ok(Type::normal),
				"sticky" => Ok(Type::sticky),
				_ => Err(format!("Invalid Type value: {}", s)),
			}
		}
	}
	impl crate::Values for Type {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::normal,
				Self::sticky,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Part {
		head,
		foot,
	}
	impl FromStr for Part {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"head" => Ok(Part::head),
				"foot" => Ok(Part::foot),
				_ => Err(format!("Invalid Part value: {}", s)),
			}
		}
	}
	impl crate::Values for Part {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::head,
				Self::foot,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum East1 {
		none,
		low,
		tall,
	}
	impl FromStr for East1 {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"none" => Ok(East1::none),
				"low" => Ok(East1::low),
				"tall" => Ok(East1::tall),
				_ => Err(format!("Invalid East1 value: {}", s)),
			}
		}
	}
	impl crate::Values for East1 {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::none,
				Self::low,
				Self::tall,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Mode1 {
		save,
		load,
		corner,
		data,
	}
	impl FromStr for Mode1 {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"save" => Ok(Mode1::save),
				"load" => Ok(Mode1::load),
				"corner" => Ok(Mode1::corner),
				"data" => Ok(Mode1::data),
				_ => Err(format!("Invalid Mode1 value: {}", s)),
			}
		}
	}
	impl crate::Values for Mode1 {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::save,
				Self::load,
				Self::corner,
				Self::data,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Facing1 {
		north,
		south,
		west,
		east,
	}
	impl FromStr for Facing1 {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"north" => Ok(Facing1::north),
				"south" => Ok(Facing1::south),
				"west" => Ok(Facing1::west),
				"east" => Ok(Facing1::east),
				_ => Err(format!("Invalid Facing1 value: {}", s)),
			}
		}
	}
	impl crate::Values for Facing1 {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::north,
				Self::south,
				Self::west,
				Self::east,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Face {
		floor,
		wall,
		ceiling,
	}
	impl FromStr for Face {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"floor" => Ok(Face::floor),
				"wall" => Ok(Face::wall),
				"ceiling" => Ok(Face::ceiling),
				_ => Err(format!("Invalid Face value: {}", s)),
			}
		}
	}
	impl crate::Values for Face {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::floor,
				Self::wall,
				Self::ceiling,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Axis1 {
		x,
		z,
	}
	impl FromStr for Axis1 {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"x" => Ok(Axis1::x),
				"z" => Ok(Axis1::z),
				_ => Err(format!("Invalid Axis1 value: {}", s)),
			}
		}
	}
	impl crate::Values for Axis1 {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::x,
				Self::z,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Type1 {
		single,
		left,
		right,
	}
	impl FromStr for Type1 {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"single" => Ok(Type1::single),
				"left" => Ok(Type1::left),
				"right" => Ok(Type1::right),
				_ => Err(format!("Invalid Type1 value: {}", s)),
			}
		}
	}
	impl crate::Values for Type1 {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::single,
				Self::left,
				Self::right,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Thickness {
		tip_merge,
		tip,
		frustum,
		middle,
		base,
	}
	impl FromStr for Thickness {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"tip_merge" => Ok(Thickness::tip_merge),
				"tip" => Ok(Thickness::tip),
				"frustum" => Ok(Thickness::frustum),
				"middle" => Ok(Thickness::middle),
				"base" => Ok(Thickness::base),
				_ => Err(format!("Invalid Thickness value: {}", s)),
			}
		}
	}
	impl crate::Values for Thickness {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::tip_merge,
				Self::tip,
				Self::frustum,
				Self::middle,
				Self::base,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Hinge {
		left,
		right,
	}
	impl FromStr for Hinge {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"left" => Ok(Hinge::left),
				"right" => Ok(Hinge::right),
				_ => Err(format!("Invalid Hinge value: {}", s)),
			}
		}
	}
	impl crate::Values for Hinge {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::left,
				Self::right,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Attachment {
		floor,
		ceiling,
		single_wall,
		double_wall,
	}
	impl FromStr for Attachment {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"floor" => Ok(Attachment::floor),
				"ceiling" => Ok(Attachment::ceiling),
				"single_wall" => Ok(Attachment::single_wall),
				"double_wall" => Ok(Attachment::double_wall),
				_ => Err(format!("Invalid Attachment value: {}", s)),
			}
		}
	}
	impl crate::Values for Attachment {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::floor,
				Self::ceiling,
				Self::single_wall,
				Self::double_wall,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum South {
		up,
		side,
		none,
	}
	impl FromStr for South {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"up" => Ok(South::up),
				"side" => Ok(South::side),
				"none" => Ok(South::none),
				_ => Err(format!("Invalid South value: {}", s)),
			}
		}
	}
	impl crate::Values for South {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::up,
				Self::side,
				Self::none,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum North1 {
		none,
		low,
		tall,
	}
	impl FromStr for North1 {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"none" => Ok(North1::none),
				"low" => Ok(North1::low),
				"tall" => Ok(North1::tall),
				_ => Err(format!("Invalid North1 value: {}", s)),
			}
		}
	}
	impl crate::Values for North1 {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::none,
				Self::low,
				Self::tall,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Instrument {
		harp,
		basedrum,
		snare,
		hat,
		bass,
		flute,
		bell,
		guitar,
		chime,
		xylophone,
		iron_xylophone,
		cow_bell,
		didgeridoo,
		bit,
		banjo,
		pling,
	}
	impl FromStr for Instrument {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"harp" => Ok(Instrument::harp),
				"basedrum" => Ok(Instrument::basedrum),
				"snare" => Ok(Instrument::snare),
				"hat" => Ok(Instrument::hat),
				"bass" => Ok(Instrument::bass),
				"flute" => Ok(Instrument::flute),
				"bell" => Ok(Instrument::bell),
				"guitar" => Ok(Instrument::guitar),
				"chime" => Ok(Instrument::chime),
				"xylophone" => Ok(Instrument::xylophone),
				"iron_xylophone" => Ok(Instrument::iron_xylophone),
				"cow_bell" => Ok(Instrument::cow_bell),
				"didgeridoo" => Ok(Instrument::didgeridoo),
				"bit" => Ok(Instrument::bit),
				"banjo" => Ok(Instrument::banjo),
				"pling" => Ok(Instrument::pling),
				_ => Err(format!("Invalid Instrument value: {}", s)),
			}
		}
	}
	impl crate::Values for Instrument {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::harp,
				Self::basedrum,
				Self::snare,
				Self::hat,
				Self::bass,
				Self::flute,
				Self::bell,
				Self::guitar,
				Self::chime,
				Self::xylophone,
				Self::iron_xylophone,
				Self::cow_bell,
				Self::didgeridoo,
				Self::bit,
				Self::banjo,
				Self::pling,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum West {
		up,
		side,
		none,
	}
	impl FromStr for West {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"up" => Ok(West::up),
				"side" => Ok(West::side),
				"none" => Ok(West::none),
				_ => Err(format!("Invalid West value: {}", s)),
			}
		}
	}
	impl crate::Values for West {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::up,
				Self::side,
				Self::none,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Facing2 {
		down,
		north,
		south,
		west,
		east,
	}
	impl FromStr for Facing2 {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"down" => Ok(Facing2::down),
				"north" => Ok(Facing2::north),
				"south" => Ok(Facing2::south),
				"west" => Ok(Facing2::west),
				"east" => Ok(Facing2::east),
				_ => Err(format!("Invalid Facing2 value: {}", s)),
			}
		}
	}
	impl crate::Values for Facing2 {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::down,
				Self::north,
				Self::south,
				Self::west,
				Self::east,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum South1 {
		none,
		low,
		tall,
	}
	impl FromStr for South1 {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"none" => Ok(South1::none),
				"low" => Ok(South1::low),
				"tall" => Ok(South1::tall),
				_ => Err(format!("Invalid South1 value: {}", s)),
			}
		}
	}
	impl crate::Values for South1 {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::none,
				Self::low,
				Self::tall,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Facing {
		north,
		east,
		south,
		west,
		up,
		down,
	}
	impl FromStr for Facing {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"north" => Ok(Facing::north),
				"east" => Ok(Facing::east),
				"south" => Ok(Facing::south),
				"west" => Ok(Facing::west),
				"up" => Ok(Facing::up),
				"down" => Ok(Facing::down),
				_ => Err(format!("Invalid Facing value: {}", s)),
			}
		}
	}
	impl crate::Values for Facing {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::north,
				Self::east,
				Self::south,
				Self::west,
				Self::up,
				Self::down,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Orientation {
		down_east,
		down_north,
		down_south,
		down_west,
		up_east,
		up_north,
		up_south,
		up_west,
		west_up,
		east_up,
		north_up,
		south_up,
	}
	impl FromStr for Orientation {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"down_east" => Ok(Orientation::down_east),
				"down_north" => Ok(Orientation::down_north),
				"down_south" => Ok(Orientation::down_south),
				"down_west" => Ok(Orientation::down_west),
				"up_east" => Ok(Orientation::up_east),
				"up_north" => Ok(Orientation::up_north),
				"up_south" => Ok(Orientation::up_south),
				"up_west" => Ok(Orientation::up_west),
				"west_up" => Ok(Orientation::west_up),
				"east_up" => Ok(Orientation::east_up),
				"north_up" => Ok(Orientation::north_up),
				"south_up" => Ok(Orientation::south_up),
				_ => Err(format!("Invalid Orientation value: {}", s)),
			}
		}
	}
	impl crate::Values for Orientation {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::down_east,
				Self::down_north,
				Self::down_south,
				Self::down_west,
				Self::up_east,
				Self::up_north,
				Self::up_south,
				Self::up_west,
				Self::west_up,
				Self::east_up,
				Self::north_up,
				Self::south_up,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Leaves {
		none,
		small,
		large,
	}
	impl FromStr for Leaves {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"none" => Ok(Leaves::none),
				"small" => Ok(Leaves::small),
				"large" => Ok(Leaves::large),
				_ => Err(format!("Invalid Leaves value: {}", s)),
			}
		}
	}
	impl crate::Values for Leaves {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::none,
				Self::small,
				Self::large,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum SculkSensorPhase {
		inactive,
		active,
		cooldown,
	}
	impl FromStr for SculkSensorPhase {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"inactive" => Ok(SculkSensorPhase::inactive),
				"active" => Ok(SculkSensorPhase::active),
				"cooldown" => Ok(SculkSensorPhase::cooldown),
				_ => Err(format!("Invalid SculkSensorPhase value: {}", s)),
			}
		}
	}
	impl crate::Values for SculkSensorPhase {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::inactive,
				Self::active,
				Self::cooldown,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum East {
		up,
		side,
		none,
	}
	impl FromStr for East {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"up" => Ok(East::up),
				"side" => Ok(East::side),
				"none" => Ok(East::none),
				_ => Err(format!("Invalid East value: {}", s)),
			}
		}
	}
	impl crate::Values for East {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::up,
				Self::side,
				Self::none,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Shape1 {
		straight,
		inner_left,
		inner_right,
		outer_left,
		outer_right,
	}
	impl FromStr for Shape1 {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"straight" => Ok(Shape1::straight),
				"inner_left" => Ok(Shape1::inner_left),
				"inner_right" => Ok(Shape1::inner_right),
				"outer_left" => Ok(Shape1::outer_left),
				"outer_right" => Ok(Shape1::outer_right),
				_ => Err(format!("Invalid Shape1 value: {}", s)),
			}
		}
	}
	impl crate::Values for Shape1 {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::straight,
				Self::inner_left,
				Self::inner_right,
				Self::outer_left,
				Self::outer_right,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Type2 {
		top,
		bottom,
		double,
	}
	impl FromStr for Type2 {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"top" => Ok(Type2::top),
				"bottom" => Ok(Type2::bottom),
				"double" => Ok(Type2::double),
				_ => Err(format!("Invalid Type2 value: {}", s)),
			}
		}
	}
	impl crate::Values for Type2 {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::top,
				Self::bottom,
				Self::double,
			].into_iter()
		}
	}

	#[derive(Debug, Hash, PartialEq, Eq, Clone)]
	pub enum Half {
		upper,
		lower,
	}
	impl FromStr for Half {
		type Err = String;

		fn from_str(s: &str) -> Result<Self, Self::Err> {
			match s {
				"upper" => Ok(Half::upper),
				"lower" => Ok(Half::lower),
				_ => Err(format!("Invalid Half value: {}", s)),
			}
		}
	}
	impl crate::Values for Half {
		type ValueIterator = std::vec::IntoIter<Self>;

		fn possible_values() -> Self::ValueIterator {
			vec![
				Self::upper,
				Self::lower,
			].into_iter()
		}
	}

}
pub mod blocks_props {

	use crate::BlockProperties;
	use super::*;	

	impl BlockProperties for Air {
		const DISPLAY_NAME: &'static str = "Air";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = false;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Stone {
		const DISPLAY_NAME: &'static str = "Stone";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Granite {
		const DISPLAY_NAME: &'static str = "Granite";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PolishedGranite {
		const DISPLAY_NAME: &'static str = "Polished Granite";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Diorite {
		const DISPLAY_NAME: &'static str = "Diorite";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PolishedDiorite {
		const DISPLAY_NAME: &'static str = "Polished Diorite";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Andesite {
		const DISPLAY_NAME: &'static str = "Andesite";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PolishedAndesite {
		const DISPLAY_NAME: &'static str = "Polished Andesite";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for GrassBlock {
		const DISPLAY_NAME: &'static str = "Grass Block";
		const HARDNESS: f32 = 0.6;
		const RESISTANCE: f32 = 0.6;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Dirt {
		const DISPLAY_NAME: &'static str = "Dirt";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CoarseDirt {
		const DISPLAY_NAME: &'static str = "Coarse Dirt";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Podzol {
		const DISPLAY_NAME: &'static str = "Podzol";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Cobblestone {
		const DISPLAY_NAME: &'static str = "Cobblestone";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for OakPlanks {
		const DISPLAY_NAME: &'static str = "Oak Planks";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for SprucePlanks {
		const DISPLAY_NAME: &'static str = "Spruce Planks";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BirchPlanks {
		const DISPLAY_NAME: &'static str = "Birch Planks";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for JunglePlanks {
		const DISPLAY_NAME: &'static str = "Jungle Planks";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for AcaciaPlanks {
		const DISPLAY_NAME: &'static str = "Acacia Planks";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DarkOakPlanks {
		const DISPLAY_NAME: &'static str = "Dark Oak Planks";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for MangrovePlanks {
		const DISPLAY_NAME: &'static str = "Mangrove Planks";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for OakSapling {
		const DISPLAY_NAME: &'static str = "Oak Sapling";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SpruceSapling {
		const DISPLAY_NAME: &'static str = "Spruce Sapling";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BirchSapling {
		const DISPLAY_NAME: &'static str = "Birch Sapling";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for JungleSapling {
		const DISPLAY_NAME: &'static str = "Jungle Sapling";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for AcaciaSapling {
		const DISPLAY_NAME: &'static str = "Acacia Sapling";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DarkOakSapling {
		const DISPLAY_NAME: &'static str = "Dark Oak Sapling";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MangrovePropagule {
		const DISPLAY_NAME: &'static str = "Mangrove Propagule";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Bedrock {
		const DISPLAY_NAME: &'static str = "Bedrock";
		const HARDNESS: f32 = -1.0;
		const RESISTANCE: f32 = 3600000.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = false;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Water {
		const DISPLAY_NAME: &'static str = "Water";
		const HARDNESS: f32 = 100.0;
		const RESISTANCE: f32 = 100.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for Lava {
		const DISPLAY_NAME: &'static str = "Lava";
		const HARDNESS: f32 = 100.0;
		const RESISTANCE: f32 = 100.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 15;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for Sand {
		const DISPLAY_NAME: &'static str = "Sand";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for RedSand {
		const DISPLAY_NAME: &'static str = "Red Sand";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Gravel {
		const DISPLAY_NAME: &'static str = "Gravel";
		const HARDNESS: f32 = 0.6;
		const RESISTANCE: f32 = 0.6;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for GoldOre {
		const DISPLAY_NAME: &'static str = "Gold Ore";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DeepslateGoldOre {
		const DISPLAY_NAME: &'static str = "Deepslate Gold Ore";
		const HARDNESS: f32 = 4.5;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for IronOre {
		const DISPLAY_NAME: &'static str = "Iron Ore";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DeepslateIronOre {
		const DISPLAY_NAME: &'static str = "Deepslate Iron Ore";
		const HARDNESS: f32 = 4.5;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CoalOre {
		const DISPLAY_NAME: &'static str = "Coal Ore";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DeepslateCoalOre {
		const DISPLAY_NAME: &'static str = "Deepslate Coal Ore";
		const HARDNESS: f32 = 4.5;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for NetherGoldOre {
		const DISPLAY_NAME: &'static str = "Nether Gold Ore";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for OakLog {
		const DISPLAY_NAME: &'static str = "Oak Log";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for SpruceLog {
		const DISPLAY_NAME: &'static str = "Spruce Log";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BirchLog {
		const DISPLAY_NAME: &'static str = "Birch Log";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for JungleLog {
		const DISPLAY_NAME: &'static str = "Jungle Log";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for AcaciaLog {
		const DISPLAY_NAME: &'static str = "Acacia Log";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DarkOakLog {
		const DISPLAY_NAME: &'static str = "Dark Oak Log";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for MangroveLog {
		const DISPLAY_NAME: &'static str = "Mangrove Log";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for MangroveRoots {
		const DISPLAY_NAME: &'static str = "Mangrove Roots";
		const HARDNESS: f32 = 0.7;
		const RESISTANCE: f32 = 0.7;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for MuddyMangroveRoots {
		const DISPLAY_NAME: &'static str = "Muddy Mangrove Roots";
		const HARDNESS: f32 = 0.7;
		const RESISTANCE: f32 = 0.7;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedSpruceLog {
		const DISPLAY_NAME: &'static str = "Stripped Spruce Log";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedBirchLog {
		const DISPLAY_NAME: &'static str = "Stripped Birch Log";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedJungleLog {
		const DISPLAY_NAME: &'static str = "Stripped Jungle Log";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedAcaciaLog {
		const DISPLAY_NAME: &'static str = "Stripped Acacia Log";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedDarkOakLog {
		const DISPLAY_NAME: &'static str = "Stripped Dark Oak Log";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedOakLog {
		const DISPLAY_NAME: &'static str = "Stripped Oak Log";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedMangroveLog {
		const DISPLAY_NAME: &'static str = "Stripped Mangrove Log";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for OakWood {
		const DISPLAY_NAME: &'static str = "Oak Wood";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for SpruceWood {
		const DISPLAY_NAME: &'static str = "Spruce Wood";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BirchWood {
		const DISPLAY_NAME: &'static str = "Birch Wood";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for JungleWood {
		const DISPLAY_NAME: &'static str = "Jungle Wood";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for AcaciaWood {
		const DISPLAY_NAME: &'static str = "Acacia Wood";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DarkOakWood {
		const DISPLAY_NAME: &'static str = "Dark Oak Wood";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for MangroveWood {
		const DISPLAY_NAME: &'static str = "Mangrove Wood";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedOakWood {
		const DISPLAY_NAME: &'static str = "Stripped Oak Wood";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedSpruceWood {
		const DISPLAY_NAME: &'static str = "Stripped Spruce Wood";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedBirchWood {
		const DISPLAY_NAME: &'static str = "Stripped Birch Wood";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedJungleWood {
		const DISPLAY_NAME: &'static str = "Stripped Jungle Wood";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedAcaciaWood {
		const DISPLAY_NAME: &'static str = "Stripped Acacia Wood";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedDarkOakWood {
		const DISPLAY_NAME: &'static str = "Stripped Dark Oak Wood";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedMangroveWood {
		const DISPLAY_NAME: &'static str = "Stripped Mangrove Wood";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for OakLeaves {
		const DISPLAY_NAME: &'static str = "Oak Leaves";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for SpruceLeaves {
		const DISPLAY_NAME: &'static str = "Spruce Leaves";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for BirchLeaves {
		const DISPLAY_NAME: &'static str = "Birch Leaves";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for JungleLeaves {
		const DISPLAY_NAME: &'static str = "Jungle Leaves";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for AcaciaLeaves {
		const DISPLAY_NAME: &'static str = "Acacia Leaves";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for DarkOakLeaves {
		const DISPLAY_NAME: &'static str = "Dark Oak Leaves";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for MangroveLeaves {
		const DISPLAY_NAME: &'static str = "Mangrove Leaves";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for AzaleaLeaves {
		const DISPLAY_NAME: &'static str = "Azalea Leaves";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for FloweringAzaleaLeaves {
		const DISPLAY_NAME: &'static str = "Flowering Azalea Leaves";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for Sponge {
		const DISPLAY_NAME: &'static str = "Sponge";
		const HARDNESS: f32 = 0.6;
		const RESISTANCE: f32 = 0.6;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WetSponge {
		const DISPLAY_NAME: &'static str = "Wet Sponge";
		const HARDNESS: f32 = 0.6;
		const RESISTANCE: f32 = 0.6;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Glass {
		const DISPLAY_NAME: &'static str = "Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LapisOre {
		const DISPLAY_NAME: &'static str = "Lapis Lazuli Ore";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DeepslateLapisOre {
		const DISPLAY_NAME: &'static str = "Deepslate Lapis Lazuli Ore";
		const HARDNESS: f32 = 4.5;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for LapisBlock {
		const DISPLAY_NAME: &'static str = "Block of Lapis Lazuli";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Dispenser {
		const DISPLAY_NAME: &'static str = "Dispenser";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 3.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Sandstone {
		const DISPLAY_NAME: &'static str = "Sandstone";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for ChiseledSandstone {
		const DISPLAY_NAME: &'static str = "Chiseled Sandstone";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CutSandstone {
		const DISPLAY_NAME: &'static str = "Cut Sandstone";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for NoteBlock {
		const DISPLAY_NAME: &'static str = "Note Block";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WhiteBed {
		const DISPLAY_NAME: &'static str = "White Bed";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OrangeBed {
		const DISPLAY_NAME: &'static str = "Orange Bed";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MagentaBed {
		const DISPLAY_NAME: &'static str = "Magenta Bed";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightBlueBed {
		const DISPLAY_NAME: &'static str = "Light Blue Bed";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for YellowBed {
		const DISPLAY_NAME: &'static str = "Yellow Bed";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LimeBed {
		const DISPLAY_NAME: &'static str = "Lime Bed";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PinkBed {
		const DISPLAY_NAME: &'static str = "Pink Bed";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GrayBed {
		const DISPLAY_NAME: &'static str = "Gray Bed";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightGrayBed {
		const DISPLAY_NAME: &'static str = "Light Gray Bed";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CyanBed {
		const DISPLAY_NAME: &'static str = "Cyan Bed";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PurpleBed {
		const DISPLAY_NAME: &'static str = "Purple Bed";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlueBed {
		const DISPLAY_NAME: &'static str = "Blue Bed";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BrownBed {
		const DISPLAY_NAME: &'static str = "Brown Bed";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GreenBed {
		const DISPLAY_NAME: &'static str = "Green Bed";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedBed {
		const DISPLAY_NAME: &'static str = "Red Bed";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlackBed {
		const DISPLAY_NAME: &'static str = "Black Bed";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PoweredRail {
		const DISPLAY_NAME: &'static str = "Powered Rail";
		const HARDNESS: f32 = 0.7;
		const RESISTANCE: f32 = 0.7;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DetectorRail {
		const DISPLAY_NAME: &'static str = "Detector Rail";
		const HARDNESS: f32 = 0.7;
		const RESISTANCE: f32 = 0.7;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for StickyPiston {
		const DISPLAY_NAME: &'static str = "Sticky Piston";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 1.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Cobweb {
		const DISPLAY_NAME: &'static str = "Cobweb";
		const HARDNESS: f32 = 4.0;
		const RESISTANCE: f32 = 4.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for Grass {
		const DISPLAY_NAME: &'static str = "Grass";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Fern {
		const DISPLAY_NAME: &'static str = "Fern";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DeadBush {
		const DISPLAY_NAME: &'static str = "Dead Bush";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Seagrass {
		const DISPLAY_NAME: &'static str = "Seagrass";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for TallSeagrass {
		const DISPLAY_NAME: &'static str = "Tall Seagrass";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for Piston {
		const DISPLAY_NAME: &'static str = "Piston";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 1.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PistonHead {
		const DISPLAY_NAME: &'static str = "Piston Head";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 1.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WhiteWool {
		const DISPLAY_NAME: &'static str = "White Wool";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for OrangeWool {
		const DISPLAY_NAME: &'static str = "Orange Wool";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for MagentaWool {
		const DISPLAY_NAME: &'static str = "Magenta Wool";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for LightBlueWool {
		const DISPLAY_NAME: &'static str = "Light Blue Wool";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for YellowWool {
		const DISPLAY_NAME: &'static str = "Yellow Wool";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for LimeWool {
		const DISPLAY_NAME: &'static str = "Lime Wool";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PinkWool {
		const DISPLAY_NAME: &'static str = "Pink Wool";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for GrayWool {
		const DISPLAY_NAME: &'static str = "Gray Wool";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for LightGrayWool {
		const DISPLAY_NAME: &'static str = "Light Gray Wool";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CyanWool {
		const DISPLAY_NAME: &'static str = "Cyan Wool";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PurpleWool {
		const DISPLAY_NAME: &'static str = "Purple Wool";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BlueWool {
		const DISPLAY_NAME: &'static str = "Blue Wool";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BrownWool {
		const DISPLAY_NAME: &'static str = "Brown Wool";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for GreenWool {
		const DISPLAY_NAME: &'static str = "Green Wool";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for RedWool {
		const DISPLAY_NAME: &'static str = "Red Wool";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BlackWool {
		const DISPLAY_NAME: &'static str = "Black Wool";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for MovingPiston {
		const DISPLAY_NAME: &'static str = "Moving Piston";
		const HARDNESS: f32 = -1.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = false;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Dandelion {
		const DISPLAY_NAME: &'static str = "Dandelion";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Poppy {
		const DISPLAY_NAME: &'static str = "Poppy";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlueOrchid {
		const DISPLAY_NAME: &'static str = "Blue Orchid";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Allium {
		const DISPLAY_NAME: &'static str = "Allium";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for AzureBluet {
		const DISPLAY_NAME: &'static str = "Azure Bluet";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedTulip {
		const DISPLAY_NAME: &'static str = "Red Tulip";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OrangeTulip {
		const DISPLAY_NAME: &'static str = "Orange Tulip";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WhiteTulip {
		const DISPLAY_NAME: &'static str = "White Tulip";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PinkTulip {
		const DISPLAY_NAME: &'static str = "Pink Tulip";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OxeyeDaisy {
		const DISPLAY_NAME: &'static str = "Oxeye Daisy";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Cornflower {
		const DISPLAY_NAME: &'static str = "Cornflower";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WitherRose {
		const DISPLAY_NAME: &'static str = "Wither Rose";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LilyOfTheValley {
		const DISPLAY_NAME: &'static str = "Lily of the Valley";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BrownMushroom {
		const DISPLAY_NAME: &'static str = "Brown Mushroom";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 1;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedMushroom {
		const DISPLAY_NAME: &'static str = "Red Mushroom";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GoldBlock {
		const DISPLAY_NAME: &'static str = "Block of Gold";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for IronBlock {
		const DISPLAY_NAME: &'static str = "Block of Iron";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Bricks {
		const DISPLAY_NAME: &'static str = "Bricks";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Tnt {
		const DISPLAY_NAME: &'static str = "TNT";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Bookshelf {
		const DISPLAY_NAME: &'static str = "Bookshelf";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 1.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for MossyCobblestone {
		const DISPLAY_NAME: &'static str = "Mossy Cobblestone";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Obsidian {
		const DISPLAY_NAME: &'static str = "Obsidian";
		const HARDNESS: f32 = 50.0;
		const RESISTANCE: f32 = 1200.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Torch {
		const DISPLAY_NAME: &'static str = "Torch";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 14;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WallTorch {
		const DISPLAY_NAME: &'static str = "Torch";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 14;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Fire {
		const DISPLAY_NAME: &'static str = "Fire";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 15;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SoulFire {
		const DISPLAY_NAME: &'static str = "Soul Fire";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 10;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Spawner {
		const DISPLAY_NAME: &'static str = "Spawner";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 5.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for OakStairs {
		const DISPLAY_NAME: &'static str = "Oak Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Chest {
		const DISPLAY_NAME: &'static str = "Chest";
		const HARDNESS: f32 = 2.5;
		const RESISTANCE: f32 = 2.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedstoneWire {
		const DISPLAY_NAME: &'static str = "Redstone Wire";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DiamondOre {
		const DISPLAY_NAME: &'static str = "Diamond Ore";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DeepslateDiamondOre {
		const DISPLAY_NAME: &'static str = "Deepslate Diamond Ore";
		const HARDNESS: f32 = 4.5;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DiamondBlock {
		const DISPLAY_NAME: &'static str = "Block of Diamond";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CraftingTable {
		const DISPLAY_NAME: &'static str = "Crafting Table";
		const HARDNESS: f32 = 2.5;
		const RESISTANCE: f32 = 2.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Wheat {
		const DISPLAY_NAME: &'static str = "Wheat Crops";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Farmland {
		const DISPLAY_NAME: &'static str = "Farmland";
		const HARDNESS: f32 = 0.6;
		const RESISTANCE: f32 = 0.6;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Furnace {
		const DISPLAY_NAME: &'static str = "Furnace";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 3.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for OakSign {
		const DISPLAY_NAME: &'static str = "Oak Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SpruceSign {
		const DISPLAY_NAME: &'static str = "Spruce Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BirchSign {
		const DISPLAY_NAME: &'static str = "Birch Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for AcaciaSign {
		const DISPLAY_NAME: &'static str = "Acacia Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for JungleSign {
		const DISPLAY_NAME: &'static str = "Jungle Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DarkOakSign {
		const DISPLAY_NAME: &'static str = "Dark Oak Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MangroveSign {
		const DISPLAY_NAME: &'static str = "Mangrove Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OakDoor {
		const DISPLAY_NAME: &'static str = "Oak Door";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Ladder {
		const DISPLAY_NAME: &'static str = "Ladder";
		const HARDNESS: f32 = 0.4;
		const RESISTANCE: f32 = 0.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Rail {
		const DISPLAY_NAME: &'static str = "Rail";
		const HARDNESS: f32 = 0.7;
		const RESISTANCE: f32 = 0.7;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CobblestoneStairs {
		const DISPLAY_NAME: &'static str = "Cobblestone Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OakWallSign {
		const DISPLAY_NAME: &'static str = "Oak Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SpruceWallSign {
		const DISPLAY_NAME: &'static str = "Spruce Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BirchWallSign {
		const DISPLAY_NAME: &'static str = "Birch Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for AcaciaWallSign {
		const DISPLAY_NAME: &'static str = "Acacia Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for JungleWallSign {
		const DISPLAY_NAME: &'static str = "Jungle Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DarkOakWallSign {
		const DISPLAY_NAME: &'static str = "Dark Oak Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MangroveWallSign {
		const DISPLAY_NAME: &'static str = "Mangrove Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Lever {
		const DISPLAY_NAME: &'static str = "Lever";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for StonePressurePlate {
		const DISPLAY_NAME: &'static str = "Stone Pressure Plate";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for IronDoor {
		const DISPLAY_NAME: &'static str = "Iron Door";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 5.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OakPressurePlate {
		const DISPLAY_NAME: &'static str = "Oak Pressure Plate";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SprucePressurePlate {
		const DISPLAY_NAME: &'static str = "Spruce Pressure Plate";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BirchPressurePlate {
		const DISPLAY_NAME: &'static str = "Birch Pressure Plate";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for JunglePressurePlate {
		const DISPLAY_NAME: &'static str = "Jungle Pressure Plate";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for AcaciaPressurePlate {
		const DISPLAY_NAME: &'static str = "Acacia Pressure Plate";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DarkOakPressurePlate {
		const DISPLAY_NAME: &'static str = "Dark Oak Pressure Plate";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MangrovePressurePlate {
		const DISPLAY_NAME: &'static str = "Mangrove Pressure Plate";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedstoneOre {
		const DISPLAY_NAME: &'static str = "Redstone Ore";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DeepslateRedstoneOre {
		const DISPLAY_NAME: &'static str = "Deepslate Redstone Ore";
		const HARDNESS: f32 = 4.5;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for RedstoneTorch {
		const DISPLAY_NAME: &'static str = "Redstone Torch";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 7;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedstoneWallTorch {
		const DISPLAY_NAME: &'static str = "Redstone Torch";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 7;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for StoneButton {
		const DISPLAY_NAME: &'static str = "Stone Button";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Snow {
		const DISPLAY_NAME: &'static str = "Snow";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Ice {
		const DISPLAY_NAME: &'static str = "Ice";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for SnowBlock {
		const DISPLAY_NAME: &'static str = "Snow Block";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Cactus {
		const DISPLAY_NAME: &'static str = "Cactus";
		const HARDNESS: f32 = 0.4;
		const RESISTANCE: f32 = 0.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Clay {
		const DISPLAY_NAME: &'static str = "Clay";
		const HARDNESS: f32 = 0.6;
		const RESISTANCE: f32 = 0.6;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for SugarCane {
		const DISPLAY_NAME: &'static str = "Sugar Cane";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Jukebox {
		const DISPLAY_NAME: &'static str = "Jukebox";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for OakFence {
		const DISPLAY_NAME: &'static str = "Oak Fence";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Pumpkin {
		const DISPLAY_NAME: &'static str = "Pumpkin";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Netherrack {
		const DISPLAY_NAME: &'static str = "Netherrack";
		const HARDNESS: f32 = 0.4;
		const RESISTANCE: f32 = 0.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for SoulSand {
		const DISPLAY_NAME: &'static str = "Soul Sand";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for SoulSoil {
		const DISPLAY_NAME: &'static str = "Soul Soil";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Basalt {
		const DISPLAY_NAME: &'static str = "Basalt";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PolishedBasalt {
		const DISPLAY_NAME: &'static str = "Polished Basalt";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for SoulTorch {
		const DISPLAY_NAME: &'static str = "Soul Torch";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 10;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SoulWallTorch {
		const DISPLAY_NAME: &'static str = "Soul Torch";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 10;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Glowstone {
		const DISPLAY_NAME: &'static str = "Glowstone";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 15;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for NetherPortal {
		const DISPLAY_NAME: &'static str = "Nether Portal";
		const HARDNESS: f32 = -1.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = false;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 11;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CarvedPumpkin {
		const DISPLAY_NAME: &'static str = "Carved Pumpkin";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for JackOLantern {
		const DISPLAY_NAME: &'static str = "Jack o'Lantern";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 15;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Cake {
		const DISPLAY_NAME: &'static str = "Cake";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Repeater {
		const DISPLAY_NAME: &'static str = "Redstone Repeater";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WhiteStainedGlass {
		const DISPLAY_NAME: &'static str = "White Stained Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OrangeStainedGlass {
		const DISPLAY_NAME: &'static str = "Orange Stained Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MagentaStainedGlass {
		const DISPLAY_NAME: &'static str = "Magenta Stained Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightBlueStainedGlass {
		const DISPLAY_NAME: &'static str = "Light Blue Stained Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for YellowStainedGlass {
		const DISPLAY_NAME: &'static str = "Yellow Stained Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LimeStainedGlass {
		const DISPLAY_NAME: &'static str = "Lime Stained Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PinkStainedGlass {
		const DISPLAY_NAME: &'static str = "Pink Stained Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GrayStainedGlass {
		const DISPLAY_NAME: &'static str = "Gray Stained Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightGrayStainedGlass {
		const DISPLAY_NAME: &'static str = "Light Gray Stained Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CyanStainedGlass {
		const DISPLAY_NAME: &'static str = "Cyan Stained Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PurpleStainedGlass {
		const DISPLAY_NAME: &'static str = "Purple Stained Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlueStainedGlass {
		const DISPLAY_NAME: &'static str = "Blue Stained Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BrownStainedGlass {
		const DISPLAY_NAME: &'static str = "Brown Stained Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GreenStainedGlass {
		const DISPLAY_NAME: &'static str = "Green Stained Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedStainedGlass {
		const DISPLAY_NAME: &'static str = "Red Stained Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlackStainedGlass {
		const DISPLAY_NAME: &'static str = "Black Stained Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OakTrapdoor {
		const DISPLAY_NAME: &'static str = "Oak Trapdoor";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SpruceTrapdoor {
		const DISPLAY_NAME: &'static str = "Spruce Trapdoor";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BirchTrapdoor {
		const DISPLAY_NAME: &'static str = "Birch Trapdoor";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for JungleTrapdoor {
		const DISPLAY_NAME: &'static str = "Jungle Trapdoor";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for AcaciaTrapdoor {
		const DISPLAY_NAME: &'static str = "Acacia Trapdoor";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DarkOakTrapdoor {
		const DISPLAY_NAME: &'static str = "Dark Oak Trapdoor";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MangroveTrapdoor {
		const DISPLAY_NAME: &'static str = "Mangrove Trapdoor";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for StoneBricks {
		const DISPLAY_NAME: &'static str = "Stone Bricks";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for MossyStoneBricks {
		const DISPLAY_NAME: &'static str = "Mossy Stone Bricks";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CrackedStoneBricks {
		const DISPLAY_NAME: &'static str = "Cracked Stone Bricks";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for ChiseledStoneBricks {
		const DISPLAY_NAME: &'static str = "Chiseled Stone Bricks";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PackedMud {
		const DISPLAY_NAME: &'static str = "Packed Mud";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for MudBricks {
		const DISPLAY_NAME: &'static str = "Mud Bricks";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for InfestedStone {
		const DISPLAY_NAME: &'static str = "Infested Stone";
		const HARDNESS: f32 = 0.75;
		const RESISTANCE: f32 = 0.75;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for InfestedCobblestone {
		const DISPLAY_NAME: &'static str = "Infested Cobblestone";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 0.75;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for InfestedStoneBricks {
		const DISPLAY_NAME: &'static str = "Infested Stone Bricks";
		const HARDNESS: f32 = 0.75;
		const RESISTANCE: f32 = 0.75;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for InfestedMossyStoneBricks {
		const DISPLAY_NAME: &'static str = "Infested Mossy Stone Bricks";
		const HARDNESS: f32 = 0.75;
		const RESISTANCE: f32 = 0.75;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for InfestedCrackedStoneBricks {
		const DISPLAY_NAME: &'static str = "Infested Cracked Stone Bricks";
		const HARDNESS: f32 = 0.75;
		const RESISTANCE: f32 = 0.75;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for InfestedChiseledStoneBricks {
		const DISPLAY_NAME: &'static str = "Infested Chiseled Stone Bricks";
		const HARDNESS: f32 = 0.75;
		const RESISTANCE: f32 = 0.75;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BrownMushroomBlock {
		const DISPLAY_NAME: &'static str = "Brown Mushroom Block";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for RedMushroomBlock {
		const DISPLAY_NAME: &'static str = "Red Mushroom Block";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for MushroomStem {
		const DISPLAY_NAME: &'static str = "Mushroom Stem";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for IronBars {
		const DISPLAY_NAME: &'static str = "Iron Bars";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Chain {
		const DISPLAY_NAME: &'static str = "Chain";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GlassPane {
		const DISPLAY_NAME: &'static str = "Glass Pane";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Melon {
		const DISPLAY_NAME: &'static str = "Melon";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for AttachedPumpkinStem {
		const DISPLAY_NAME: &'static str = "Attached Pumpkin Stem";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for AttachedMelonStem {
		const DISPLAY_NAME: &'static str = "Attached Melon Stem";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PumpkinStem {
		const DISPLAY_NAME: &'static str = "Pumpkin Stem";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MelonStem {
		const DISPLAY_NAME: &'static str = "Melon Stem";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Vine {
		const DISPLAY_NAME: &'static str = "Vines";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GlowLichen {
		const DISPLAY_NAME: &'static str = "Glow Lichen";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OakFenceGate {
		const DISPLAY_NAME: &'static str = "Oak Fence Gate";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BrickStairs {
		const DISPLAY_NAME: &'static str = "Brick Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for StoneBrickStairs {
		const DISPLAY_NAME: &'static str = "Stone Brick Stairs";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MudBrickStairs {
		const DISPLAY_NAME: &'static str = "Mud Brick Stairs";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Mycelium {
		const DISPLAY_NAME: &'static str = "Mycelium";
		const HARDNESS: f32 = 0.6;
		const RESISTANCE: f32 = 0.6;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for LilyPad {
		const DISPLAY_NAME: &'static str = "Lily Pad";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for NetherBricks {
		const DISPLAY_NAME: &'static str = "Nether Bricks";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for NetherBrickFence {
		const DISPLAY_NAME: &'static str = "Nether Brick Fence";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for NetherBrickStairs {
		const DISPLAY_NAME: &'static str = "Nether Brick Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for NetherWart {
		const DISPLAY_NAME: &'static str = "Nether Wart";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for EnchantingTable {
		const DISPLAY_NAME: &'static str = "Enchanting Table";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 1200.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 7;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BrewingStand {
		const DISPLAY_NAME: &'static str = "Brewing Stand";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 1;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Cauldron {
		const DISPLAY_NAME: &'static str = "Cauldron";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WaterCauldron {
		const DISPLAY_NAME: &'static str = "Water Cauldron";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LavaCauldron {
		const DISPLAY_NAME: &'static str = "Lava Cauldron";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 15;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PowderSnowCauldron {
		const DISPLAY_NAME: &'static str = "Powder Snow Cauldron";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for EndPortal {
		const DISPLAY_NAME: &'static str = "End Portal";
		const HARDNESS: f32 = -1.0;
		const RESISTANCE: f32 = 3600000.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = false;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 15;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for EndPortalFrame {
		const DISPLAY_NAME: &'static str = "End Portal Frame";
		const HARDNESS: f32 = -1.0;
		const RESISTANCE: f32 = 3600000.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = false;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 1;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for EndStone {
		const DISPLAY_NAME: &'static str = "End Stone";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 9.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DragonEgg {
		const DISPLAY_NAME: &'static str = "Dragon Egg";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 9.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 1;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedstoneLamp {
		const DISPLAY_NAME: &'static str = "Redstone Lamp";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Cocoa {
		const DISPLAY_NAME: &'static str = "Cocoa";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SandstoneStairs {
		const DISPLAY_NAME: &'static str = "Sandstone Stairs";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for EmeraldOre {
		const DISPLAY_NAME: &'static str = "Emerald Ore";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DeepslateEmeraldOre {
		const DISPLAY_NAME: &'static str = "Deepslate Emerald Ore";
		const HARDNESS: f32 = 4.5;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for EnderChest {
		const DISPLAY_NAME: &'static str = "Ender Chest";
		const HARDNESS: f32 = 22.5;
		const RESISTANCE: f32 = 600.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 7;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for TripwireHook {
		const DISPLAY_NAME: &'static str = "Tripwire Hook";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Tripwire {
		const DISPLAY_NAME: &'static str = "Tripwire";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for EmeraldBlock {
		const DISPLAY_NAME: &'static str = "Block of Emerald";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for SpruceStairs {
		const DISPLAY_NAME: &'static str = "Spruce Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BirchStairs {
		const DISPLAY_NAME: &'static str = "Birch Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for JungleStairs {
		const DISPLAY_NAME: &'static str = "Jungle Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CommandBlock {
		const DISPLAY_NAME: &'static str = "Command Block";
		const HARDNESS: f32 = -1.0;
		const RESISTANCE: f32 = 3600000.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = false;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Beacon {
		const DISPLAY_NAME: &'static str = "Beacon";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 15;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for CobblestoneWall {
		const DISPLAY_NAME: &'static str = "Cobblestone Wall";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MossyCobblestoneWall {
		const DISPLAY_NAME: &'static str = "Mossy Cobblestone Wall";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for FlowerPot {
		const DISPLAY_NAME: &'static str = "Flower Pot";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedOakSapling {
		const DISPLAY_NAME: &'static str = "Potted Oak Sapling";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedSpruceSapling {
		const DISPLAY_NAME: &'static str = "Potted Spruce Sapling";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedBirchSapling {
		const DISPLAY_NAME: &'static str = "Potted Birch Sapling";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedJungleSapling {
		const DISPLAY_NAME: &'static str = "Potted Jungle Sapling";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedAcaciaSapling {
		const DISPLAY_NAME: &'static str = "Potted Acacia Sapling";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedDarkOakSapling {
		const DISPLAY_NAME: &'static str = "Potted Dark Oak Sapling";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedMangrovePropagule {
		const DISPLAY_NAME: &'static str = "Potted Mangrove Propagule";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedFern {
		const DISPLAY_NAME: &'static str = "Potted Fern";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedDandelion {
		const DISPLAY_NAME: &'static str = "Potted Dandelion";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedPoppy {
		const DISPLAY_NAME: &'static str = "Potted Poppy";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedBlueOrchid {
		const DISPLAY_NAME: &'static str = "Potted Blue Orchid";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedAllium {
		const DISPLAY_NAME: &'static str = "Potted Allium";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedAzureBluet {
		const DISPLAY_NAME: &'static str = "Potted Azure Bluet";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedRedTulip {
		const DISPLAY_NAME: &'static str = "Potted Red Tulip";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedOrangeTulip {
		const DISPLAY_NAME: &'static str = "Potted Orange Tulip";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedWhiteTulip {
		const DISPLAY_NAME: &'static str = "Potted White Tulip";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedPinkTulip {
		const DISPLAY_NAME: &'static str = "Potted Pink Tulip";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedOxeyeDaisy {
		const DISPLAY_NAME: &'static str = "Potted Oxeye Daisy";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedCornflower {
		const DISPLAY_NAME: &'static str = "Potted Cornflower";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedLilyOfTheValley {
		const DISPLAY_NAME: &'static str = "Potted Lily of the Valley";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedWitherRose {
		const DISPLAY_NAME: &'static str = "Potted Wither Rose";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedRedMushroom {
		const DISPLAY_NAME: &'static str = "Potted Red Mushroom";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedBrownMushroom {
		const DISPLAY_NAME: &'static str = "Potted Brown Mushroom";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedDeadBush {
		const DISPLAY_NAME: &'static str = "Potted Dead Bush";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedCactus {
		const DISPLAY_NAME: &'static str = "Potted Cactus";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Carrots {
		const DISPLAY_NAME: &'static str = "Carrots";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Potatoes {
		const DISPLAY_NAME: &'static str = "Potatoes";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OakButton {
		const DISPLAY_NAME: &'static str = "Oak Button";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SpruceButton {
		const DISPLAY_NAME: &'static str = "Spruce Button";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BirchButton {
		const DISPLAY_NAME: &'static str = "Birch Button";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for JungleButton {
		const DISPLAY_NAME: &'static str = "Jungle Button";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for AcaciaButton {
		const DISPLAY_NAME: &'static str = "Acacia Button";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DarkOakButton {
		const DISPLAY_NAME: &'static str = "Dark Oak Button";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MangroveButton {
		const DISPLAY_NAME: &'static str = "Mangrove Button";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SkeletonSkull {
		const DISPLAY_NAME: &'static str = "Skeleton Skull";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SkeletonWallSkull {
		const DISPLAY_NAME: &'static str = "Skeleton Skull";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WitherSkeletonSkull {
		const DISPLAY_NAME: &'static str = "Wither Skeleton Skull";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WitherSkeletonWallSkull {
		const DISPLAY_NAME: &'static str = "Wither Skeleton Skull";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for ZombieHead {
		const DISPLAY_NAME: &'static str = "Zombie Head";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for ZombieWallHead {
		const DISPLAY_NAME: &'static str = "Zombie Head";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PlayerHead {
		const DISPLAY_NAME: &'static str = "Player Head";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PlayerWallHead {
		const DISPLAY_NAME: &'static str = "Player Head";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CreeperHead {
		const DISPLAY_NAME: &'static str = "Creeper Head";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CreeperWallHead {
		const DISPLAY_NAME: &'static str = "Creeper Head";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DragonHead {
		const DISPLAY_NAME: &'static str = "Dragon Head";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DragonWallHead {
		const DISPLAY_NAME: &'static str = "Dragon Head";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Anvil {
		const DISPLAY_NAME: &'static str = "Anvil";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 1200.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for ChippedAnvil {
		const DISPLAY_NAME: &'static str = "Chipped Anvil";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 1200.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DamagedAnvil {
		const DISPLAY_NAME: &'static str = "Damaged Anvil";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 1200.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for TrappedChest {
		const DISPLAY_NAME: &'static str = "Trapped Chest";
		const HARDNESS: f32 = 2.5;
		const RESISTANCE: f32 = 2.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightWeightedPressurePlate {
		const DISPLAY_NAME: &'static str = "Light Weighted Pressure Plate";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for HeavyWeightedPressurePlate {
		const DISPLAY_NAME: &'static str = "Heavy Weighted Pressure Plate";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Comparator {
		const DISPLAY_NAME: &'static str = "Redstone Comparator";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DaylightDetector {
		const DISPLAY_NAME: &'static str = "Daylight Detector";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedstoneBlock {
		const DISPLAY_NAME: &'static str = "Block of Redstone";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for NetherQuartzOre {
		const DISPLAY_NAME: &'static str = "Nether Quartz Ore";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Hopper {
		const DISPLAY_NAME: &'static str = "Hopper";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 4.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for QuartzBlock {
		const DISPLAY_NAME: &'static str = "Block of Quartz";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for ChiseledQuartzBlock {
		const DISPLAY_NAME: &'static str = "Chiseled Quartz Block";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for QuartzPillar {
		const DISPLAY_NAME: &'static str = "Quartz Pillar";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for QuartzStairs {
		const DISPLAY_NAME: &'static str = "Quartz Stairs";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for ActivatorRail {
		const DISPLAY_NAME: &'static str = "Activator Rail";
		const HARDNESS: f32 = 0.7;
		const RESISTANCE: f32 = 0.7;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Dropper {
		const DISPLAY_NAME: &'static str = "Dropper";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 3.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WhiteTerracotta {
		const DISPLAY_NAME: &'static str = "White Terracotta";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for OrangeTerracotta {
		const DISPLAY_NAME: &'static str = "Orange Terracotta";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for MagentaTerracotta {
		const DISPLAY_NAME: &'static str = "Magenta Terracotta";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for LightBlueTerracotta {
		const DISPLAY_NAME: &'static str = "Light Blue Terracotta";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for YellowTerracotta {
		const DISPLAY_NAME: &'static str = "Yellow Terracotta";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for LimeTerracotta {
		const DISPLAY_NAME: &'static str = "Lime Terracotta";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PinkTerracotta {
		const DISPLAY_NAME: &'static str = "Pink Terracotta";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for GrayTerracotta {
		const DISPLAY_NAME: &'static str = "Gray Terracotta";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for LightGrayTerracotta {
		const DISPLAY_NAME: &'static str = "Light Gray Terracotta";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CyanTerracotta {
		const DISPLAY_NAME: &'static str = "Cyan Terracotta";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PurpleTerracotta {
		const DISPLAY_NAME: &'static str = "Purple Terracotta";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BlueTerracotta {
		const DISPLAY_NAME: &'static str = "Blue Terracotta";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BrownTerracotta {
		const DISPLAY_NAME: &'static str = "Brown Terracotta";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for GreenTerracotta {
		const DISPLAY_NAME: &'static str = "Green Terracotta";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for RedTerracotta {
		const DISPLAY_NAME: &'static str = "Red Terracotta";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BlackTerracotta {
		const DISPLAY_NAME: &'static str = "Black Terracotta";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WhiteStainedGlassPane {
		const DISPLAY_NAME: &'static str = "White Stained Glass Pane";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OrangeStainedGlassPane {
		const DISPLAY_NAME: &'static str = "Orange Stained Glass Pane";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MagentaStainedGlassPane {
		const DISPLAY_NAME: &'static str = "Magenta Stained Glass Pane";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightBlueStainedGlassPane {
		const DISPLAY_NAME: &'static str = "Light Blue Stained Glass Pane";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for YellowStainedGlassPane {
		const DISPLAY_NAME: &'static str = "Yellow Stained Glass Pane";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LimeStainedGlassPane {
		const DISPLAY_NAME: &'static str = "Lime Stained Glass Pane";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PinkStainedGlassPane {
		const DISPLAY_NAME: &'static str = "Pink Stained Glass Pane";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GrayStainedGlassPane {
		const DISPLAY_NAME: &'static str = "Gray Stained Glass Pane";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightGrayStainedGlassPane {
		const DISPLAY_NAME: &'static str = "Light Gray Stained Glass Pane";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CyanStainedGlassPane {
		const DISPLAY_NAME: &'static str = "Cyan Stained Glass Pane";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PurpleStainedGlassPane {
		const DISPLAY_NAME: &'static str = "Purple Stained Glass Pane";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlueStainedGlassPane {
		const DISPLAY_NAME: &'static str = "Blue Stained Glass Pane";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BrownStainedGlassPane {
		const DISPLAY_NAME: &'static str = "Brown Stained Glass Pane";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GreenStainedGlassPane {
		const DISPLAY_NAME: &'static str = "Green Stained Glass Pane";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedStainedGlassPane {
		const DISPLAY_NAME: &'static str = "Red Stained Glass Pane";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlackStainedGlassPane {
		const DISPLAY_NAME: &'static str = "Black Stained Glass Pane";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for AcaciaStairs {
		const DISPLAY_NAME: &'static str = "Acacia Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DarkOakStairs {
		const DISPLAY_NAME: &'static str = "Dark Oak Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MangroveStairs {
		const DISPLAY_NAME: &'static str = "Mangrove Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SlimeBlock {
		const DISPLAY_NAME: &'static str = "Slime Block";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for Barrier {
		const DISPLAY_NAME: &'static str = "Barrier";
		const HARDNESS: f32 = -1.0;
		const RESISTANCE: f32 = 3600000.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = false;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Light {
		const DISPLAY_NAME: &'static str = "Light";
		const HARDNESS: f32 = -1.0;
		const RESISTANCE: f32 = 3600000.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = false;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 15;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for IronTrapdoor {
		const DISPLAY_NAME: &'static str = "Iron Trapdoor";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 5.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Prismarine {
		const DISPLAY_NAME: &'static str = "Prismarine";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PrismarineBricks {
		const DISPLAY_NAME: &'static str = "Prismarine Bricks";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DarkPrismarine {
		const DISPLAY_NAME: &'static str = "Dark Prismarine";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PrismarineStairs {
		const DISPLAY_NAME: &'static str = "Prismarine Stairs";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PrismarineBrickStairs {
		const DISPLAY_NAME: &'static str = "Prismarine Brick Stairs";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DarkPrismarineStairs {
		const DISPLAY_NAME: &'static str = "Dark Prismarine Stairs";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PrismarineSlab {
		const DISPLAY_NAME: &'static str = "Prismarine Slab";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PrismarineBrickSlab {
		const DISPLAY_NAME: &'static str = "Prismarine Brick Slab";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DarkPrismarineSlab {
		const DISPLAY_NAME: &'static str = "Dark Prismarine Slab";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SeaLantern {
		const DISPLAY_NAME: &'static str = "Sea Lantern";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 15;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for HayBlock {
		const DISPLAY_NAME: &'static str = "Hay Bale";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WhiteCarpet {
		const DISPLAY_NAME: &'static str = "White Carpet";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OrangeCarpet {
		const DISPLAY_NAME: &'static str = "Orange Carpet";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MagentaCarpet {
		const DISPLAY_NAME: &'static str = "Magenta Carpet";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightBlueCarpet {
		const DISPLAY_NAME: &'static str = "Light Blue Carpet";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for YellowCarpet {
		const DISPLAY_NAME: &'static str = "Yellow Carpet";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LimeCarpet {
		const DISPLAY_NAME: &'static str = "Lime Carpet";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PinkCarpet {
		const DISPLAY_NAME: &'static str = "Pink Carpet";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GrayCarpet {
		const DISPLAY_NAME: &'static str = "Gray Carpet";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightGrayCarpet {
		const DISPLAY_NAME: &'static str = "Light Gray Carpet";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CyanCarpet {
		const DISPLAY_NAME: &'static str = "Cyan Carpet";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PurpleCarpet {
		const DISPLAY_NAME: &'static str = "Purple Carpet";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlueCarpet {
		const DISPLAY_NAME: &'static str = "Blue Carpet";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BrownCarpet {
		const DISPLAY_NAME: &'static str = "Brown Carpet";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GreenCarpet {
		const DISPLAY_NAME: &'static str = "Green Carpet";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedCarpet {
		const DISPLAY_NAME: &'static str = "Red Carpet";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlackCarpet {
		const DISPLAY_NAME: &'static str = "Black Carpet";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Terracotta {
		const DISPLAY_NAME: &'static str = "Terracotta";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CoalBlock {
		const DISPLAY_NAME: &'static str = "Block of Coal";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PackedIce {
		const DISPLAY_NAME: &'static str = "Packed Ice";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Sunflower {
		const DISPLAY_NAME: &'static str = "Sunflower";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Lilac {
		const DISPLAY_NAME: &'static str = "Lilac";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RoseBush {
		const DISPLAY_NAME: &'static str = "Rose Bush";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Peony {
		const DISPLAY_NAME: &'static str = "Peony";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for TallGrass {
		const DISPLAY_NAME: &'static str = "Tall Grass";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LargeFern {
		const DISPLAY_NAME: &'static str = "Large Fern";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WhiteBanner {
		const DISPLAY_NAME: &'static str = "White Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OrangeBanner {
		const DISPLAY_NAME: &'static str = "Orange Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MagentaBanner {
		const DISPLAY_NAME: &'static str = "Magenta Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightBlueBanner {
		const DISPLAY_NAME: &'static str = "Light Blue Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for YellowBanner {
		const DISPLAY_NAME: &'static str = "Yellow Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LimeBanner {
		const DISPLAY_NAME: &'static str = "Lime Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PinkBanner {
		const DISPLAY_NAME: &'static str = "Pink Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GrayBanner {
		const DISPLAY_NAME: &'static str = "Gray Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightGrayBanner {
		const DISPLAY_NAME: &'static str = "Light Gray Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CyanBanner {
		const DISPLAY_NAME: &'static str = "Cyan Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PurpleBanner {
		const DISPLAY_NAME: &'static str = "Purple Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlueBanner {
		const DISPLAY_NAME: &'static str = "Blue Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BrownBanner {
		const DISPLAY_NAME: &'static str = "Brown Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GreenBanner {
		const DISPLAY_NAME: &'static str = "Green Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedBanner {
		const DISPLAY_NAME: &'static str = "Red Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlackBanner {
		const DISPLAY_NAME: &'static str = "Black Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WhiteWallBanner {
		const DISPLAY_NAME: &'static str = "White Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OrangeWallBanner {
		const DISPLAY_NAME: &'static str = "Orange Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MagentaWallBanner {
		const DISPLAY_NAME: &'static str = "Magenta Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightBlueWallBanner {
		const DISPLAY_NAME: &'static str = "Light Blue Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for YellowWallBanner {
		const DISPLAY_NAME: &'static str = "Yellow Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LimeWallBanner {
		const DISPLAY_NAME: &'static str = "Lime Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PinkWallBanner {
		const DISPLAY_NAME: &'static str = "Pink Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GrayWallBanner {
		const DISPLAY_NAME: &'static str = "Gray Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightGrayWallBanner {
		const DISPLAY_NAME: &'static str = "Light Gray Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CyanWallBanner {
		const DISPLAY_NAME: &'static str = "Cyan Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PurpleWallBanner {
		const DISPLAY_NAME: &'static str = "Purple Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlueWallBanner {
		const DISPLAY_NAME: &'static str = "Blue Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BrownWallBanner {
		const DISPLAY_NAME: &'static str = "Brown Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GreenWallBanner {
		const DISPLAY_NAME: &'static str = "Green Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedWallBanner {
		const DISPLAY_NAME: &'static str = "Red Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlackWallBanner {
		const DISPLAY_NAME: &'static str = "Black Banner";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedSandstone {
		const DISPLAY_NAME: &'static str = "Red Sandstone";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for ChiseledRedSandstone {
		const DISPLAY_NAME: &'static str = "Chiseled Red Sandstone";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CutRedSandstone {
		const DISPLAY_NAME: &'static str = "Cut Red Sandstone";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for RedSandstoneStairs {
		const DISPLAY_NAME: &'static str = "Red Sandstone Stairs";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OakSlab {
		const DISPLAY_NAME: &'static str = "Oak Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SpruceSlab {
		const DISPLAY_NAME: &'static str = "Spruce Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BirchSlab {
		const DISPLAY_NAME: &'static str = "Birch Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for JungleSlab {
		const DISPLAY_NAME: &'static str = "Jungle Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for AcaciaSlab {
		const DISPLAY_NAME: &'static str = "Acacia Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DarkOakSlab {
		const DISPLAY_NAME: &'static str = "Dark Oak Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MangroveSlab {
		const DISPLAY_NAME: &'static str = "Mangrove Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for StoneSlab {
		const DISPLAY_NAME: &'static str = "Stone Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SmoothStoneSlab {
		const DISPLAY_NAME: &'static str = "Smooth Stone Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SandstoneSlab {
		const DISPLAY_NAME: &'static str = "Sandstone Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CutSandstoneSlab {
		const DISPLAY_NAME: &'static str = "Cut Sandstone Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PetrifiedOakSlab {
		const DISPLAY_NAME: &'static str = "Petrified Oak Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CobblestoneSlab {
		const DISPLAY_NAME: &'static str = "Cobblestone Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BrickSlab {
		const DISPLAY_NAME: &'static str = "Brick Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for StoneBrickSlab {
		const DISPLAY_NAME: &'static str = "Stone Brick Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MudBrickSlab {
		const DISPLAY_NAME: &'static str = "Mud Brick Slab";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for NetherBrickSlab {
		const DISPLAY_NAME: &'static str = "Nether Brick Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for QuartzSlab {
		const DISPLAY_NAME: &'static str = "Quartz Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedSandstoneSlab {
		const DISPLAY_NAME: &'static str = "Red Sandstone Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CutRedSandstoneSlab {
		const DISPLAY_NAME: &'static str = "Cut Red Sandstone Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PurpurSlab {
		const DISPLAY_NAME: &'static str = "Purpur Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SmoothStone {
		const DISPLAY_NAME: &'static str = "Smooth Stone";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for SmoothSandstone {
		const DISPLAY_NAME: &'static str = "Smooth Sandstone";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for SmoothQuartz {
		const DISPLAY_NAME: &'static str = "Smooth Quartz Block";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for SmoothRedSandstone {
		const DISPLAY_NAME: &'static str = "Smooth Red Sandstone";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for SpruceFenceGate {
		const DISPLAY_NAME: &'static str = "Spruce Fence Gate";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BirchFenceGate {
		const DISPLAY_NAME: &'static str = "Birch Fence Gate";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for JungleFenceGate {
		const DISPLAY_NAME: &'static str = "Jungle Fence Gate";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for AcaciaFenceGate {
		const DISPLAY_NAME: &'static str = "Acacia Fence Gate";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DarkOakFenceGate {
		const DISPLAY_NAME: &'static str = "Dark Oak Fence Gate";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MangroveFenceGate {
		const DISPLAY_NAME: &'static str = "Mangrove Fence Gate";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SpruceFence {
		const DISPLAY_NAME: &'static str = "Spruce Fence";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BirchFence {
		const DISPLAY_NAME: &'static str = "Birch Fence";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for JungleFence {
		const DISPLAY_NAME: &'static str = "Jungle Fence";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for AcaciaFence {
		const DISPLAY_NAME: &'static str = "Acacia Fence";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DarkOakFence {
		const DISPLAY_NAME: &'static str = "Dark Oak Fence";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MangroveFence {
		const DISPLAY_NAME: &'static str = "Mangrove Fence";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SpruceDoor {
		const DISPLAY_NAME: &'static str = "Spruce Door";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BirchDoor {
		const DISPLAY_NAME: &'static str = "Birch Door";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for JungleDoor {
		const DISPLAY_NAME: &'static str = "Jungle Door";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for AcaciaDoor {
		const DISPLAY_NAME: &'static str = "Acacia Door";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DarkOakDoor {
		const DISPLAY_NAME: &'static str = "Dark Oak Door";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MangroveDoor {
		const DISPLAY_NAME: &'static str = "Mangrove Door";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for EndRod {
		const DISPLAY_NAME: &'static str = "End Rod";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 14;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for ChorusPlant {
		const DISPLAY_NAME: &'static str = "Chorus Plant";
		const HARDNESS: f32 = 0.4;
		const RESISTANCE: f32 = 0.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for ChorusFlower {
		const DISPLAY_NAME: &'static str = "Chorus Flower";
		const HARDNESS: f32 = 0.4;
		const RESISTANCE: f32 = 0.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for PurpurBlock {
		const DISPLAY_NAME: &'static str = "Purpur Block";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PurpurPillar {
		const DISPLAY_NAME: &'static str = "Purpur Pillar";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PurpurStairs {
		const DISPLAY_NAME: &'static str = "Purpur Stairs";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for EndStoneBricks {
		const DISPLAY_NAME: &'static str = "End Stone Bricks";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 9.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Beetroots {
		const DISPLAY_NAME: &'static str = "Beetroots";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DirtPath {
		const DISPLAY_NAME: &'static str = "Dirt Path";
		const HARDNESS: f32 = 0.65;
		const RESISTANCE: f32 = 0.65;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for EndGateway {
		const DISPLAY_NAME: &'static str = "End Gateway";
		const HARDNESS: f32 = -1.0;
		const RESISTANCE: f32 = 3600000.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = false;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 15;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for RepeatingCommandBlock {
		const DISPLAY_NAME: &'static str = "Repeating Command Block";
		const HARDNESS: f32 = -1.0;
		const RESISTANCE: f32 = 3600000.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = false;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for ChainCommandBlock {
		const DISPLAY_NAME: &'static str = "Chain Command Block";
		const HARDNESS: f32 = -1.0;
		const RESISTANCE: f32 = 3600000.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = false;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for FrostedIce {
		const DISPLAY_NAME: &'static str = "Frosted Ice";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for MagmaBlock {
		const DISPLAY_NAME: &'static str = "Magma Block";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 3;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for NetherWartBlock {
		const DISPLAY_NAME: &'static str = "Nether Wart Block";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for RedNetherBricks {
		const DISPLAY_NAME: &'static str = "Red Nether Bricks";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BoneBlock {
		const DISPLAY_NAME: &'static str = "Bone Block";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StructureVoid {
		const DISPLAY_NAME: &'static str = "Structure Void";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Observer {
		const DISPLAY_NAME: &'static str = "Observer";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for ShulkerBox {
		const DISPLAY_NAME: &'static str = "Shulker Box";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for WhiteShulkerBox {
		const DISPLAY_NAME: &'static str = "White Shulker Box";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for OrangeShulkerBox {
		const DISPLAY_NAME: &'static str = "Orange Shulker Box";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for MagentaShulkerBox {
		const DISPLAY_NAME: &'static str = "Magenta Shulker Box";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for LightBlueShulkerBox {
		const DISPLAY_NAME: &'static str = "Light Blue Shulker Box";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for YellowShulkerBox {
		const DISPLAY_NAME: &'static str = "Yellow Shulker Box";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for LimeShulkerBox {
		const DISPLAY_NAME: &'static str = "Lime Shulker Box";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for PinkShulkerBox {
		const DISPLAY_NAME: &'static str = "Pink Shulker Box";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for GrayShulkerBox {
		const DISPLAY_NAME: &'static str = "Gray Shulker Box";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for LightGrayShulkerBox {
		const DISPLAY_NAME: &'static str = "Light Gray Shulker Box";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for CyanShulkerBox {
		const DISPLAY_NAME: &'static str = "Cyan Shulker Box";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for PurpleShulkerBox {
		const DISPLAY_NAME: &'static str = "Purple Shulker Box";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for BlueShulkerBox {
		const DISPLAY_NAME: &'static str = "Blue Shulker Box";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for BrownShulkerBox {
		const DISPLAY_NAME: &'static str = "Brown Shulker Box";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for GreenShulkerBox {
		const DISPLAY_NAME: &'static str = "Green Shulker Box";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for RedShulkerBox {
		const DISPLAY_NAME: &'static str = "Red Shulker Box";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for BlackShulkerBox {
		const DISPLAY_NAME: &'static str = "Black Shulker Box";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for WhiteGlazedTerracotta {
		const DISPLAY_NAME: &'static str = "White Glazed Terracotta";
		const HARDNESS: f32 = 1.4;
		const RESISTANCE: f32 = 1.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for OrangeGlazedTerracotta {
		const DISPLAY_NAME: &'static str = "Orange Glazed Terracotta";
		const HARDNESS: f32 = 1.4;
		const RESISTANCE: f32 = 1.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for MagentaGlazedTerracotta {
		const DISPLAY_NAME: &'static str = "Magenta Glazed Terracotta";
		const HARDNESS: f32 = 1.4;
		const RESISTANCE: f32 = 1.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for LightBlueGlazedTerracotta {
		const DISPLAY_NAME: &'static str = "Light Blue Glazed Terracotta";
		const HARDNESS: f32 = 1.4;
		const RESISTANCE: f32 = 1.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for YellowGlazedTerracotta {
		const DISPLAY_NAME: &'static str = "Yellow Glazed Terracotta";
		const HARDNESS: f32 = 1.4;
		const RESISTANCE: f32 = 1.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for LimeGlazedTerracotta {
		const DISPLAY_NAME: &'static str = "Lime Glazed Terracotta";
		const HARDNESS: f32 = 1.4;
		const RESISTANCE: f32 = 1.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PinkGlazedTerracotta {
		const DISPLAY_NAME: &'static str = "Pink Glazed Terracotta";
		const HARDNESS: f32 = 1.4;
		const RESISTANCE: f32 = 1.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for GrayGlazedTerracotta {
		const DISPLAY_NAME: &'static str = "Gray Glazed Terracotta";
		const HARDNESS: f32 = 1.4;
		const RESISTANCE: f32 = 1.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for LightGrayGlazedTerracotta {
		const DISPLAY_NAME: &'static str = "Light Gray Glazed Terracotta";
		const HARDNESS: f32 = 1.4;
		const RESISTANCE: f32 = 1.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CyanGlazedTerracotta {
		const DISPLAY_NAME: &'static str = "Cyan Glazed Terracotta";
		const HARDNESS: f32 = 1.4;
		const RESISTANCE: f32 = 1.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PurpleGlazedTerracotta {
		const DISPLAY_NAME: &'static str = "Purple Glazed Terracotta";
		const HARDNESS: f32 = 1.4;
		const RESISTANCE: f32 = 1.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BlueGlazedTerracotta {
		const DISPLAY_NAME: &'static str = "Blue Glazed Terracotta";
		const HARDNESS: f32 = 1.4;
		const RESISTANCE: f32 = 1.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BrownGlazedTerracotta {
		const DISPLAY_NAME: &'static str = "Brown Glazed Terracotta";
		const HARDNESS: f32 = 1.4;
		const RESISTANCE: f32 = 1.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for GreenGlazedTerracotta {
		const DISPLAY_NAME: &'static str = "Green Glazed Terracotta";
		const HARDNESS: f32 = 1.4;
		const RESISTANCE: f32 = 1.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for RedGlazedTerracotta {
		const DISPLAY_NAME: &'static str = "Red Glazed Terracotta";
		const HARDNESS: f32 = 1.4;
		const RESISTANCE: f32 = 1.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BlackGlazedTerracotta {
		const DISPLAY_NAME: &'static str = "Black Glazed Terracotta";
		const HARDNESS: f32 = 1.4;
		const RESISTANCE: f32 = 1.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WhiteConcrete {
		const DISPLAY_NAME: &'static str = "White Concrete";
		const HARDNESS: f32 = 1.8;
		const RESISTANCE: f32 = 1.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for OrangeConcrete {
		const DISPLAY_NAME: &'static str = "Orange Concrete";
		const HARDNESS: f32 = 1.8;
		const RESISTANCE: f32 = 1.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for MagentaConcrete {
		const DISPLAY_NAME: &'static str = "Magenta Concrete";
		const HARDNESS: f32 = 1.8;
		const RESISTANCE: f32 = 1.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for LightBlueConcrete {
		const DISPLAY_NAME: &'static str = "Light Blue Concrete";
		const HARDNESS: f32 = 1.8;
		const RESISTANCE: f32 = 1.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for YellowConcrete {
		const DISPLAY_NAME: &'static str = "Yellow Concrete";
		const HARDNESS: f32 = 1.8;
		const RESISTANCE: f32 = 1.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for LimeConcrete {
		const DISPLAY_NAME: &'static str = "Lime Concrete";
		const HARDNESS: f32 = 1.8;
		const RESISTANCE: f32 = 1.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PinkConcrete {
		const DISPLAY_NAME: &'static str = "Pink Concrete";
		const HARDNESS: f32 = 1.8;
		const RESISTANCE: f32 = 1.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for GrayConcrete {
		const DISPLAY_NAME: &'static str = "Gray Concrete";
		const HARDNESS: f32 = 1.8;
		const RESISTANCE: f32 = 1.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for LightGrayConcrete {
		const DISPLAY_NAME: &'static str = "Light Gray Concrete";
		const HARDNESS: f32 = 1.8;
		const RESISTANCE: f32 = 1.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CyanConcrete {
		const DISPLAY_NAME: &'static str = "Cyan Concrete";
		const HARDNESS: f32 = 1.8;
		const RESISTANCE: f32 = 1.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PurpleConcrete {
		const DISPLAY_NAME: &'static str = "Purple Concrete";
		const HARDNESS: f32 = 1.8;
		const RESISTANCE: f32 = 1.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BlueConcrete {
		const DISPLAY_NAME: &'static str = "Blue Concrete";
		const HARDNESS: f32 = 1.8;
		const RESISTANCE: f32 = 1.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BrownConcrete {
		const DISPLAY_NAME: &'static str = "Brown Concrete";
		const HARDNESS: f32 = 1.8;
		const RESISTANCE: f32 = 1.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for GreenConcrete {
		const DISPLAY_NAME: &'static str = "Green Concrete";
		const HARDNESS: f32 = 1.8;
		const RESISTANCE: f32 = 1.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for RedConcrete {
		const DISPLAY_NAME: &'static str = "Red Concrete";
		const HARDNESS: f32 = 1.8;
		const RESISTANCE: f32 = 1.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BlackConcrete {
		const DISPLAY_NAME: &'static str = "Black Concrete";
		const HARDNESS: f32 = 1.8;
		const RESISTANCE: f32 = 1.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WhiteConcretePowder {
		const DISPLAY_NAME: &'static str = "White Concrete Powder";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for OrangeConcretePowder {
		const DISPLAY_NAME: &'static str = "Orange Concrete Powder";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for MagentaConcretePowder {
		const DISPLAY_NAME: &'static str = "Magenta Concrete Powder";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for LightBlueConcretePowder {
		const DISPLAY_NAME: &'static str = "Light Blue Concrete Powder";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for YellowConcretePowder {
		const DISPLAY_NAME: &'static str = "Yellow Concrete Powder";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for LimeConcretePowder {
		const DISPLAY_NAME: &'static str = "Lime Concrete Powder";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PinkConcretePowder {
		const DISPLAY_NAME: &'static str = "Pink Concrete Powder";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for GrayConcretePowder {
		const DISPLAY_NAME: &'static str = "Gray Concrete Powder";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for LightGrayConcretePowder {
		const DISPLAY_NAME: &'static str = "Light Gray Concrete Powder";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CyanConcretePowder {
		const DISPLAY_NAME: &'static str = "Cyan Concrete Powder";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PurpleConcretePowder {
		const DISPLAY_NAME: &'static str = "Purple Concrete Powder";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BlueConcretePowder {
		const DISPLAY_NAME: &'static str = "Blue Concrete Powder";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BrownConcretePowder {
		const DISPLAY_NAME: &'static str = "Brown Concrete Powder";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for GreenConcretePowder {
		const DISPLAY_NAME: &'static str = "Green Concrete Powder";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for RedConcretePowder {
		const DISPLAY_NAME: &'static str = "Red Concrete Powder";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BlackConcretePowder {
		const DISPLAY_NAME: &'static str = "Black Concrete Powder";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Kelp {
		const DISPLAY_NAME: &'static str = "Kelp";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for KelpPlant {
		const DISPLAY_NAME: &'static str = "Kelp Plant";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for DriedKelpBlock {
		const DISPLAY_NAME: &'static str = "Dried Kelp Block";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 2.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for TurtleEgg {
		const DISPLAY_NAME: &'static str = "Turtle Egg";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DeadTubeCoralBlock {
		const DISPLAY_NAME: &'static str = "Dead Tube Coral Block";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DeadBrainCoralBlock {
		const DISPLAY_NAME: &'static str = "Dead Brain Coral Block";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DeadBubbleCoralBlock {
		const DISPLAY_NAME: &'static str = "Dead Bubble Coral Block";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DeadFireCoralBlock {
		const DISPLAY_NAME: &'static str = "Dead Fire Coral Block";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DeadHornCoralBlock {
		const DISPLAY_NAME: &'static str = "Dead Horn Coral Block";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for TubeCoralBlock {
		const DISPLAY_NAME: &'static str = "Tube Coral Block";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BrainCoralBlock {
		const DISPLAY_NAME: &'static str = "Brain Coral Block";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BubbleCoralBlock {
		const DISPLAY_NAME: &'static str = "Bubble Coral Block";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for FireCoralBlock {
		const DISPLAY_NAME: &'static str = "Fire Coral Block";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for HornCoralBlock {
		const DISPLAY_NAME: &'static str = "Horn Coral Block";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DeadTubeCoral {
		const DISPLAY_NAME: &'static str = "Dead Tube Coral";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for DeadBrainCoral {
		const DISPLAY_NAME: &'static str = "Dead Brain Coral";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for DeadBubbleCoral {
		const DISPLAY_NAME: &'static str = "Dead Bubble Coral";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for DeadFireCoral {
		const DISPLAY_NAME: &'static str = "Dead Fire Coral";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for DeadHornCoral {
		const DISPLAY_NAME: &'static str = "Dead Horn Coral";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for TubeCoral {
		const DISPLAY_NAME: &'static str = "Tube Coral";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for BrainCoral {
		const DISPLAY_NAME: &'static str = "Brain Coral";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for BubbleCoral {
		const DISPLAY_NAME: &'static str = "Bubble Coral";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for FireCoral {
		const DISPLAY_NAME: &'static str = "Fire Coral";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for HornCoral {
		const DISPLAY_NAME: &'static str = "Horn Coral";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for DeadTubeCoralFan {
		const DISPLAY_NAME: &'static str = "Dead Tube Coral Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for DeadBrainCoralFan {
		const DISPLAY_NAME: &'static str = "Dead Brain Coral Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for DeadBubbleCoralFan {
		const DISPLAY_NAME: &'static str = "Dead Bubble Coral Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for DeadFireCoralFan {
		const DISPLAY_NAME: &'static str = "Dead Fire Coral Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for DeadHornCoralFan {
		const DISPLAY_NAME: &'static str = "Dead Horn Coral Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for TubeCoralFan {
		const DISPLAY_NAME: &'static str = "Tube Coral Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for BrainCoralFan {
		const DISPLAY_NAME: &'static str = "Brain Coral Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for BubbleCoralFan {
		const DISPLAY_NAME: &'static str = "Bubble Coral Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for FireCoralFan {
		const DISPLAY_NAME: &'static str = "Fire Coral Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for HornCoralFan {
		const DISPLAY_NAME: &'static str = "Horn Coral Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for DeadTubeCoralWallFan {
		const DISPLAY_NAME: &'static str = "Dead Tube Coral Wall Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for DeadBrainCoralWallFan {
		const DISPLAY_NAME: &'static str = "Dead Brain Coral Wall Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for DeadBubbleCoralWallFan {
		const DISPLAY_NAME: &'static str = "Dead Bubble Coral Wall Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for DeadFireCoralWallFan {
		const DISPLAY_NAME: &'static str = "Dead Fire Coral Wall Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for DeadHornCoralWallFan {
		const DISPLAY_NAME: &'static str = "Dead Horn Coral Wall Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for TubeCoralWallFan {
		const DISPLAY_NAME: &'static str = "Tube Coral Wall Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for BrainCoralWallFan {
		const DISPLAY_NAME: &'static str = "Brain Coral Wall Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for BubbleCoralWallFan {
		const DISPLAY_NAME: &'static str = "Bubble Coral Wall Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for FireCoralWallFan {
		const DISPLAY_NAME: &'static str = "Fire Coral Wall Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for HornCoralWallFan {
		const DISPLAY_NAME: &'static str = "Horn Coral Wall Fan";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for SeaPickle {
		const DISPLAY_NAME: &'static str = "Sea Pickle";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 6;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for BlueIce {
		const DISPLAY_NAME: &'static str = "Blue Ice";
		const HARDNESS: f32 = 2.8;
		const RESISTANCE: f32 = 2.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Conduit {
		const DISPLAY_NAME: &'static str = "Conduit";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 15;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for BambooSapling {
		const DISPLAY_NAME: &'static str = "Bamboo Shoot";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Bamboo {
		const DISPLAY_NAME: &'static str = "Bamboo";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedBamboo {
		const DISPLAY_NAME: &'static str = "Potted Bamboo";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for VoidAir {
		const DISPLAY_NAME: &'static str = "Void Air";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = false;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CaveAir {
		const DISPLAY_NAME: &'static str = "Cave Air";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = false;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BubbleColumn {
		const DISPLAY_NAME: &'static str = "Bubble Column";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for PolishedGraniteStairs {
		const DISPLAY_NAME: &'static str = "Polished Granite Stairs";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SmoothRedSandstoneStairs {
		const DISPLAY_NAME: &'static str = "Smooth Red Sandstone Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MossyStoneBrickStairs {
		const DISPLAY_NAME: &'static str = "Mossy Stone Brick Stairs";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PolishedDioriteStairs {
		const DISPLAY_NAME: &'static str = "Polished Diorite Stairs";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MossyCobblestoneStairs {
		const DISPLAY_NAME: &'static str = "Mossy Cobblestone Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for EndStoneBrickStairs {
		const DISPLAY_NAME: &'static str = "End Stone Brick Stairs";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 9.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for StoneStairs {
		const DISPLAY_NAME: &'static str = "Stone Stairs";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SmoothSandstoneStairs {
		const DISPLAY_NAME: &'static str = "Smooth Sandstone Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SmoothQuartzStairs {
		const DISPLAY_NAME: &'static str = "Smooth Quartz Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GraniteStairs {
		const DISPLAY_NAME: &'static str = "Granite Stairs";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for AndesiteStairs {
		const DISPLAY_NAME: &'static str = "Andesite Stairs";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedNetherBrickStairs {
		const DISPLAY_NAME: &'static str = "Red Nether Brick Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PolishedAndesiteStairs {
		const DISPLAY_NAME: &'static str = "Polished Andesite Stairs";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DioriteStairs {
		const DISPLAY_NAME: &'static str = "Diorite Stairs";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PolishedGraniteSlab {
		const DISPLAY_NAME: &'static str = "Polished Granite Slab";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SmoothRedSandstoneSlab {
		const DISPLAY_NAME: &'static str = "Smooth Red Sandstone Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MossyStoneBrickSlab {
		const DISPLAY_NAME: &'static str = "Mossy Stone Brick Slab";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PolishedDioriteSlab {
		const DISPLAY_NAME: &'static str = "Polished Diorite Slab";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MossyCobblestoneSlab {
		const DISPLAY_NAME: &'static str = "Mossy Cobblestone Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for EndStoneBrickSlab {
		const DISPLAY_NAME: &'static str = "End Stone Brick Slab";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 9.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SmoothSandstoneSlab {
		const DISPLAY_NAME: &'static str = "Smooth Sandstone Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SmoothQuartzSlab {
		const DISPLAY_NAME: &'static str = "Smooth Quartz Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GraniteSlab {
		const DISPLAY_NAME: &'static str = "Granite Slab";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for AndesiteSlab {
		const DISPLAY_NAME: &'static str = "Andesite Slab";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedNetherBrickSlab {
		const DISPLAY_NAME: &'static str = "Red Nether Brick Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PolishedAndesiteSlab {
		const DISPLAY_NAME: &'static str = "Polished Andesite Slab";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DioriteSlab {
		const DISPLAY_NAME: &'static str = "Diorite Slab";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BrickWall {
		const DISPLAY_NAME: &'static str = "Brick Wall";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PrismarineWall {
		const DISPLAY_NAME: &'static str = "Prismarine Wall";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedSandstoneWall {
		const DISPLAY_NAME: &'static str = "Red Sandstone Wall";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MossyStoneBrickWall {
		const DISPLAY_NAME: &'static str = "Mossy Stone Brick Wall";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GraniteWall {
		const DISPLAY_NAME: &'static str = "Granite Wall";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for StoneBrickWall {
		const DISPLAY_NAME: &'static str = "Stone Brick Wall";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MudBrickWall {
		const DISPLAY_NAME: &'static str = "Mud Brick Wall";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for NetherBrickWall {
		const DISPLAY_NAME: &'static str = "Nether Brick Wall";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for AndesiteWall {
		const DISPLAY_NAME: &'static str = "Andesite Wall";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedNetherBrickWall {
		const DISPLAY_NAME: &'static str = "Red Nether Brick Wall";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SandstoneWall {
		const DISPLAY_NAME: &'static str = "Sandstone Wall";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for EndStoneBrickWall {
		const DISPLAY_NAME: &'static str = "End Stone Brick Wall";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 9.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DioriteWall {
		const DISPLAY_NAME: &'static str = "Diorite Wall";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Scaffolding {
		const DISPLAY_NAME: &'static str = "Scaffolding";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Loom {
		const DISPLAY_NAME: &'static str = "Loom";
		const HARDNESS: f32 = 2.5;
		const RESISTANCE: f32 = 2.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Barrel {
		const DISPLAY_NAME: &'static str = "Barrel";
		const HARDNESS: f32 = 2.5;
		const RESISTANCE: f32 = 2.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Smoker {
		const DISPLAY_NAME: &'static str = "Smoker";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 3.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BlastFurnace {
		const DISPLAY_NAME: &'static str = "Blast Furnace";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 3.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CartographyTable {
		const DISPLAY_NAME: &'static str = "Cartography Table";
		const HARDNESS: f32 = 2.5;
		const RESISTANCE: f32 = 2.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for FletchingTable {
		const DISPLAY_NAME: &'static str = "Fletching Table";
		const HARDNESS: f32 = 2.5;
		const RESISTANCE: f32 = 2.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Grindstone {
		const DISPLAY_NAME: &'static str = "Grindstone";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Lectern {
		const DISPLAY_NAME: &'static str = "Lectern";
		const HARDNESS: f32 = 2.5;
		const RESISTANCE: f32 = 2.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SmithingTable {
		const DISPLAY_NAME: &'static str = "Smithing Table";
		const HARDNESS: f32 = 2.5;
		const RESISTANCE: f32 = 2.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Stonecutter {
		const DISPLAY_NAME: &'static str = "Stonecutter";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 3.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Bell {
		const DISPLAY_NAME: &'static str = "Bell";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 5.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Lantern {
		const DISPLAY_NAME: &'static str = "Lantern";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 3.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 15;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SoulLantern {
		const DISPLAY_NAME: &'static str = "Soul Lantern";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 3.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 10;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Campfire {
		const DISPLAY_NAME: &'static str = "Campfire";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 15;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SoulCampfire {
		const DISPLAY_NAME: &'static str = "Soul Campfire";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 10;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SweetBerryBush {
		const DISPLAY_NAME: &'static str = "Sweet Berry Bush";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WarpedStem {
		const DISPLAY_NAME: &'static str = "Warped Stem";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedWarpedStem {
		const DISPLAY_NAME: &'static str = "Stripped Warped Stem";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WarpedHyphae {
		const DISPLAY_NAME: &'static str = "Warped Hyphae";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedWarpedHyphae {
		const DISPLAY_NAME: &'static str = "Stripped Warped Hyphae";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WarpedNylium {
		const DISPLAY_NAME: &'static str = "Warped Nylium";
		const HARDNESS: f32 = 0.4;
		const RESISTANCE: f32 = 0.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WarpedFungus {
		const DISPLAY_NAME: &'static str = "Warped Fungus";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WarpedWartBlock {
		const DISPLAY_NAME: &'static str = "Warped Wart Block";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WarpedRoots {
		const DISPLAY_NAME: &'static str = "Warped Roots";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for NetherSprouts {
		const DISPLAY_NAME: &'static str = "Nether Sprouts";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CrimsonStem {
		const DISPLAY_NAME: &'static str = "Crimson Stem";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedCrimsonStem {
		const DISPLAY_NAME: &'static str = "Stripped Crimson Stem";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CrimsonHyphae {
		const DISPLAY_NAME: &'static str = "Crimson Hyphae";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for StrippedCrimsonHyphae {
		const DISPLAY_NAME: &'static str = "Stripped Crimson Hyphae";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 2.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CrimsonNylium {
		const DISPLAY_NAME: &'static str = "Crimson Nylium";
		const HARDNESS: f32 = 0.4;
		const RESISTANCE: f32 = 0.4;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CrimsonFungus {
		const DISPLAY_NAME: &'static str = "Crimson Fungus";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Shroomlight {
		const DISPLAY_NAME: &'static str = "Shroomlight";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 15;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WeepingVines {
		const DISPLAY_NAME: &'static str = "Weeping Vines";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WeepingVinesPlant {
		const DISPLAY_NAME: &'static str = "Weeping Vines Plant";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for TwistingVines {
		const DISPLAY_NAME: &'static str = "Twisting Vines";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for TwistingVinesPlant {
		const DISPLAY_NAME: &'static str = "Twisting Vines Plant";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CrimsonRoots {
		const DISPLAY_NAME: &'static str = "Crimson Roots";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CrimsonPlanks {
		const DISPLAY_NAME: &'static str = "Crimson Planks";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WarpedPlanks {
		const DISPLAY_NAME: &'static str = "Warped Planks";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CrimsonSlab {
		const DISPLAY_NAME: &'static str = "Crimson Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WarpedSlab {
		const DISPLAY_NAME: &'static str = "Warped Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CrimsonPressurePlate {
		const DISPLAY_NAME: &'static str = "Crimson Pressure Plate";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WarpedPressurePlate {
		const DISPLAY_NAME: &'static str = "Warped Pressure Plate";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CrimsonFence {
		const DISPLAY_NAME: &'static str = "Crimson Fence";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WarpedFence {
		const DISPLAY_NAME: &'static str = "Warped Fence";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CrimsonTrapdoor {
		const DISPLAY_NAME: &'static str = "Crimson Trapdoor";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WarpedTrapdoor {
		const DISPLAY_NAME: &'static str = "Warped Trapdoor";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CrimsonFenceGate {
		const DISPLAY_NAME: &'static str = "Crimson Fence Gate";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WarpedFenceGate {
		const DISPLAY_NAME: &'static str = "Warped Fence Gate";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CrimsonStairs {
		const DISPLAY_NAME: &'static str = "Crimson Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WarpedStairs {
		const DISPLAY_NAME: &'static str = "Warped Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CrimsonButton {
		const DISPLAY_NAME: &'static str = "Crimson Button";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WarpedButton {
		const DISPLAY_NAME: &'static str = "Warped Button";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CrimsonDoor {
		const DISPLAY_NAME: &'static str = "Crimson Door";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WarpedDoor {
		const DISPLAY_NAME: &'static str = "Warped Door";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CrimsonSign {
		const DISPLAY_NAME: &'static str = "Crimson Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WarpedSign {
		const DISPLAY_NAME: &'static str = "Warped Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CrimsonWallSign {
		const DISPLAY_NAME: &'static str = "Crimson Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WarpedWallSign {
		const DISPLAY_NAME: &'static str = "Warped Sign";
		const HARDNESS: f32 = 1.0;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 16;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for StructureBlock {
		const DISPLAY_NAME: &'static str = "Structure Block";
		const HARDNESS: f32 = -1.0;
		const RESISTANCE: f32 = 3600000.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = false;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Jigsaw {
		const DISPLAY_NAME: &'static str = "Jigsaw Block";
		const HARDNESS: f32 = -1.0;
		const RESISTANCE: f32 = 3600000.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = false;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Composter {
		const DISPLAY_NAME: &'static str = "Composter";
		const HARDNESS: f32 = 0.6;
		const RESISTANCE: f32 = 0.6;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Target {
		const DISPLAY_NAME: &'static str = "Target";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BeeNest {
		const DISPLAY_NAME: &'static str = "Bee Nest";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Beehive {
		const DISPLAY_NAME: &'static str = "Beehive";
		const HARDNESS: f32 = 0.6;
		const RESISTANCE: f32 = 0.6;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for HoneyBlock {
		const DISPLAY_NAME: &'static str = "Honey Block";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for HoneycombBlock {
		const DISPLAY_NAME: &'static str = "Honeycomb Block";
		const HARDNESS: f32 = 0.6;
		const RESISTANCE: f32 = 0.6;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for NetheriteBlock {
		const DISPLAY_NAME: &'static str = "Block of Netherite";
		const HARDNESS: f32 = 50.0;
		const RESISTANCE: f32 = 1200.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for AncientDebris {
		const DISPLAY_NAME: &'static str = "Ancient Debris";
		const HARDNESS: f32 = 30.0;
		const RESISTANCE: f32 = 1200.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CryingObsidian {
		const DISPLAY_NAME: &'static str = "Crying Obsidian";
		const HARDNESS: f32 = 50.0;
		const RESISTANCE: f32 = 1200.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 10;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for RespawnAnchor {
		const DISPLAY_NAME: &'static str = "Respawn Anchor";
		const HARDNESS: f32 = 50.0;
		const RESISTANCE: f32 = 1200.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PottedCrimsonFungus {
		const DISPLAY_NAME: &'static str = "Potted Crimson Fungus";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedWarpedFungus {
		const DISPLAY_NAME: &'static str = "Potted Warped Fungus";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedCrimsonRoots {
		const DISPLAY_NAME: &'static str = "Potted Crimson Roots";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedWarpedRoots {
		const DISPLAY_NAME: &'static str = "Potted Warped Roots";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Lodestone {
		const DISPLAY_NAME: &'static str = "Lodestone";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 3.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Blackstone {
		const DISPLAY_NAME: &'static str = "Blackstone";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BlackstoneStairs {
		const DISPLAY_NAME: &'static str = "Blackstone Stairs";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlackstoneWall {
		const DISPLAY_NAME: &'static str = "Blackstone Wall";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlackstoneSlab {
		const DISPLAY_NAME: &'static str = "Blackstone Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PolishedBlackstone {
		const DISPLAY_NAME: &'static str = "Polished Blackstone";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PolishedBlackstoneBricks {
		const DISPLAY_NAME: &'static str = "Polished Blackstone Bricks";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CrackedPolishedBlackstoneBricks {
		const DISPLAY_NAME: &'static str = "Cracked Polished Blackstone Bricks";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for ChiseledPolishedBlackstone {
		const DISPLAY_NAME: &'static str = "Chiseled Polished Blackstone";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PolishedBlackstoneBrickSlab {
		const DISPLAY_NAME: &'static str = "Polished Blackstone Brick Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PolishedBlackstoneBrickStairs {
		const DISPLAY_NAME: &'static str = "Polished Blackstone Brick Stairs";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PolishedBlackstoneBrickWall {
		const DISPLAY_NAME: &'static str = "Polished Blackstone Brick Wall";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GildedBlackstone {
		const DISPLAY_NAME: &'static str = "Gilded Blackstone";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PolishedBlackstoneStairs {
		const DISPLAY_NAME: &'static str = "Polished Blackstone Stairs";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PolishedBlackstoneSlab {
		const DISPLAY_NAME: &'static str = "Polished Blackstone Slab";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PolishedBlackstonePressurePlate {
		const DISPLAY_NAME: &'static str = "Polished Blackstone Pressure Plate";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PolishedBlackstoneButton {
		const DISPLAY_NAME: &'static str = "Polished Blackstone Button";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PolishedBlackstoneWall {
		const DISPLAY_NAME: &'static str = "Polished Blackstone Wall";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for ChiseledNetherBricks {
		const DISPLAY_NAME: &'static str = "Chiseled Nether Bricks";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CrackedNetherBricks {
		const DISPLAY_NAME: &'static str = "Cracked Nether Bricks";
		const HARDNESS: f32 = 2.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for QuartzBricks {
		const DISPLAY_NAME: &'static str = "Quartz Bricks";
		const HARDNESS: f32 = 0.8;
		const RESISTANCE: f32 = 0.8;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Candle {
		const DISPLAY_NAME: &'static str = "Candle";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WhiteCandle {
		const DISPLAY_NAME: &'static str = "White Candle";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OrangeCandle {
		const DISPLAY_NAME: &'static str = "Orange Candle";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MagentaCandle {
		const DISPLAY_NAME: &'static str = "Magenta Candle";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightBlueCandle {
		const DISPLAY_NAME: &'static str = "Light Blue Candle";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for YellowCandle {
		const DISPLAY_NAME: &'static str = "Yellow Candle";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LimeCandle {
		const DISPLAY_NAME: &'static str = "Lime Candle";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PinkCandle {
		const DISPLAY_NAME: &'static str = "Pink Candle";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GrayCandle {
		const DISPLAY_NAME: &'static str = "Gray Candle";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightGrayCandle {
		const DISPLAY_NAME: &'static str = "Light Gray Candle";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CyanCandle {
		const DISPLAY_NAME: &'static str = "Cyan Candle";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PurpleCandle {
		const DISPLAY_NAME: &'static str = "Purple Candle";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlueCandle {
		const DISPLAY_NAME: &'static str = "Blue Candle";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BrownCandle {
		const DISPLAY_NAME: &'static str = "Brown Candle";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GreenCandle {
		const DISPLAY_NAME: &'static str = "Green Candle";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedCandle {
		const DISPLAY_NAME: &'static str = "Red Candle";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlackCandle {
		const DISPLAY_NAME: &'static str = "Black Candle";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CandleCake {
		const DISPLAY_NAME: &'static str = "Cake with Candle";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WhiteCandleCake {
		const DISPLAY_NAME: &'static str = "Cake with White Candle";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OrangeCandleCake {
		const DISPLAY_NAME: &'static str = "Cake with Orange Candle";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MagentaCandleCake {
		const DISPLAY_NAME: &'static str = "Cake with Magenta Candle";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightBlueCandleCake {
		const DISPLAY_NAME: &'static str = "Cake with Light Blue Candle";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for YellowCandleCake {
		const DISPLAY_NAME: &'static str = "Cake with Yellow Candle";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LimeCandleCake {
		const DISPLAY_NAME: &'static str = "Cake with Lime Candle";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PinkCandleCake {
		const DISPLAY_NAME: &'static str = "Cake with Pink Candle";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GrayCandleCake {
		const DISPLAY_NAME: &'static str = "Cake with Gray Candle";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightGrayCandleCake {
		const DISPLAY_NAME: &'static str = "Cake with Light Gray Candle";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CyanCandleCake {
		const DISPLAY_NAME: &'static str = "Cake with Cyan Candle";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PurpleCandleCake {
		const DISPLAY_NAME: &'static str = "Cake with Purple Candle";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlueCandleCake {
		const DISPLAY_NAME: &'static str = "Cake with Blue Candle";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BrownCandleCake {
		const DISPLAY_NAME: &'static str = "Cake with Brown Candle";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for GreenCandleCake {
		const DISPLAY_NAME: &'static str = "Cake with Green Candle";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RedCandleCake {
		const DISPLAY_NAME: &'static str = "Cake with Red Candle";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BlackCandleCake {
		const DISPLAY_NAME: &'static str = "Cake with Black Candle";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for AmethystBlock {
		const DISPLAY_NAME: &'static str = "Block of Amethyst";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 1.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BuddingAmethyst {
		const DISPLAY_NAME: &'static str = "Budding Amethyst";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 1.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for AmethystCluster {
		const DISPLAY_NAME: &'static str = "Amethyst Cluster";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 1.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 5;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LargeAmethystBud {
		const DISPLAY_NAME: &'static str = "Large Amethyst Bud";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 1.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 4;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MediumAmethystBud {
		const DISPLAY_NAME: &'static str = "Medium Amethyst Bud";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 1.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 2;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SmallAmethystBud {
		const DISPLAY_NAME: &'static str = "Small Amethyst Bud";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 1.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 1;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Tuff {
		const DISPLAY_NAME: &'static str = "Tuff";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Calcite {
		const DISPLAY_NAME: &'static str = "Calcite";
		const HARDNESS: f32 = 0.75;
		const RESISTANCE: f32 = 0.75;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for TintedGlass {
		const DISPLAY_NAME: &'static str = "Tinted Glass";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PowderSnow {
		const DISPLAY_NAME: &'static str = "Powder Snow";
		const HARDNESS: f32 = 0.25;
		const RESISTANCE: f32 = 0.25;
		const STACK_SIZE: u8 = 1;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for SculkSensor {
		const DISPLAY_NAME: &'static str = "Sculk Sensor";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 1.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 1;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Sculk {
		const DISPLAY_NAME: &'static str = "Sculk";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for SculkVein {
		const DISPLAY_NAME: &'static str = "Sculk Vein";
		const HARDNESS: f32 = 0.2;
		const RESISTANCE: f32 = 0.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for SculkCatalyst {
		const DISPLAY_NAME: &'static str = "Sculk Catalyst";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 6;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for SculkShrieker {
		const DISPLAY_NAME: &'static str = "Sculk Shrieker";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 1;
	}

	impl BlockProperties for OxidizedCopper {
		const DISPLAY_NAME: &'static str = "Oxidized Copper";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WeatheredCopper {
		const DISPLAY_NAME: &'static str = "Weathered Copper";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for ExposedCopper {
		const DISPLAY_NAME: &'static str = "Exposed Copper";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CopperBlock {
		const DISPLAY_NAME: &'static str = "Block of Copper";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CopperOre {
		const DISPLAY_NAME: &'static str = "Copper Ore";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DeepslateCopperOre {
		const DISPLAY_NAME: &'static str = "Deepslate Copper Ore";
		const HARDNESS: f32 = 4.5;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for OxidizedCutCopper {
		const DISPLAY_NAME: &'static str = "Oxidized Cut Copper";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WeatheredCutCopper {
		const DISPLAY_NAME: &'static str = "Weathered Cut Copper";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for ExposedCutCopper {
		const DISPLAY_NAME: &'static str = "Exposed Cut Copper";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CutCopper {
		const DISPLAY_NAME: &'static str = "Cut Copper";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for OxidizedCutCopperStairs {
		const DISPLAY_NAME: &'static str = "Oxidized Cut Copper Stairs";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WeatheredCutCopperStairs {
		const DISPLAY_NAME: &'static str = "Weathered Cut Copper Stairs";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for ExposedCutCopperStairs {
		const DISPLAY_NAME: &'static str = "Exposed Cut Copper Stairs";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CutCopperStairs {
		const DISPLAY_NAME: &'static str = "Cut Copper Stairs";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OxidizedCutCopperSlab {
		const DISPLAY_NAME: &'static str = "Oxidized Cut Copper Slab";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WeatheredCutCopperSlab {
		const DISPLAY_NAME: &'static str = "Weathered Cut Copper Slab";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for ExposedCutCopperSlab {
		const DISPLAY_NAME: &'static str = "Exposed Cut Copper Slab";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CutCopperSlab {
		const DISPLAY_NAME: &'static str = "Cut Copper Slab";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WaxedCopperBlock {
		const DISPLAY_NAME: &'static str = "Waxed Block of Copper";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WaxedWeatheredCopper {
		const DISPLAY_NAME: &'static str = "Waxed Weathered Copper";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WaxedExposedCopper {
		const DISPLAY_NAME: &'static str = "Waxed Exposed Copper";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WaxedOxidizedCopper {
		const DISPLAY_NAME: &'static str = "Waxed Oxidized Copper";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WaxedOxidizedCutCopper {
		const DISPLAY_NAME: &'static str = "Waxed Oxidized Cut Copper";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WaxedWeatheredCutCopper {
		const DISPLAY_NAME: &'static str = "Waxed Weathered Cut Copper";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WaxedExposedCutCopper {
		const DISPLAY_NAME: &'static str = "Waxed Exposed Cut Copper";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WaxedCutCopper {
		const DISPLAY_NAME: &'static str = "Waxed Cut Copper";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for WaxedOxidizedCutCopperStairs {
		const DISPLAY_NAME: &'static str = "Waxed Oxidized Cut Copper Stairs";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WaxedWeatheredCutCopperStairs {
		const DISPLAY_NAME: &'static str = "Waxed Weathered Cut Copper Stairs";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WaxedExposedCutCopperStairs {
		const DISPLAY_NAME: &'static str = "Waxed Exposed Cut Copper Stairs";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WaxedCutCopperStairs {
		const DISPLAY_NAME: &'static str = "Waxed Cut Copper Stairs";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WaxedOxidizedCutCopperSlab {
		const DISPLAY_NAME: &'static str = "Waxed Oxidized Cut Copper Slab";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WaxedWeatheredCutCopperSlab {
		const DISPLAY_NAME: &'static str = "Waxed Weathered Cut Copper Slab";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WaxedExposedCutCopperSlab {
		const DISPLAY_NAME: &'static str = "Waxed Exposed Cut Copper Slab";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for WaxedCutCopperSlab {
		const DISPLAY_NAME: &'static str = "Waxed Cut Copper Slab";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for LightningRod {
		const DISPLAY_NAME: &'static str = "Lightning Rod";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PointedDripstone {
		const DISPLAY_NAME: &'static str = "Pointed Dripstone";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 3.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DripstoneBlock {
		const DISPLAY_NAME: &'static str = "Dripstone Block";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 1.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CaveVines {
		const DISPLAY_NAME: &'static str = "Cave Vines";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CaveVinesPlant {
		const DISPLAY_NAME: &'static str = "Cave Vines Plant";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SporeBlossom {
		const DISPLAY_NAME: &'static str = "Spore Blossom";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for Azalea {
		const DISPLAY_NAME: &'static str = "Azalea";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for FloweringAzalea {
		const DISPLAY_NAME: &'static str = "Flowering Azalea";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MossCarpet {
		const DISPLAY_NAME: &'static str = "Moss Carpet";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for MossBlock {
		const DISPLAY_NAME: &'static str = "Moss Block";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for BigDripleaf {
		const DISPLAY_NAME: &'static str = "Big Dripleaf";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for BigDripleafStem {
		const DISPLAY_NAME: &'static str = "Big Dripleaf Stem";
		const HARDNESS: f32 = 0.1;
		const RESISTANCE: f32 = 0.1;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for SmallDripleaf {
		const DISPLAY_NAME: &'static str = "Small Dripleaf";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for HangingRoots {
		const DISPLAY_NAME: &'static str = "Hanging Roots";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for RootedDirt {
		const DISPLAY_NAME: &'static str = "Rooted Dirt";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Mud {
		const DISPLAY_NAME: &'static str = "Mud";
		const HARDNESS: f32 = 0.5;
		const RESISTANCE: f32 = 0.5;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Deepslate {
		const DISPLAY_NAME: &'static str = "Deepslate";
		const HARDNESS: f32 = 3.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CobbledDeepslate {
		const DISPLAY_NAME: &'static str = "Cobbled Deepslate";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CobbledDeepslateStairs {
		const DISPLAY_NAME: &'static str = "Cobbled Deepslate Stairs";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CobbledDeepslateSlab {
		const DISPLAY_NAME: &'static str = "Cobbled Deepslate Slab";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for CobbledDeepslateWall {
		const DISPLAY_NAME: &'static str = "Cobbled Deepslate Wall";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PolishedDeepslate {
		const DISPLAY_NAME: &'static str = "Polished Deepslate";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PolishedDeepslateStairs {
		const DISPLAY_NAME: &'static str = "Polished Deepslate Stairs";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PolishedDeepslateSlab {
		const DISPLAY_NAME: &'static str = "Polished Deepslate Slab";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PolishedDeepslateWall {
		const DISPLAY_NAME: &'static str = "Polished Deepslate Wall";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DeepslateTiles {
		const DISPLAY_NAME: &'static str = "Deepslate Tiles";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DeepslateTileStairs {
		const DISPLAY_NAME: &'static str = "Deepslate Tile Stairs";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DeepslateTileSlab {
		const DISPLAY_NAME: &'static str = "Deepslate Tile Slab";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DeepslateTileWall {
		const DISPLAY_NAME: &'static str = "Deepslate Tile Wall";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DeepslateBricks {
		const DISPLAY_NAME: &'static str = "Deepslate Bricks";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for DeepslateBrickStairs {
		const DISPLAY_NAME: &'static str = "Deepslate Brick Stairs";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DeepslateBrickSlab {
		const DISPLAY_NAME: &'static str = "Deepslate Brick Slab";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for DeepslateBrickWall {
		const DISPLAY_NAME: &'static str = "Deepslate Brick Wall";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for ChiseledDeepslate {
		const DISPLAY_NAME: &'static str = "Chiseled Deepslate";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CrackedDeepslateBricks {
		const DISPLAY_NAME: &'static str = "Cracked Deepslate Bricks";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for CrackedDeepslateTiles {
		const DISPLAY_NAME: &'static str = "Cracked Deepslate Tiles";
		const HARDNESS: f32 = 3.5;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for InfestedDeepslate {
		const DISPLAY_NAME: &'static str = "Infested Deepslate";
		const HARDNESS: f32 = 1.5;
		const RESISTANCE: f32 = 0.75;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for SmoothBasalt {
		const DISPLAY_NAME: &'static str = "Smooth Basalt";
		const HARDNESS: f32 = 1.25;
		const RESISTANCE: f32 = 4.2;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for RawIronBlock {
		const DISPLAY_NAME: &'static str = "Block of Raw Iron";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for RawCopperBlock {
		const DISPLAY_NAME: &'static str = "Block of Raw Copper";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for RawGoldBlock {
		const DISPLAY_NAME: &'static str = "Block of Raw Gold";
		const HARDNESS: f32 = 5.0;
		const RESISTANCE: f32 = 6.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PottedAzaleaBush {
		const DISPLAY_NAME: &'static str = "Potted Azalea";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for PottedFloweringAzaleaBush {
		const DISPLAY_NAME: &'static str = "Potted Flowering Azalea";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for OchreFroglight {
		const DISPLAY_NAME: &'static str = "Ochre Froglight";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 15;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for VerdantFroglight {
		const DISPLAY_NAME: &'static str = "Verdant Froglight";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 15;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for PearlescentFroglight {
		const DISPLAY_NAME: &'static str = "Pearlescent Froglight";
		const HARDNESS: f32 = 0.3;
		const RESISTANCE: f32 = 0.3;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 15;
		const FILTER_LIGHT: u8 = 15;
	}

	impl BlockProperties for Frogspawn {
		const DISPLAY_NAME: &'static str = "Frogspawn";
		const HARDNESS: f32 = 0.0;
		const RESISTANCE: f32 = 0.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = true;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 0;
	}

	impl BlockProperties for ReinforcedDeepslate {
		const DISPLAY_NAME: &'static str = "Reinforced Deepslate";
		const HARDNESS: f32 = 55.0;
		const RESISTANCE: f32 = 1200.0;
		const STACK_SIZE: u8 = 64;
		const DIGGABLE: bool = true;
		const TRANSPARENT: bool = false;
		const EMIT_LIGHT: u8 = 0;
		const FILTER_LIGHT: u8 = 15;
	}
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Air;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Stone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Granite;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedGranite;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Diorite;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedDiorite;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Andesite;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedAndesite;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GrassBlock {
	pub r#snowy: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Dirt;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CoarseDirt;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Podzol {
	pub r#snowy: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Cobblestone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OakPlanks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SprucePlanks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BirchPlanks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct JunglePlanks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AcaciaPlanks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkOakPlanks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MangrovePlanks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OakSapling {
	pub r#stage: ConstrainedInt::<0, 1>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SpruceSapling {
	pub r#stage: ConstrainedInt::<0, 1>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BirchSapling {
	pub r#stage: ConstrainedInt::<0, 1>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct JungleSapling {
	pub r#stage: ConstrainedInt::<0, 1>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AcaciaSapling {
	pub r#stage: ConstrainedInt::<0, 1>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkOakSapling {
	pub r#stage: ConstrainedInt::<0, 1>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MangrovePropagule {
	pub r#age: ConstrainedInt::<0, 4>,
	pub r#hanging: bool,
	pub r#stage: ConstrainedInt::<0, 1>,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Bedrock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Water {
	pub r#level: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Lava {
	pub r#level: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Sand;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedSand;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Gravel;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GoldOre;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeepslateGoldOre;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct IronOre;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeepslateIronOre;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CoalOre;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeepslateCoalOre;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct NetherGoldOre;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OakLog {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SpruceLog {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BirchLog {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct JungleLog {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AcaciaLog {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkOakLog {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MangroveLog {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MangroveRoots {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MuddyMangroveRoots {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedSpruceLog {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedBirchLog {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedJungleLog {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedAcaciaLog {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedDarkOakLog {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedOakLog {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedMangroveLog {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OakWood {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SpruceWood {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BirchWood {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct JungleWood {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AcaciaWood {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkOakWood {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MangroveWood {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedOakWood {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedSpruceWood {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedBirchWood {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedJungleWood {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedAcaciaWood {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedDarkOakWood {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedMangroveWood {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OakLeaves {
	pub r#distance: ConstrainedInt::<1, 7>,
	pub r#persistent: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SpruceLeaves {
	pub r#distance: ConstrainedInt::<1, 7>,
	pub r#persistent: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BirchLeaves {
	pub r#distance: ConstrainedInt::<1, 7>,
	pub r#persistent: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct JungleLeaves {
	pub r#distance: ConstrainedInt::<1, 7>,
	pub r#persistent: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AcaciaLeaves {
	pub r#distance: ConstrainedInt::<1, 7>,
	pub r#persistent: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkOakLeaves {
	pub r#distance: ConstrainedInt::<1, 7>,
	pub r#persistent: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MangroveLeaves {
	pub r#distance: ConstrainedInt::<1, 7>,
	pub r#persistent: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AzaleaLeaves {
	pub r#distance: ConstrainedInt::<1, 7>,
	pub r#persistent: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct FloweringAzaleaLeaves {
	pub r#distance: ConstrainedInt::<1, 7>,
	pub r#persistent: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Sponge;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WetSponge;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Glass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LapisOre;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeepslateLapisOre;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LapisBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Dispenser {
	pub r#facing: property_enums::Facing,
	pub r#triggered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Sandstone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ChiseledSandstone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CutSandstone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct NoteBlock {
	pub r#instrument: property_enums::Instrument,
	pub r#note: ConstrainedInt::<0, 24>,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WhiteBed {
	pub r#facing: property_enums::Facing1,
	pub r#occupied: bool,
	pub r#part: property_enums::Part,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OrangeBed {
	pub r#facing: property_enums::Facing1,
	pub r#occupied: bool,
	pub r#part: property_enums::Part,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MagentaBed {
	pub r#facing: property_enums::Facing1,
	pub r#occupied: bool,
	pub r#part: property_enums::Part,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightBlueBed {
	pub r#facing: property_enums::Facing1,
	pub r#occupied: bool,
	pub r#part: property_enums::Part,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct YellowBed {
	pub r#facing: property_enums::Facing1,
	pub r#occupied: bool,
	pub r#part: property_enums::Part,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LimeBed {
	pub r#facing: property_enums::Facing1,
	pub r#occupied: bool,
	pub r#part: property_enums::Part,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PinkBed {
	pub r#facing: property_enums::Facing1,
	pub r#occupied: bool,
	pub r#part: property_enums::Part,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GrayBed {
	pub r#facing: property_enums::Facing1,
	pub r#occupied: bool,
	pub r#part: property_enums::Part,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightGrayBed {
	pub r#facing: property_enums::Facing1,
	pub r#occupied: bool,
	pub r#part: property_enums::Part,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CyanBed {
	pub r#facing: property_enums::Facing1,
	pub r#occupied: bool,
	pub r#part: property_enums::Part,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpleBed {
	pub r#facing: property_enums::Facing1,
	pub r#occupied: bool,
	pub r#part: property_enums::Part,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlueBed {
	pub r#facing: property_enums::Facing1,
	pub r#occupied: bool,
	pub r#part: property_enums::Part,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrownBed {
	pub r#facing: property_enums::Facing1,
	pub r#occupied: bool,
	pub r#part: property_enums::Part,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GreenBed {
	pub r#facing: property_enums::Facing1,
	pub r#occupied: bool,
	pub r#part: property_enums::Part,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedBed {
	pub r#facing: property_enums::Facing1,
	pub r#occupied: bool,
	pub r#part: property_enums::Part,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlackBed {
	pub r#facing: property_enums::Facing1,
	pub r#occupied: bool,
	pub r#part: property_enums::Part,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PoweredRail {
	pub r#powered: bool,
	pub r#shape: property_enums::Shape,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DetectorRail {
	pub r#powered: bool,
	pub r#shape: property_enums::Shape,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StickyPiston {
	pub r#extended: bool,
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Cobweb;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Grass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Fern;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadBush;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Seagrass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct TallSeagrass {
	pub r#half: property_enums::Half,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Piston {
	pub r#extended: bool,
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PistonHead {
	pub r#facing: property_enums::Facing,
	pub r#short: bool,
	pub r#type: property_enums::Type,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WhiteWool;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OrangeWool;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MagentaWool;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightBlueWool;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct YellowWool;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LimeWool;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PinkWool;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GrayWool;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightGrayWool;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CyanWool;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpleWool;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlueWool;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrownWool;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GreenWool;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedWool;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlackWool;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MovingPiston {
	pub r#facing: property_enums::Facing,
	pub r#type: property_enums::Type,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Dandelion;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Poppy;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlueOrchid;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Allium;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AzureBluet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedTulip;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OrangeTulip;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WhiteTulip;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PinkTulip;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OxeyeDaisy;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Cornflower;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WitherRose;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LilyOfTheValley;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrownMushroom;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedMushroom;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GoldBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct IronBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Bricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Tnt {
	pub r#unstable: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Bookshelf;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MossyCobblestone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Obsidian;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Torch;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WallTorch {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Fire {
	pub r#age: ConstrainedInt::<0, 15>,
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#up: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SoulFire;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Spawner;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OakStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Chest {
	pub r#facing: property_enums::Facing1,
	pub r#type: property_enums::Type1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedstoneWire {
	pub r#east: property_enums::East,
	pub r#north: property_enums::North,
	pub r#power: ConstrainedInt::<0, 15>,
	pub r#south: property_enums::South,
	pub r#west: property_enums::West,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DiamondOre;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeepslateDiamondOre;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DiamondBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CraftingTable;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Wheat {
	pub r#age: ConstrainedInt::<0, 7>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Farmland {
	pub r#moisture: ConstrainedInt::<0, 7>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Furnace {
	pub r#facing: property_enums::Facing1,
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OakSign {
	pub r#rotation: ConstrainedInt::<0, 15>,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SpruceSign {
	pub r#rotation: ConstrainedInt::<0, 15>,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BirchSign {
	pub r#rotation: ConstrainedInt::<0, 15>,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AcaciaSign {
	pub r#rotation: ConstrainedInt::<0, 15>,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct JungleSign {
	pub r#rotation: ConstrainedInt::<0, 15>,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkOakSign {
	pub r#rotation: ConstrainedInt::<0, 15>,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MangroveSign {
	pub r#rotation: ConstrainedInt::<0, 15>,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OakDoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half,
	pub r#hinge: property_enums::Hinge,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Ladder {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Rail {
	pub r#shape: property_enums::Shape2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CobblestoneStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OakWallSign {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SpruceWallSign {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BirchWallSign {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AcaciaWallSign {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct JungleWallSign {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkOakWallSign {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MangroveWallSign {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Lever {
	pub r#face: property_enums::Face,
	pub r#facing: property_enums::Facing1,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StonePressurePlate {
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct IronDoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half,
	pub r#hinge: property_enums::Hinge,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OakPressurePlate {
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SprucePressurePlate {
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BirchPressurePlate {
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct JunglePressurePlate {
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AcaciaPressurePlate {
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkOakPressurePlate {
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MangrovePressurePlate {
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedstoneOre {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeepslateRedstoneOre {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedstoneTorch {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedstoneWallTorch {
	pub r#facing: property_enums::Facing1,
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StoneButton {
	pub r#face: property_enums::Face,
	pub r#facing: property_enums::Facing1,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Snow {
	pub r#layers: ConstrainedInt::<1, 8>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Ice;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SnowBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Cactus {
	pub r#age: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Clay;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SugarCane {
	pub r#age: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Jukebox {
	pub r#has_record: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OakFence {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Pumpkin;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Netherrack;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SoulSand;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SoulSoil;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Basalt {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedBasalt {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SoulTorch;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SoulWallTorch {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Glowstone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct NetherPortal {
	pub r#axis: property_enums::Axis1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CarvedPumpkin {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct JackOLantern {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Cake {
	pub r#bites: ConstrainedInt::<0, 6>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Repeater {
	pub r#delay: ConstrainedInt::<1, 4>,
	pub r#facing: property_enums::Facing1,
	pub r#locked: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WhiteStainedGlass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OrangeStainedGlass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MagentaStainedGlass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightBlueStainedGlass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct YellowStainedGlass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LimeStainedGlass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PinkStainedGlass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GrayStainedGlass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightGrayStainedGlass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CyanStainedGlass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpleStainedGlass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlueStainedGlass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrownStainedGlass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GreenStainedGlass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedStainedGlass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlackStainedGlass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OakTrapdoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#open: bool,
	pub r#powered: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SpruceTrapdoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#open: bool,
	pub r#powered: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BirchTrapdoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#open: bool,
	pub r#powered: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct JungleTrapdoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#open: bool,
	pub r#powered: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AcaciaTrapdoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#open: bool,
	pub r#powered: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkOakTrapdoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#open: bool,
	pub r#powered: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MangroveTrapdoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#open: bool,
	pub r#powered: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StoneBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MossyStoneBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrackedStoneBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ChiseledStoneBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PackedMud;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MudBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct InfestedStone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct InfestedCobblestone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct InfestedStoneBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct InfestedMossyStoneBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct InfestedCrackedStoneBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct InfestedChiseledStoneBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrownMushroomBlock {
	pub r#down: bool,
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#up: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedMushroomBlock {
	pub r#down: bool,
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#up: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MushroomStem {
	pub r#down: bool,
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#up: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct IronBars {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Chain {
	pub r#axis: property_enums::Axis,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GlassPane {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Melon;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AttachedPumpkinStem {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AttachedMelonStem {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PumpkinStem {
	pub r#age: ConstrainedInt::<0, 7>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MelonStem {
	pub r#age: ConstrainedInt::<0, 7>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Vine {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#up: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GlowLichen {
	pub r#down: bool,
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OakFenceGate {
	pub r#facing: property_enums::Facing1,
	pub r#in_wall: bool,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrickStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StoneBrickStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MudBrickStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Mycelium {
	pub r#snowy: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LilyPad;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct NetherBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct NetherBrickFence {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct NetherBrickStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct NetherWart {
	pub r#age: ConstrainedInt::<0, 3>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct EnchantingTable;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrewingStand {
	pub r#has_bottle_0: bool,
	pub r#has_bottle_1: bool,
	pub r#has_bottle_2: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Cauldron;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WaterCauldron {
	pub r#level: ConstrainedInt::<1, 3>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LavaCauldron;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PowderSnowCauldron {
	pub r#level: ConstrainedInt::<1, 3>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct EndPortal;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct EndPortalFrame {
	pub r#eye: bool,
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct EndStone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DragonEgg;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedstoneLamp {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Cocoa {
	pub r#age: ConstrainedInt::<0, 2>,
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SandstoneStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct EmeraldOre;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeepslateEmeraldOre;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct EnderChest {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct TripwireHook {
	pub r#attached: bool,
	pub r#facing: property_enums::Facing1,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Tripwire {
	pub r#attached: bool,
	pub r#disarmed: bool,
	pub r#east: bool,
	pub r#north: bool,
	pub r#powered: bool,
	pub r#south: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct EmeraldBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SpruceStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BirchStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct JungleStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CommandBlock {
	pub r#conditional: bool,
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Beacon;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CobblestoneWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MossyCobblestoneWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct FlowerPot;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedOakSapling;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedSpruceSapling;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedBirchSapling;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedJungleSapling;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedAcaciaSapling;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedDarkOakSapling;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedMangrovePropagule;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedFern;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedDandelion;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedPoppy;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedBlueOrchid;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedAllium;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedAzureBluet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedRedTulip;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedOrangeTulip;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedWhiteTulip;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedPinkTulip;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedOxeyeDaisy;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedCornflower;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedLilyOfTheValley;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedWitherRose;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedRedMushroom;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedBrownMushroom;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedDeadBush;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedCactus;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Carrots {
	pub r#age: ConstrainedInt::<0, 7>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Potatoes {
	pub r#age: ConstrainedInt::<0, 7>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OakButton {
	pub r#face: property_enums::Face,
	pub r#facing: property_enums::Facing1,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SpruceButton {
	pub r#face: property_enums::Face,
	pub r#facing: property_enums::Facing1,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BirchButton {
	pub r#face: property_enums::Face,
	pub r#facing: property_enums::Facing1,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct JungleButton {
	pub r#face: property_enums::Face,
	pub r#facing: property_enums::Facing1,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AcaciaButton {
	pub r#face: property_enums::Face,
	pub r#facing: property_enums::Facing1,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkOakButton {
	pub r#face: property_enums::Face,
	pub r#facing: property_enums::Facing1,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MangroveButton {
	pub r#face: property_enums::Face,
	pub r#facing: property_enums::Facing1,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SkeletonSkull {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SkeletonWallSkull {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WitherSkeletonSkull {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WitherSkeletonWallSkull {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ZombieHead {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ZombieWallHead {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PlayerHead {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PlayerWallHead {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CreeperHead {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CreeperWallHead {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DragonHead {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DragonWallHead {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Anvil {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ChippedAnvil {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DamagedAnvil {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct TrappedChest {
	pub r#facing: property_enums::Facing1,
	pub r#type: property_enums::Type1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightWeightedPressurePlate {
	pub r#power: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct HeavyWeightedPressurePlate {
	pub r#power: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Comparator {
	pub r#facing: property_enums::Facing1,
	pub r#mode: property_enums::Mode,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DaylightDetector {
	pub r#inverted: bool,
	pub r#power: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedstoneBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct NetherQuartzOre;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Hopper {
	pub r#enabled: bool,
	pub r#facing: property_enums::Facing2,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct QuartzBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ChiseledQuartzBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct QuartzPillar {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct QuartzStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ActivatorRail {
	pub r#powered: bool,
	pub r#shape: property_enums::Shape,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Dropper {
	pub r#facing: property_enums::Facing,
	pub r#triggered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WhiteTerracotta;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OrangeTerracotta;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MagentaTerracotta;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightBlueTerracotta;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct YellowTerracotta;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LimeTerracotta;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PinkTerracotta;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GrayTerracotta;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightGrayTerracotta;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CyanTerracotta;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpleTerracotta;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlueTerracotta;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrownTerracotta;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GreenTerracotta;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedTerracotta;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlackTerracotta;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WhiteStainedGlassPane {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OrangeStainedGlassPane {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MagentaStainedGlassPane {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightBlueStainedGlassPane {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct YellowStainedGlassPane {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LimeStainedGlassPane {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PinkStainedGlassPane {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GrayStainedGlassPane {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightGrayStainedGlassPane {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CyanStainedGlassPane {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpleStainedGlassPane {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlueStainedGlassPane {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrownStainedGlassPane {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GreenStainedGlassPane {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedStainedGlassPane {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlackStainedGlassPane {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AcaciaStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkOakStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MangroveStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SlimeBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Barrier;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Light {
	pub r#level: ConstrainedInt::<0, 15>,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct IronTrapdoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#open: bool,
	pub r#powered: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Prismarine;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PrismarineBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkPrismarine;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PrismarineStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PrismarineBrickStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkPrismarineStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PrismarineSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PrismarineBrickSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkPrismarineSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SeaLantern;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct HayBlock {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WhiteCarpet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OrangeCarpet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MagentaCarpet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightBlueCarpet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct YellowCarpet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LimeCarpet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PinkCarpet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GrayCarpet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightGrayCarpet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CyanCarpet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpleCarpet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlueCarpet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrownCarpet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GreenCarpet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedCarpet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlackCarpet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Terracotta;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CoalBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PackedIce;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Sunflower {
	pub r#half: property_enums::Half,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Lilac {
	pub r#half: property_enums::Half,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RoseBush {
	pub r#half: property_enums::Half,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Peony {
	pub r#half: property_enums::Half,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct TallGrass {
	pub r#half: property_enums::Half,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LargeFern {
	pub r#half: property_enums::Half,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WhiteBanner {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OrangeBanner {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MagentaBanner {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightBlueBanner {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct YellowBanner {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LimeBanner {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PinkBanner {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GrayBanner {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightGrayBanner {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CyanBanner {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpleBanner {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlueBanner {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrownBanner {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GreenBanner {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedBanner {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlackBanner {
	pub r#rotation: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WhiteWallBanner {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OrangeWallBanner {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MagentaWallBanner {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightBlueWallBanner {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct YellowWallBanner {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LimeWallBanner {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PinkWallBanner {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GrayWallBanner {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightGrayWallBanner {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CyanWallBanner {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpleWallBanner {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlueWallBanner {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrownWallBanner {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GreenWallBanner {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedWallBanner {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlackWallBanner {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedSandstone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ChiseledRedSandstone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CutRedSandstone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedSandstoneStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OakSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SpruceSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BirchSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct JungleSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AcaciaSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkOakSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MangroveSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StoneSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SmoothStoneSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SandstoneSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CutSandstoneSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PetrifiedOakSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CobblestoneSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrickSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StoneBrickSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MudBrickSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct NetherBrickSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct QuartzSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedSandstoneSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CutRedSandstoneSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpurSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SmoothStone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SmoothSandstone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SmoothQuartz;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SmoothRedSandstone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SpruceFenceGate {
	pub r#facing: property_enums::Facing1,
	pub r#in_wall: bool,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BirchFenceGate {
	pub r#facing: property_enums::Facing1,
	pub r#in_wall: bool,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct JungleFenceGate {
	pub r#facing: property_enums::Facing1,
	pub r#in_wall: bool,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AcaciaFenceGate {
	pub r#facing: property_enums::Facing1,
	pub r#in_wall: bool,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkOakFenceGate {
	pub r#facing: property_enums::Facing1,
	pub r#in_wall: bool,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MangroveFenceGate {
	pub r#facing: property_enums::Facing1,
	pub r#in_wall: bool,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SpruceFence {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BirchFence {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct JungleFence {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AcaciaFence {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkOakFence {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MangroveFence {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SpruceDoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half,
	pub r#hinge: property_enums::Hinge,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BirchDoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half,
	pub r#hinge: property_enums::Hinge,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct JungleDoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half,
	pub r#hinge: property_enums::Hinge,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AcaciaDoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half,
	pub r#hinge: property_enums::Hinge,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DarkOakDoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half,
	pub r#hinge: property_enums::Hinge,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MangroveDoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half,
	pub r#hinge: property_enums::Hinge,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct EndRod {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ChorusPlant {
	pub r#down: bool,
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#up: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ChorusFlower {
	pub r#age: ConstrainedInt::<0, 5>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpurBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpurPillar {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpurStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct EndStoneBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Beetroots {
	pub r#age: ConstrainedInt::<0, 3>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DirtPath;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct EndGateway;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RepeatingCommandBlock {
	pub r#conditional: bool,
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ChainCommandBlock {
	pub r#conditional: bool,
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct FrostedIce {
	pub r#age: ConstrainedInt::<0, 3>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MagmaBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct NetherWartBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedNetherBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BoneBlock {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StructureVoid;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Observer {
	pub r#facing: property_enums::Facing,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ShulkerBox {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WhiteShulkerBox {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OrangeShulkerBox {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MagentaShulkerBox {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightBlueShulkerBox {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct YellowShulkerBox {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LimeShulkerBox {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PinkShulkerBox {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GrayShulkerBox {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightGrayShulkerBox {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CyanShulkerBox {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpleShulkerBox {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlueShulkerBox {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrownShulkerBox {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GreenShulkerBox {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedShulkerBox {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlackShulkerBox {
	pub r#facing: property_enums::Facing,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WhiteGlazedTerracotta {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OrangeGlazedTerracotta {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MagentaGlazedTerracotta {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightBlueGlazedTerracotta {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct YellowGlazedTerracotta {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LimeGlazedTerracotta {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PinkGlazedTerracotta {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GrayGlazedTerracotta {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightGrayGlazedTerracotta {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CyanGlazedTerracotta {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpleGlazedTerracotta {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlueGlazedTerracotta {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrownGlazedTerracotta {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GreenGlazedTerracotta {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedGlazedTerracotta {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlackGlazedTerracotta {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WhiteConcrete;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OrangeConcrete;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MagentaConcrete;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightBlueConcrete;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct YellowConcrete;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LimeConcrete;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PinkConcrete;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GrayConcrete;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightGrayConcrete;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CyanConcrete;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpleConcrete;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlueConcrete;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrownConcrete;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GreenConcrete;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedConcrete;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlackConcrete;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WhiteConcretePowder;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OrangeConcretePowder;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MagentaConcretePowder;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightBlueConcretePowder;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct YellowConcretePowder;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LimeConcretePowder;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PinkConcretePowder;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GrayConcretePowder;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightGrayConcretePowder;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CyanConcretePowder;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpleConcretePowder;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlueConcretePowder;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrownConcretePowder;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GreenConcretePowder;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedConcretePowder;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlackConcretePowder;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Kelp {
	pub r#age: ConstrainedInt::<0, 25>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct KelpPlant;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DriedKelpBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct TurtleEgg {
	pub r#eggs: ConstrainedInt::<1, 4>,
	pub r#hatch: ConstrainedInt::<0, 2>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadTubeCoralBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadBrainCoralBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadBubbleCoralBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadFireCoralBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadHornCoralBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct TubeCoralBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrainCoralBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BubbleCoralBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct FireCoralBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct HornCoralBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadTubeCoral {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadBrainCoral {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadBubbleCoral {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadFireCoral {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadHornCoral {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct TubeCoral {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrainCoral {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BubbleCoral {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct FireCoral {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct HornCoral {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadTubeCoralFan {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadBrainCoralFan {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadBubbleCoralFan {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadFireCoralFan {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadHornCoralFan {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct TubeCoralFan {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrainCoralFan {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BubbleCoralFan {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct FireCoralFan {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct HornCoralFan {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadTubeCoralWallFan {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadBrainCoralWallFan {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadBubbleCoralWallFan {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadFireCoralWallFan {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeadHornCoralWallFan {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct TubeCoralWallFan {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrainCoralWallFan {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BubbleCoralWallFan {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct FireCoralWallFan {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct HornCoralWallFan {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SeaPickle {
	pub r#pickles: ConstrainedInt::<1, 4>,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlueIce;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Conduit {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BambooSapling;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Bamboo {
	pub r#age: ConstrainedInt::<0, 1>,
	pub r#leaves: property_enums::Leaves,
	pub r#stage: ConstrainedInt::<0, 1>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedBamboo;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct VoidAir;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CaveAir;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BubbleColumn {
	pub r#drag: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedGraniteStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SmoothRedSandstoneStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MossyStoneBrickStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedDioriteStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MossyCobblestoneStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct EndStoneBrickStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StoneStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SmoothSandstoneStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SmoothQuartzStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GraniteStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AndesiteStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedNetherBrickStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedAndesiteStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DioriteStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedGraniteSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SmoothRedSandstoneSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MossyStoneBrickSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedDioriteSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MossyCobblestoneSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct EndStoneBrickSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SmoothSandstoneSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SmoothQuartzSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GraniteSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AndesiteSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedNetherBrickSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedAndesiteSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DioriteSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrickWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PrismarineWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedSandstoneWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MossyStoneBrickWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GraniteWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StoneBrickWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MudBrickWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct NetherBrickWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AndesiteWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedNetherBrickWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SandstoneWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct EndStoneBrickWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DioriteWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Scaffolding {
	pub r#bottom: bool,
	pub r#distance: ConstrainedInt::<0, 7>,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Loom {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Barrel {
	pub r#facing: property_enums::Facing,
	pub r#open: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Smoker {
	pub r#facing: property_enums::Facing1,
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlastFurnace {
	pub r#facing: property_enums::Facing1,
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CartographyTable;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct FletchingTable;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Grindstone {
	pub r#face: property_enums::Face,
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Lectern {
	pub r#facing: property_enums::Facing1,
	pub r#has_book: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SmithingTable;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Stonecutter {
	pub r#facing: property_enums::Facing1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Bell {
	pub r#attachment: property_enums::Attachment,
	pub r#facing: property_enums::Facing1,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Lantern {
	pub r#hanging: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SoulLantern {
	pub r#hanging: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Campfire {
	pub r#facing: property_enums::Facing1,
	pub r#lit: bool,
	pub r#signal_fire: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SoulCampfire {
	pub r#facing: property_enums::Facing1,
	pub r#lit: bool,
	pub r#signal_fire: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SweetBerryBush {
	pub r#age: ConstrainedInt::<0, 3>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WarpedStem {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedWarpedStem {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WarpedHyphae {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedWarpedHyphae {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WarpedNylium;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WarpedFungus;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WarpedWartBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WarpedRoots;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct NetherSprouts;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrimsonStem {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedCrimsonStem {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrimsonHyphae {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StrippedCrimsonHyphae {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrimsonNylium;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrimsonFungus;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Shroomlight;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WeepingVines {
	pub r#age: ConstrainedInt::<0, 25>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WeepingVinesPlant;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct TwistingVines {
	pub r#age: ConstrainedInt::<0, 25>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct TwistingVinesPlant;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrimsonRoots;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrimsonPlanks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WarpedPlanks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrimsonSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WarpedSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrimsonPressurePlate {
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WarpedPressurePlate {
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrimsonFence {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WarpedFence {
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrimsonTrapdoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#open: bool,
	pub r#powered: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WarpedTrapdoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#open: bool,
	pub r#powered: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrimsonFenceGate {
	pub r#facing: property_enums::Facing1,
	pub r#in_wall: bool,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WarpedFenceGate {
	pub r#facing: property_enums::Facing1,
	pub r#in_wall: bool,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrimsonStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WarpedStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrimsonButton {
	pub r#face: property_enums::Face,
	pub r#facing: property_enums::Facing1,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WarpedButton {
	pub r#face: property_enums::Face,
	pub r#facing: property_enums::Facing1,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrimsonDoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half,
	pub r#hinge: property_enums::Hinge,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WarpedDoor {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half,
	pub r#hinge: property_enums::Hinge,
	pub r#open: bool,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrimsonSign {
	pub r#rotation: ConstrainedInt::<0, 15>,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WarpedSign {
	pub r#rotation: ConstrainedInt::<0, 15>,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrimsonWallSign {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WarpedWallSign {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct StructureBlock {
	pub r#mode: property_enums::Mode1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Jigsaw {
	pub r#orientation: property_enums::Orientation,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Composter {
	pub r#level: ConstrainedInt::<0, 8>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Target {
	pub r#power: ConstrainedInt::<0, 15>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BeeNest {
	pub r#facing: property_enums::Facing1,
	pub r#honey_level: ConstrainedInt::<0, 5>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Beehive {
	pub r#facing: property_enums::Facing1,
	pub r#honey_level: ConstrainedInt::<0, 5>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct HoneyBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct HoneycombBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct NetheriteBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AncientDebris;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CryingObsidian;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RespawnAnchor {
	pub r#charges: ConstrainedInt::<0, 4>,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedCrimsonFungus;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedWarpedFungus;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedCrimsonRoots;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedWarpedRoots;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Lodestone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Blackstone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlackstoneStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlackstoneWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlackstoneSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedBlackstone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedBlackstoneBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrackedPolishedBlackstoneBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ChiseledPolishedBlackstone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedBlackstoneBrickSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedBlackstoneBrickStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedBlackstoneBrickWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GildedBlackstone;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedBlackstoneStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedBlackstoneSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedBlackstonePressurePlate {
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedBlackstoneButton {
	pub r#face: property_enums::Face,
	pub r#facing: property_enums::Facing1,
	pub r#powered: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedBlackstoneWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ChiseledNetherBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrackedNetherBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct QuartzBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Candle {
	pub r#candles: ConstrainedInt::<1, 4>,
	pub r#lit: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WhiteCandle {
	pub r#candles: ConstrainedInt::<1, 4>,
	pub r#lit: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OrangeCandle {
	pub r#candles: ConstrainedInt::<1, 4>,
	pub r#lit: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MagentaCandle {
	pub r#candles: ConstrainedInt::<1, 4>,
	pub r#lit: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightBlueCandle {
	pub r#candles: ConstrainedInt::<1, 4>,
	pub r#lit: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct YellowCandle {
	pub r#candles: ConstrainedInt::<1, 4>,
	pub r#lit: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LimeCandle {
	pub r#candles: ConstrainedInt::<1, 4>,
	pub r#lit: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PinkCandle {
	pub r#candles: ConstrainedInt::<1, 4>,
	pub r#lit: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GrayCandle {
	pub r#candles: ConstrainedInt::<1, 4>,
	pub r#lit: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightGrayCandle {
	pub r#candles: ConstrainedInt::<1, 4>,
	pub r#lit: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CyanCandle {
	pub r#candles: ConstrainedInt::<1, 4>,
	pub r#lit: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpleCandle {
	pub r#candles: ConstrainedInt::<1, 4>,
	pub r#lit: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlueCandle {
	pub r#candles: ConstrainedInt::<1, 4>,
	pub r#lit: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrownCandle {
	pub r#candles: ConstrainedInt::<1, 4>,
	pub r#lit: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GreenCandle {
	pub r#candles: ConstrainedInt::<1, 4>,
	pub r#lit: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedCandle {
	pub r#candles: ConstrainedInt::<1, 4>,
	pub r#lit: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlackCandle {
	pub r#candles: ConstrainedInt::<1, 4>,
	pub r#lit: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CandleCake {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WhiteCandleCake {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OrangeCandleCake {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MagentaCandleCake {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightBlueCandleCake {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct YellowCandleCake {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LimeCandleCake {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PinkCandleCake {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GrayCandleCake {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightGrayCandleCake {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CyanCandleCake {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PurpleCandleCake {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlueCandleCake {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BrownCandleCake {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct GreenCandleCake {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RedCandleCake {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BlackCandleCake {
	pub r#lit: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AmethystBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BuddingAmethyst;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct AmethystCluster {
	pub r#facing: property_enums::Facing,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LargeAmethystBud {
	pub r#facing: property_enums::Facing,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MediumAmethystBud {
	pub r#facing: property_enums::Facing,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SmallAmethystBud {
	pub r#facing: property_enums::Facing,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Tuff;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Calcite;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct TintedGlass;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PowderSnow;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SculkSensor {
	pub r#power: ConstrainedInt::<0, 15>,
	pub r#sculk_sensor_phase: property_enums::SculkSensorPhase,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Sculk;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SculkVein {
	pub r#down: bool,
	pub r#east: bool,
	pub r#north: bool,
	pub r#south: bool,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SculkCatalyst {
	pub r#bloom: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SculkShrieker {
	pub r#can_summon: bool,
	pub r#shrieking: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OxidizedCopper;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WeatheredCopper;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ExposedCopper;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CopperBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CopperOre;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeepslateCopperOre;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OxidizedCutCopper;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WeatheredCutCopper;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ExposedCutCopper;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CutCopper;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OxidizedCutCopperStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WeatheredCutCopperStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ExposedCutCopperStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CutCopperStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OxidizedCutCopperSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WeatheredCutCopperSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ExposedCutCopperSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CutCopperSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WaxedCopperBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WaxedWeatheredCopper;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WaxedExposedCopper;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WaxedOxidizedCopper;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WaxedOxidizedCutCopper;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WaxedWeatheredCutCopper;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WaxedExposedCutCopper;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WaxedCutCopper;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WaxedOxidizedCutCopperStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WaxedWeatheredCutCopperStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WaxedExposedCutCopperStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WaxedCutCopperStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WaxedOxidizedCutCopperSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WaxedWeatheredCutCopperSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WaxedExposedCutCopperSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct WaxedCutCopperSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct LightningRod {
	pub r#facing: property_enums::Facing,
	pub r#powered: bool,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PointedDripstone {
	pub r#thickness: property_enums::Thickness,
	pub r#vertical_direction: property_enums::VerticalDirection,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DripstoneBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CaveVines {
	pub r#age: ConstrainedInt::<0, 25>,
	pub r#berries: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CaveVinesPlant {
	pub r#berries: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SporeBlossom;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Azalea;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct FloweringAzalea;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MossCarpet;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct MossBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BigDripleaf {
	pub r#facing: property_enums::Facing1,
	pub r#tilt: property_enums::Tilt,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct BigDripleafStem {
	pub r#facing: property_enums::Facing1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SmallDripleaf {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct HangingRoots {
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RootedDirt;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Mud;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Deepslate {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CobbledDeepslate;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CobbledDeepslateStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CobbledDeepslateSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CobbledDeepslateWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedDeepslate;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedDeepslateStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedDeepslateSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PolishedDeepslateWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeepslateTiles;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeepslateTileStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeepslateTileSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeepslateTileWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeepslateBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeepslateBrickStairs {
	pub r#facing: property_enums::Facing1,
	pub r#half: property_enums::Half1,
	pub r#shape: property_enums::Shape1,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeepslateBrickSlab {
	pub r#type: property_enums::Type2,
	pub r#waterlogged: bool,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct DeepslateBrickWall {
	pub r#east: property_enums::East1,
	pub r#north: property_enums::North1,
	pub r#south: property_enums::South1,
	pub r#up: bool,
	pub r#waterlogged: bool,
	pub r#west: property_enums::West1,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ChiseledDeepslate;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrackedDeepslateBricks;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct CrackedDeepslateTiles;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct InfestedDeepslate {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct SmoothBasalt;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RawIronBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RawCopperBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct RawGoldBlock;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedAzaleaBush;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PottedFloweringAzaleaBush;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct OchreFroglight {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct VerdantFroglight {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct PearlescentFroglight {
	pub r#axis: property_enums::Axis,
}

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct Frogspawn;

#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub struct ReinforcedDeepslate;


pub fn create_global_palette() -> HashMap<Block, usize> {
	let mut map = HashMap::new();
	map.insert(Block::Air ( Air {} ), map.len());
	map.insert(Block::Stone ( Stone {} ), map.len());
	map.insert(Block::Granite ( Granite {} ), map.len());
	map.insert(Block::PolishedGranite ( PolishedGranite {} ), map.len());
	map.insert(Block::Diorite ( Diorite {} ), map.len());
	map.insert(Block::PolishedDiorite ( PolishedDiorite {} ), map.len());
	map.insert(Block::Andesite ( Andesite {} ), map.len());
	map.insert(Block::PolishedAndesite ( PolishedAndesite {} ), map.len());
	for r#snowy in bool::possible_values() {
		map.insert(Block::GrassBlock ( GrassBlock {r#snowy: r#snowy.clone(), } ), map.len());
	}
	map.insert(Block::Dirt ( Dirt {} ), map.len());
	map.insert(Block::CoarseDirt ( CoarseDirt {} ), map.len());
	for r#snowy in bool::possible_values() {
		map.insert(Block::Podzol ( Podzol {r#snowy: r#snowy.clone(), } ), map.len());
	}
	map.insert(Block::Cobblestone ( Cobblestone {} ), map.len());
	map.insert(Block::OakPlanks ( OakPlanks {} ), map.len());
	map.insert(Block::SprucePlanks ( SprucePlanks {} ), map.len());
	map.insert(Block::BirchPlanks ( BirchPlanks {} ), map.len());
	map.insert(Block::JunglePlanks ( JunglePlanks {} ), map.len());
	map.insert(Block::AcaciaPlanks ( AcaciaPlanks {} ), map.len());
	map.insert(Block::DarkOakPlanks ( DarkOakPlanks {} ), map.len());
	map.insert(Block::MangrovePlanks ( MangrovePlanks {} ), map.len());
	for r#stage in ConstrainedInt::<0, 1>::possible_values() {
		map.insert(Block::OakSapling ( OakSapling {r#stage: r#stage.clone(), } ), map.len());
	}
	for r#stage in ConstrainedInt::<0, 1>::possible_values() {
		map.insert(Block::SpruceSapling ( SpruceSapling {r#stage: r#stage.clone(), } ), map.len());
	}
	for r#stage in ConstrainedInt::<0, 1>::possible_values() {
		map.insert(Block::BirchSapling ( BirchSapling {r#stage: r#stage.clone(), } ), map.len());
	}
	for r#stage in ConstrainedInt::<0, 1>::possible_values() {
		map.insert(Block::JungleSapling ( JungleSapling {r#stage: r#stage.clone(), } ), map.len());
	}
	for r#stage in ConstrainedInt::<0, 1>::possible_values() {
		map.insert(Block::AcaciaSapling ( AcaciaSapling {r#stage: r#stage.clone(), } ), map.len());
	}
	for r#stage in ConstrainedInt::<0, 1>::possible_values() {
		map.insert(Block::DarkOakSapling ( DarkOakSapling {r#stage: r#stage.clone(), } ), map.len());
	}
	for r#age in ConstrainedInt::<0, 4>::possible_values() {
		for r#hanging in bool::possible_values() {
			for r#stage in ConstrainedInt::<0, 1>::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::MangrovePropagule ( MangrovePropagule {r#age: r#age.clone(), r#hanging: r#hanging.clone(), r#stage: r#stage.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	map.insert(Block::Bedrock ( Bedrock {} ), map.len());
	for r#level in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::Water ( Water {r#level: r#level.clone(), } ), map.len());
	}
	for r#level in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::Lava ( Lava {r#level: r#level.clone(), } ), map.len());
	}
	map.insert(Block::Sand ( Sand {} ), map.len());
	map.insert(Block::RedSand ( RedSand {} ), map.len());
	map.insert(Block::Gravel ( Gravel {} ), map.len());
	map.insert(Block::GoldOre ( GoldOre {} ), map.len());
	map.insert(Block::DeepslateGoldOre ( DeepslateGoldOre {} ), map.len());
	map.insert(Block::IronOre ( IronOre {} ), map.len());
	map.insert(Block::DeepslateIronOre ( DeepslateIronOre {} ), map.len());
	map.insert(Block::CoalOre ( CoalOre {} ), map.len());
	map.insert(Block::DeepslateCoalOre ( DeepslateCoalOre {} ), map.len());
	map.insert(Block::NetherGoldOre ( NetherGoldOre {} ), map.len());
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::OakLog ( OakLog {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::SpruceLog ( SpruceLog {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::BirchLog ( BirchLog {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::JungleLog ( JungleLog {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::AcaciaLog ( AcaciaLog {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::DarkOakLog ( DarkOakLog {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::MangroveLog ( MangroveLog {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::MangroveRoots ( MangroveRoots {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::MuddyMangroveRoots ( MuddyMangroveRoots {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedSpruceLog ( StrippedSpruceLog {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedBirchLog ( StrippedBirchLog {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedJungleLog ( StrippedJungleLog {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedAcaciaLog ( StrippedAcaciaLog {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedDarkOakLog ( StrippedDarkOakLog {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedOakLog ( StrippedOakLog {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedMangroveLog ( StrippedMangroveLog {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::OakWood ( OakWood {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::SpruceWood ( SpruceWood {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::BirchWood ( BirchWood {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::JungleWood ( JungleWood {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::AcaciaWood ( AcaciaWood {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::DarkOakWood ( DarkOakWood {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::MangroveWood ( MangroveWood {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedOakWood ( StrippedOakWood {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedSpruceWood ( StrippedSpruceWood {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedBirchWood ( StrippedBirchWood {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedJungleWood ( StrippedJungleWood {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedAcaciaWood ( StrippedAcaciaWood {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedDarkOakWood ( StrippedDarkOakWood {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedMangroveWood ( StrippedMangroveWood {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#distance in ConstrainedInt::<1, 7>::possible_values() {
		for r#persistent in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::OakLeaves ( OakLeaves {r#distance: r#distance.clone(), r#persistent: r#persistent.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#distance in ConstrainedInt::<1, 7>::possible_values() {
		for r#persistent in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::SpruceLeaves ( SpruceLeaves {r#distance: r#distance.clone(), r#persistent: r#persistent.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#distance in ConstrainedInt::<1, 7>::possible_values() {
		for r#persistent in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::BirchLeaves ( BirchLeaves {r#distance: r#distance.clone(), r#persistent: r#persistent.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#distance in ConstrainedInt::<1, 7>::possible_values() {
		for r#persistent in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::JungleLeaves ( JungleLeaves {r#distance: r#distance.clone(), r#persistent: r#persistent.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#distance in ConstrainedInt::<1, 7>::possible_values() {
		for r#persistent in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::AcaciaLeaves ( AcaciaLeaves {r#distance: r#distance.clone(), r#persistent: r#persistent.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#distance in ConstrainedInt::<1, 7>::possible_values() {
		for r#persistent in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::DarkOakLeaves ( DarkOakLeaves {r#distance: r#distance.clone(), r#persistent: r#persistent.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#distance in ConstrainedInt::<1, 7>::possible_values() {
		for r#persistent in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::MangroveLeaves ( MangroveLeaves {r#distance: r#distance.clone(), r#persistent: r#persistent.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#distance in ConstrainedInt::<1, 7>::possible_values() {
		for r#persistent in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::AzaleaLeaves ( AzaleaLeaves {r#distance: r#distance.clone(), r#persistent: r#persistent.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#distance in ConstrainedInt::<1, 7>::possible_values() {
		for r#persistent in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::FloweringAzaleaLeaves ( FloweringAzaleaLeaves {r#distance: r#distance.clone(), r#persistent: r#persistent.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	map.insert(Block::Sponge ( Sponge {} ), map.len());
	map.insert(Block::WetSponge ( WetSponge {} ), map.len());
	map.insert(Block::Glass ( Glass {} ), map.len());
	map.insert(Block::LapisOre ( LapisOre {} ), map.len());
	map.insert(Block::DeepslateLapisOre ( DeepslateLapisOre {} ), map.len());
	map.insert(Block::LapisBlock ( LapisBlock {} ), map.len());
	for r#facing in property_enums::Facing::possible_values() {
		for r#triggered in bool::possible_values() {
			map.insert(Block::Dispenser ( Dispenser {r#facing: r#facing.clone(), r#triggered: r#triggered.clone(), } ), map.len());
		}
	}
	map.insert(Block::Sandstone ( Sandstone {} ), map.len());
	map.insert(Block::ChiseledSandstone ( ChiseledSandstone {} ), map.len());
	map.insert(Block::CutSandstone ( CutSandstone {} ), map.len());
	for r#instrument in property_enums::Instrument::possible_values() {
		for r#note in ConstrainedInt::<0, 24>::possible_values() {
			for r#powered in bool::possible_values() {
				map.insert(Block::NoteBlock ( NoteBlock {r#instrument: r#instrument.clone(), r#note: r#note.clone(), r#powered: r#powered.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#occupied in bool::possible_values() {
			for r#part in property_enums::Part::possible_values() {
				map.insert(Block::WhiteBed ( WhiteBed {r#facing: r#facing.clone(), r#occupied: r#occupied.clone(), r#part: r#part.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#occupied in bool::possible_values() {
			for r#part in property_enums::Part::possible_values() {
				map.insert(Block::OrangeBed ( OrangeBed {r#facing: r#facing.clone(), r#occupied: r#occupied.clone(), r#part: r#part.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#occupied in bool::possible_values() {
			for r#part in property_enums::Part::possible_values() {
				map.insert(Block::MagentaBed ( MagentaBed {r#facing: r#facing.clone(), r#occupied: r#occupied.clone(), r#part: r#part.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#occupied in bool::possible_values() {
			for r#part in property_enums::Part::possible_values() {
				map.insert(Block::LightBlueBed ( LightBlueBed {r#facing: r#facing.clone(), r#occupied: r#occupied.clone(), r#part: r#part.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#occupied in bool::possible_values() {
			for r#part in property_enums::Part::possible_values() {
				map.insert(Block::YellowBed ( YellowBed {r#facing: r#facing.clone(), r#occupied: r#occupied.clone(), r#part: r#part.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#occupied in bool::possible_values() {
			for r#part in property_enums::Part::possible_values() {
				map.insert(Block::LimeBed ( LimeBed {r#facing: r#facing.clone(), r#occupied: r#occupied.clone(), r#part: r#part.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#occupied in bool::possible_values() {
			for r#part in property_enums::Part::possible_values() {
				map.insert(Block::PinkBed ( PinkBed {r#facing: r#facing.clone(), r#occupied: r#occupied.clone(), r#part: r#part.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#occupied in bool::possible_values() {
			for r#part in property_enums::Part::possible_values() {
				map.insert(Block::GrayBed ( GrayBed {r#facing: r#facing.clone(), r#occupied: r#occupied.clone(), r#part: r#part.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#occupied in bool::possible_values() {
			for r#part in property_enums::Part::possible_values() {
				map.insert(Block::LightGrayBed ( LightGrayBed {r#facing: r#facing.clone(), r#occupied: r#occupied.clone(), r#part: r#part.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#occupied in bool::possible_values() {
			for r#part in property_enums::Part::possible_values() {
				map.insert(Block::CyanBed ( CyanBed {r#facing: r#facing.clone(), r#occupied: r#occupied.clone(), r#part: r#part.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#occupied in bool::possible_values() {
			for r#part in property_enums::Part::possible_values() {
				map.insert(Block::PurpleBed ( PurpleBed {r#facing: r#facing.clone(), r#occupied: r#occupied.clone(), r#part: r#part.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#occupied in bool::possible_values() {
			for r#part in property_enums::Part::possible_values() {
				map.insert(Block::BlueBed ( BlueBed {r#facing: r#facing.clone(), r#occupied: r#occupied.clone(), r#part: r#part.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#occupied in bool::possible_values() {
			for r#part in property_enums::Part::possible_values() {
				map.insert(Block::BrownBed ( BrownBed {r#facing: r#facing.clone(), r#occupied: r#occupied.clone(), r#part: r#part.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#occupied in bool::possible_values() {
			for r#part in property_enums::Part::possible_values() {
				map.insert(Block::GreenBed ( GreenBed {r#facing: r#facing.clone(), r#occupied: r#occupied.clone(), r#part: r#part.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#occupied in bool::possible_values() {
			for r#part in property_enums::Part::possible_values() {
				map.insert(Block::RedBed ( RedBed {r#facing: r#facing.clone(), r#occupied: r#occupied.clone(), r#part: r#part.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#occupied in bool::possible_values() {
			for r#part in property_enums::Part::possible_values() {
				map.insert(Block::BlackBed ( BlackBed {r#facing: r#facing.clone(), r#occupied: r#occupied.clone(), r#part: r#part.clone(), } ), map.len());
			}
		}
	}
	for r#powered in bool::possible_values() {
		for r#shape in property_enums::Shape::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::PoweredRail ( PoweredRail {r#powered: r#powered.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#powered in bool::possible_values() {
		for r#shape in property_enums::Shape::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::DetectorRail ( DetectorRail {r#powered: r#powered.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#extended in bool::possible_values() {
		for r#facing in property_enums::Facing::possible_values() {
			map.insert(Block::StickyPiston ( StickyPiston {r#extended: r#extended.clone(), r#facing: r#facing.clone(), } ), map.len());
		}
	}
	map.insert(Block::Cobweb ( Cobweb {} ), map.len());
	map.insert(Block::Grass ( Grass {} ), map.len());
	map.insert(Block::Fern ( Fern {} ), map.len());
	map.insert(Block::DeadBush ( DeadBush {} ), map.len());
	map.insert(Block::Seagrass ( Seagrass {} ), map.len());
	for r#half in property_enums::Half::possible_values() {
		map.insert(Block::TallSeagrass ( TallSeagrass {r#half: r#half.clone(), } ), map.len());
	}
	for r#extended in bool::possible_values() {
		for r#facing in property_enums::Facing::possible_values() {
			map.insert(Block::Piston ( Piston {r#extended: r#extended.clone(), r#facing: r#facing.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing::possible_values() {
		for r#short in bool::possible_values() {
			for r#type in property_enums::Type::possible_values() {
				map.insert(Block::PistonHead ( PistonHead {r#facing: r#facing.clone(), r#short: r#short.clone(), r#type: r#type.clone(), } ), map.len());
			}
		}
	}
	map.insert(Block::WhiteWool ( WhiteWool {} ), map.len());
	map.insert(Block::OrangeWool ( OrangeWool {} ), map.len());
	map.insert(Block::MagentaWool ( MagentaWool {} ), map.len());
	map.insert(Block::LightBlueWool ( LightBlueWool {} ), map.len());
	map.insert(Block::YellowWool ( YellowWool {} ), map.len());
	map.insert(Block::LimeWool ( LimeWool {} ), map.len());
	map.insert(Block::PinkWool ( PinkWool {} ), map.len());
	map.insert(Block::GrayWool ( GrayWool {} ), map.len());
	map.insert(Block::LightGrayWool ( LightGrayWool {} ), map.len());
	map.insert(Block::CyanWool ( CyanWool {} ), map.len());
	map.insert(Block::PurpleWool ( PurpleWool {} ), map.len());
	map.insert(Block::BlueWool ( BlueWool {} ), map.len());
	map.insert(Block::BrownWool ( BrownWool {} ), map.len());
	map.insert(Block::GreenWool ( GreenWool {} ), map.len());
	map.insert(Block::RedWool ( RedWool {} ), map.len());
	map.insert(Block::BlackWool ( BlackWool {} ), map.len());
	for r#facing in property_enums::Facing::possible_values() {
		for r#type in property_enums::Type::possible_values() {
			map.insert(Block::MovingPiston ( MovingPiston {r#facing: r#facing.clone(), r#type: r#type.clone(), } ), map.len());
		}
	}
	map.insert(Block::Dandelion ( Dandelion {} ), map.len());
	map.insert(Block::Poppy ( Poppy {} ), map.len());
	map.insert(Block::BlueOrchid ( BlueOrchid {} ), map.len());
	map.insert(Block::Allium ( Allium {} ), map.len());
	map.insert(Block::AzureBluet ( AzureBluet {} ), map.len());
	map.insert(Block::RedTulip ( RedTulip {} ), map.len());
	map.insert(Block::OrangeTulip ( OrangeTulip {} ), map.len());
	map.insert(Block::WhiteTulip ( WhiteTulip {} ), map.len());
	map.insert(Block::PinkTulip ( PinkTulip {} ), map.len());
	map.insert(Block::OxeyeDaisy ( OxeyeDaisy {} ), map.len());
	map.insert(Block::Cornflower ( Cornflower {} ), map.len());
	map.insert(Block::WitherRose ( WitherRose {} ), map.len());
	map.insert(Block::LilyOfTheValley ( LilyOfTheValley {} ), map.len());
	map.insert(Block::BrownMushroom ( BrownMushroom {} ), map.len());
	map.insert(Block::RedMushroom ( RedMushroom {} ), map.len());
	map.insert(Block::GoldBlock ( GoldBlock {} ), map.len());
	map.insert(Block::IronBlock ( IronBlock {} ), map.len());
	map.insert(Block::Bricks ( Bricks {} ), map.len());
	for r#unstable in bool::possible_values() {
		map.insert(Block::Tnt ( Tnt {r#unstable: r#unstable.clone(), } ), map.len());
	}
	map.insert(Block::Bookshelf ( Bookshelf {} ), map.len());
	map.insert(Block::MossyCobblestone ( MossyCobblestone {} ), map.len());
	map.insert(Block::Obsidian ( Obsidian {} ), map.len());
	map.insert(Block::Torch ( Torch {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::WallTorch ( WallTorch {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#age in ConstrainedInt::<0, 15>::possible_values() {
		for r#east in bool::possible_values() {
			for r#north in bool::possible_values() {
				for r#south in bool::possible_values() {
					for r#up in bool::possible_values() {
						for r#west in bool::possible_values() {
							map.insert(Block::Fire ( Fire {r#age: r#age.clone(), r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	map.insert(Block::SoulFire ( SoulFire {} ), map.len());
	map.insert(Block::Spawner ( Spawner {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::OakStairs ( OakStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#type in property_enums::Type1::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::Chest ( Chest {r#facing: r#facing.clone(), r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#east in property_enums::East::possible_values() {
		for r#north in property_enums::North::possible_values() {
			for r#power in ConstrainedInt::<0, 15>::possible_values() {
				for r#south in property_enums::South::possible_values() {
					for r#west in property_enums::West::possible_values() {
						map.insert(Block::RedstoneWire ( RedstoneWire {r#east: r#east.clone(), r#north: r#north.clone(), r#power: r#power.clone(), r#south: r#south.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	map.insert(Block::DiamondOre ( DiamondOre {} ), map.len());
	map.insert(Block::DeepslateDiamondOre ( DeepslateDiamondOre {} ), map.len());
	map.insert(Block::DiamondBlock ( DiamondBlock {} ), map.len());
	map.insert(Block::CraftingTable ( CraftingTable {} ), map.len());
	for r#age in ConstrainedInt::<0, 7>::possible_values() {
		map.insert(Block::Wheat ( Wheat {r#age: r#age.clone(), } ), map.len());
	}
	for r#moisture in ConstrainedInt::<0, 7>::possible_values() {
		map.insert(Block::Farmland ( Farmland {r#moisture: r#moisture.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#lit in bool::possible_values() {
			map.insert(Block::Furnace ( Furnace {r#facing: r#facing.clone(), r#lit: r#lit.clone(), } ), map.len());
		}
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::OakSign ( OakSign {r#rotation: r#rotation.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::SpruceSign ( SpruceSign {r#rotation: r#rotation.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::BirchSign ( BirchSign {r#rotation: r#rotation.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::AcaciaSign ( AcaciaSign {r#rotation: r#rotation.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::JungleSign ( JungleSign {r#rotation: r#rotation.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::DarkOakSign ( DarkOakSign {r#rotation: r#rotation.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::MangroveSign ( MangroveSign {r#rotation: r#rotation.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half::possible_values() {
			for r#hinge in property_enums::Hinge::possible_values() {
				for r#open in bool::possible_values() {
					for r#powered in bool::possible_values() {
						map.insert(Block::OakDoor ( OakDoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#hinge: r#hinge.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::Ladder ( Ladder {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#shape in property_enums::Shape2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::Rail ( Rail {r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::CobblestoneStairs ( CobblestoneStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::OakWallSign ( OakWallSign {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::SpruceWallSign ( SpruceWallSign {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::BirchWallSign ( BirchWallSign {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::AcaciaWallSign ( AcaciaWallSign {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::JungleWallSign ( JungleWallSign {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::DarkOakWallSign ( DarkOakWallSign {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::MangroveWallSign ( MangroveWallSign {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#face in property_enums::Face::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			for r#powered in bool::possible_values() {
				map.insert(Block::Lever ( Lever {r#face: r#face.clone(), r#facing: r#facing.clone(), r#powered: r#powered.clone(), } ), map.len());
			}
		}
	}
	for r#powered in bool::possible_values() {
		map.insert(Block::StonePressurePlate ( StonePressurePlate {r#powered: r#powered.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half::possible_values() {
			for r#hinge in property_enums::Hinge::possible_values() {
				for r#open in bool::possible_values() {
					for r#powered in bool::possible_values() {
						map.insert(Block::IronDoor ( IronDoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#hinge: r#hinge.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#powered in bool::possible_values() {
		map.insert(Block::OakPressurePlate ( OakPressurePlate {r#powered: r#powered.clone(), } ), map.len());
	}
	for r#powered in bool::possible_values() {
		map.insert(Block::SprucePressurePlate ( SprucePressurePlate {r#powered: r#powered.clone(), } ), map.len());
	}
	for r#powered in bool::possible_values() {
		map.insert(Block::BirchPressurePlate ( BirchPressurePlate {r#powered: r#powered.clone(), } ), map.len());
	}
	for r#powered in bool::possible_values() {
		map.insert(Block::JunglePressurePlate ( JunglePressurePlate {r#powered: r#powered.clone(), } ), map.len());
	}
	for r#powered in bool::possible_values() {
		map.insert(Block::AcaciaPressurePlate ( AcaciaPressurePlate {r#powered: r#powered.clone(), } ), map.len());
	}
	for r#powered in bool::possible_values() {
		map.insert(Block::DarkOakPressurePlate ( DarkOakPressurePlate {r#powered: r#powered.clone(), } ), map.len());
	}
	for r#powered in bool::possible_values() {
		map.insert(Block::MangrovePressurePlate ( MangrovePressurePlate {r#powered: r#powered.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::RedstoneOre ( RedstoneOre {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::DeepslateRedstoneOre ( DeepslateRedstoneOre {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::RedstoneTorch ( RedstoneTorch {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#lit in bool::possible_values() {
			map.insert(Block::RedstoneWallTorch ( RedstoneWallTorch {r#facing: r#facing.clone(), r#lit: r#lit.clone(), } ), map.len());
		}
	}
	for r#face in property_enums::Face::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			for r#powered in bool::possible_values() {
				map.insert(Block::StoneButton ( StoneButton {r#face: r#face.clone(), r#facing: r#facing.clone(), r#powered: r#powered.clone(), } ), map.len());
			}
		}
	}
	for r#layers in ConstrainedInt::<1, 8>::possible_values() {
		map.insert(Block::Snow ( Snow {r#layers: r#layers.clone(), } ), map.len());
	}
	map.insert(Block::Ice ( Ice {} ), map.len());
	map.insert(Block::SnowBlock ( SnowBlock {} ), map.len());
	for r#age in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::Cactus ( Cactus {r#age: r#age.clone(), } ), map.len());
	}
	map.insert(Block::Clay ( Clay {} ), map.len());
	for r#age in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::SugarCane ( SugarCane {r#age: r#age.clone(), } ), map.len());
	}
	for r#has_record in bool::possible_values() {
		map.insert(Block::Jukebox ( Jukebox {r#has_record: r#has_record.clone(), } ), map.len());
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::OakFence ( OakFence {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	map.insert(Block::Pumpkin ( Pumpkin {} ), map.len());
	map.insert(Block::Netherrack ( Netherrack {} ), map.len());
	map.insert(Block::SoulSand ( SoulSand {} ), map.len());
	map.insert(Block::SoulSoil ( SoulSoil {} ), map.len());
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::Basalt ( Basalt {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::PolishedBasalt ( PolishedBasalt {r#axis: r#axis.clone(), } ), map.len());
	}
	map.insert(Block::SoulTorch ( SoulTorch {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::SoulWallTorch ( SoulWallTorch {r#facing: r#facing.clone(), } ), map.len());
	}
	map.insert(Block::Glowstone ( Glowstone {} ), map.len());
	for r#axis in property_enums::Axis1::possible_values() {
		map.insert(Block::NetherPortal ( NetherPortal {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::CarvedPumpkin ( CarvedPumpkin {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::JackOLantern ( JackOLantern {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#bites in ConstrainedInt::<0, 6>::possible_values() {
		map.insert(Block::Cake ( Cake {r#bites: r#bites.clone(), } ), map.len());
	}
	for r#delay in ConstrainedInt::<1, 4>::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			for r#locked in bool::possible_values() {
				for r#powered in bool::possible_values() {
					map.insert(Block::Repeater ( Repeater {r#delay: r#delay.clone(), r#facing: r#facing.clone(), r#locked: r#locked.clone(), r#powered: r#powered.clone(), } ), map.len());
				}
			}
		}
	}
	map.insert(Block::WhiteStainedGlass ( WhiteStainedGlass {} ), map.len());
	map.insert(Block::OrangeStainedGlass ( OrangeStainedGlass {} ), map.len());
	map.insert(Block::MagentaStainedGlass ( MagentaStainedGlass {} ), map.len());
	map.insert(Block::LightBlueStainedGlass ( LightBlueStainedGlass {} ), map.len());
	map.insert(Block::YellowStainedGlass ( YellowStainedGlass {} ), map.len());
	map.insert(Block::LimeStainedGlass ( LimeStainedGlass {} ), map.len());
	map.insert(Block::PinkStainedGlass ( PinkStainedGlass {} ), map.len());
	map.insert(Block::GrayStainedGlass ( GrayStainedGlass {} ), map.len());
	map.insert(Block::LightGrayStainedGlass ( LightGrayStainedGlass {} ), map.len());
	map.insert(Block::CyanStainedGlass ( CyanStainedGlass {} ), map.len());
	map.insert(Block::PurpleStainedGlass ( PurpleStainedGlass {} ), map.len());
	map.insert(Block::BlueStainedGlass ( BlueStainedGlass {} ), map.len());
	map.insert(Block::BrownStainedGlass ( BrownStainedGlass {} ), map.len());
	map.insert(Block::GreenStainedGlass ( GreenStainedGlass {} ), map.len());
	map.insert(Block::RedStainedGlass ( RedStainedGlass {} ), map.len());
	map.insert(Block::BlackStainedGlass ( BlackStainedGlass {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						map.insert(Block::OakTrapdoor ( OakTrapdoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						map.insert(Block::SpruceTrapdoor ( SpruceTrapdoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						map.insert(Block::BirchTrapdoor ( BirchTrapdoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						map.insert(Block::JungleTrapdoor ( JungleTrapdoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						map.insert(Block::AcaciaTrapdoor ( AcaciaTrapdoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						map.insert(Block::DarkOakTrapdoor ( DarkOakTrapdoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						map.insert(Block::MangroveTrapdoor ( MangroveTrapdoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
					}
				}
			}
		}
	}
	map.insert(Block::StoneBricks ( StoneBricks {} ), map.len());
	map.insert(Block::MossyStoneBricks ( MossyStoneBricks {} ), map.len());
	map.insert(Block::CrackedStoneBricks ( CrackedStoneBricks {} ), map.len());
	map.insert(Block::ChiseledStoneBricks ( ChiseledStoneBricks {} ), map.len());
	map.insert(Block::PackedMud ( PackedMud {} ), map.len());
	map.insert(Block::MudBricks ( MudBricks {} ), map.len());
	map.insert(Block::InfestedStone ( InfestedStone {} ), map.len());
	map.insert(Block::InfestedCobblestone ( InfestedCobblestone {} ), map.len());
	map.insert(Block::InfestedStoneBricks ( InfestedStoneBricks {} ), map.len());
	map.insert(Block::InfestedMossyStoneBricks ( InfestedMossyStoneBricks {} ), map.len());
	map.insert(Block::InfestedCrackedStoneBricks ( InfestedCrackedStoneBricks {} ), map.len());
	map.insert(Block::InfestedChiseledStoneBricks ( InfestedChiseledStoneBricks {} ), map.len());
	for r#down in bool::possible_values() {
		for r#east in bool::possible_values() {
			for r#north in bool::possible_values() {
				for r#south in bool::possible_values() {
					for r#up in bool::possible_values() {
						for r#west in bool::possible_values() {
							map.insert(Block::BrownMushroomBlock ( BrownMushroomBlock {r#down: r#down.clone(), r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#down in bool::possible_values() {
		for r#east in bool::possible_values() {
			for r#north in bool::possible_values() {
				for r#south in bool::possible_values() {
					for r#up in bool::possible_values() {
						for r#west in bool::possible_values() {
							map.insert(Block::RedMushroomBlock ( RedMushroomBlock {r#down: r#down.clone(), r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#down in bool::possible_values() {
		for r#east in bool::possible_values() {
			for r#north in bool::possible_values() {
				for r#south in bool::possible_values() {
					for r#up in bool::possible_values() {
						for r#west in bool::possible_values() {
							map.insert(Block::MushroomStem ( MushroomStem {r#down: r#down.clone(), r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::IronBars ( IronBars {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#axis in property_enums::Axis::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::Chain ( Chain {r#axis: r#axis.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::GlassPane ( GlassPane {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	map.insert(Block::Melon ( Melon {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::AttachedPumpkinStem ( AttachedPumpkinStem {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::AttachedMelonStem ( AttachedMelonStem {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#age in ConstrainedInt::<0, 7>::possible_values() {
		map.insert(Block::PumpkinStem ( PumpkinStem {r#age: r#age.clone(), } ), map.len());
	}
	for r#age in ConstrainedInt::<0, 7>::possible_values() {
		map.insert(Block::MelonStem ( MelonStem {r#age: r#age.clone(), } ), map.len());
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#up in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::Vine ( Vine {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#down in bool::possible_values() {
		for r#east in bool::possible_values() {
			for r#north in bool::possible_values() {
				for r#south in bool::possible_values() {
					for r#up in bool::possible_values() {
						for r#waterlogged in bool::possible_values() {
							for r#west in bool::possible_values() {
								map.insert(Block::GlowLichen ( GlowLichen {r#down: r#down.clone(), r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
							}
						}
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#in_wall in bool::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					map.insert(Block::OakFenceGate ( OakFenceGate {r#facing: r#facing.clone(), r#in_wall: r#in_wall.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::BrickStairs ( BrickStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::StoneBrickStairs ( StoneBrickStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::MudBrickStairs ( MudBrickStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#snowy in bool::possible_values() {
		map.insert(Block::Mycelium ( Mycelium {r#snowy: r#snowy.clone(), } ), map.len());
	}
	map.insert(Block::LilyPad ( LilyPad {} ), map.len());
	map.insert(Block::NetherBricks ( NetherBricks {} ), map.len());
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::NetherBrickFence ( NetherBrickFence {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::NetherBrickStairs ( NetherBrickStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#age in ConstrainedInt::<0, 3>::possible_values() {
		map.insert(Block::NetherWart ( NetherWart {r#age: r#age.clone(), } ), map.len());
	}
	map.insert(Block::EnchantingTable ( EnchantingTable {} ), map.len());
	for r#has_bottle_0 in bool::possible_values() {
		for r#has_bottle_1 in bool::possible_values() {
			for r#has_bottle_2 in bool::possible_values() {
				map.insert(Block::BrewingStand ( BrewingStand {r#has_bottle_0: r#has_bottle_0.clone(), r#has_bottle_1: r#has_bottle_1.clone(), r#has_bottle_2: r#has_bottle_2.clone(), } ), map.len());
			}
		}
	}
	map.insert(Block::Cauldron ( Cauldron {} ), map.len());
	for r#level in ConstrainedInt::<1, 3>::possible_values() {
		map.insert(Block::WaterCauldron ( WaterCauldron {r#level: r#level.clone(), } ), map.len());
	}
	map.insert(Block::LavaCauldron ( LavaCauldron {} ), map.len());
	for r#level in ConstrainedInt::<1, 3>::possible_values() {
		map.insert(Block::PowderSnowCauldron ( PowderSnowCauldron {r#level: r#level.clone(), } ), map.len());
	}
	map.insert(Block::EndPortal ( EndPortal {} ), map.len());
	for r#eye in bool::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			map.insert(Block::EndPortalFrame ( EndPortalFrame {r#eye: r#eye.clone(), r#facing: r#facing.clone(), } ), map.len());
		}
	}
	map.insert(Block::EndStone ( EndStone {} ), map.len());
	map.insert(Block::DragonEgg ( DragonEgg {} ), map.len());
	for r#lit in bool::possible_values() {
		map.insert(Block::RedstoneLamp ( RedstoneLamp {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#age in ConstrainedInt::<0, 2>::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			map.insert(Block::Cocoa ( Cocoa {r#age: r#age.clone(), r#facing: r#facing.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::SandstoneStairs ( SandstoneStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	map.insert(Block::EmeraldOre ( EmeraldOre {} ), map.len());
	map.insert(Block::DeepslateEmeraldOre ( DeepslateEmeraldOre {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::EnderChest ( EnderChest {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#attached in bool::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			for r#powered in bool::possible_values() {
				map.insert(Block::TripwireHook ( TripwireHook {r#attached: r#attached.clone(), r#facing: r#facing.clone(), r#powered: r#powered.clone(), } ), map.len());
			}
		}
	}
	for r#attached in bool::possible_values() {
		for r#disarmed in bool::possible_values() {
			for r#east in bool::possible_values() {
				for r#north in bool::possible_values() {
					for r#powered in bool::possible_values() {
						for r#south in bool::possible_values() {
							for r#west in bool::possible_values() {
								map.insert(Block::Tripwire ( Tripwire {r#attached: r#attached.clone(), r#disarmed: r#disarmed.clone(), r#east: r#east.clone(), r#north: r#north.clone(), r#powered: r#powered.clone(), r#south: r#south.clone(), r#west: r#west.clone(), } ), map.len());
							}
						}
					}
				}
			}
		}
	}
	map.insert(Block::EmeraldBlock ( EmeraldBlock {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::SpruceStairs ( SpruceStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::BirchStairs ( BirchStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::JungleStairs ( JungleStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#conditional in bool::possible_values() {
		for r#facing in property_enums::Facing::possible_values() {
			map.insert(Block::CommandBlock ( CommandBlock {r#conditional: r#conditional.clone(), r#facing: r#facing.clone(), } ), map.len());
		}
	}
	map.insert(Block::Beacon ( Beacon {} ), map.len());
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::CobblestoneWall ( CobblestoneWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::MossyCobblestoneWall ( MossyCobblestoneWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	map.insert(Block::FlowerPot ( FlowerPot {} ), map.len());
	map.insert(Block::PottedOakSapling ( PottedOakSapling {} ), map.len());
	map.insert(Block::PottedSpruceSapling ( PottedSpruceSapling {} ), map.len());
	map.insert(Block::PottedBirchSapling ( PottedBirchSapling {} ), map.len());
	map.insert(Block::PottedJungleSapling ( PottedJungleSapling {} ), map.len());
	map.insert(Block::PottedAcaciaSapling ( PottedAcaciaSapling {} ), map.len());
	map.insert(Block::PottedDarkOakSapling ( PottedDarkOakSapling {} ), map.len());
	map.insert(Block::PottedMangrovePropagule ( PottedMangrovePropagule {} ), map.len());
	map.insert(Block::PottedFern ( PottedFern {} ), map.len());
	map.insert(Block::PottedDandelion ( PottedDandelion {} ), map.len());
	map.insert(Block::PottedPoppy ( PottedPoppy {} ), map.len());
	map.insert(Block::PottedBlueOrchid ( PottedBlueOrchid {} ), map.len());
	map.insert(Block::PottedAllium ( PottedAllium {} ), map.len());
	map.insert(Block::PottedAzureBluet ( PottedAzureBluet {} ), map.len());
	map.insert(Block::PottedRedTulip ( PottedRedTulip {} ), map.len());
	map.insert(Block::PottedOrangeTulip ( PottedOrangeTulip {} ), map.len());
	map.insert(Block::PottedWhiteTulip ( PottedWhiteTulip {} ), map.len());
	map.insert(Block::PottedPinkTulip ( PottedPinkTulip {} ), map.len());
	map.insert(Block::PottedOxeyeDaisy ( PottedOxeyeDaisy {} ), map.len());
	map.insert(Block::PottedCornflower ( PottedCornflower {} ), map.len());
	map.insert(Block::PottedLilyOfTheValley ( PottedLilyOfTheValley {} ), map.len());
	map.insert(Block::PottedWitherRose ( PottedWitherRose {} ), map.len());
	map.insert(Block::PottedRedMushroom ( PottedRedMushroom {} ), map.len());
	map.insert(Block::PottedBrownMushroom ( PottedBrownMushroom {} ), map.len());
	map.insert(Block::PottedDeadBush ( PottedDeadBush {} ), map.len());
	map.insert(Block::PottedCactus ( PottedCactus {} ), map.len());
	for r#age in ConstrainedInt::<0, 7>::possible_values() {
		map.insert(Block::Carrots ( Carrots {r#age: r#age.clone(), } ), map.len());
	}
	for r#age in ConstrainedInt::<0, 7>::possible_values() {
		map.insert(Block::Potatoes ( Potatoes {r#age: r#age.clone(), } ), map.len());
	}
	for r#face in property_enums::Face::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			for r#powered in bool::possible_values() {
				map.insert(Block::OakButton ( OakButton {r#face: r#face.clone(), r#facing: r#facing.clone(), r#powered: r#powered.clone(), } ), map.len());
			}
		}
	}
	for r#face in property_enums::Face::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			for r#powered in bool::possible_values() {
				map.insert(Block::SpruceButton ( SpruceButton {r#face: r#face.clone(), r#facing: r#facing.clone(), r#powered: r#powered.clone(), } ), map.len());
			}
		}
	}
	for r#face in property_enums::Face::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			for r#powered in bool::possible_values() {
				map.insert(Block::BirchButton ( BirchButton {r#face: r#face.clone(), r#facing: r#facing.clone(), r#powered: r#powered.clone(), } ), map.len());
			}
		}
	}
	for r#face in property_enums::Face::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			for r#powered in bool::possible_values() {
				map.insert(Block::JungleButton ( JungleButton {r#face: r#face.clone(), r#facing: r#facing.clone(), r#powered: r#powered.clone(), } ), map.len());
			}
		}
	}
	for r#face in property_enums::Face::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			for r#powered in bool::possible_values() {
				map.insert(Block::AcaciaButton ( AcaciaButton {r#face: r#face.clone(), r#facing: r#facing.clone(), r#powered: r#powered.clone(), } ), map.len());
			}
		}
	}
	for r#face in property_enums::Face::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			for r#powered in bool::possible_values() {
				map.insert(Block::DarkOakButton ( DarkOakButton {r#face: r#face.clone(), r#facing: r#facing.clone(), r#powered: r#powered.clone(), } ), map.len());
			}
		}
	}
	for r#face in property_enums::Face::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			for r#powered in bool::possible_values() {
				map.insert(Block::MangroveButton ( MangroveButton {r#face: r#face.clone(), r#facing: r#facing.clone(), r#powered: r#powered.clone(), } ), map.len());
			}
		}
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::SkeletonSkull ( SkeletonSkull {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::SkeletonWallSkull ( SkeletonWallSkull {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::WitherSkeletonSkull ( WitherSkeletonSkull {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::WitherSkeletonWallSkull ( WitherSkeletonWallSkull {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::ZombieHead ( ZombieHead {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::ZombieWallHead ( ZombieWallHead {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::PlayerHead ( PlayerHead {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::PlayerWallHead ( PlayerWallHead {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::CreeperHead ( CreeperHead {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::CreeperWallHead ( CreeperWallHead {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::DragonHead ( DragonHead {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::DragonWallHead ( DragonWallHead {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::Anvil ( Anvil {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::ChippedAnvil ( ChippedAnvil {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::DamagedAnvil ( DamagedAnvil {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#type in property_enums::Type1::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::TrappedChest ( TrappedChest {r#facing: r#facing.clone(), r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#power in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::LightWeightedPressurePlate ( LightWeightedPressurePlate {r#power: r#power.clone(), } ), map.len());
	}
	for r#power in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::HeavyWeightedPressurePlate ( HeavyWeightedPressurePlate {r#power: r#power.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#mode in property_enums::Mode::possible_values() {
			for r#powered in bool::possible_values() {
				map.insert(Block::Comparator ( Comparator {r#facing: r#facing.clone(), r#mode: r#mode.clone(), r#powered: r#powered.clone(), } ), map.len());
			}
		}
	}
	for r#inverted in bool::possible_values() {
		for r#power in ConstrainedInt::<0, 15>::possible_values() {
			map.insert(Block::DaylightDetector ( DaylightDetector {r#inverted: r#inverted.clone(), r#power: r#power.clone(), } ), map.len());
		}
	}
	map.insert(Block::RedstoneBlock ( RedstoneBlock {} ), map.len());
	map.insert(Block::NetherQuartzOre ( NetherQuartzOre {} ), map.len());
	for r#enabled in bool::possible_values() {
		for r#facing in property_enums::Facing2::possible_values() {
			map.insert(Block::Hopper ( Hopper {r#enabled: r#enabled.clone(), r#facing: r#facing.clone(), } ), map.len());
		}
	}
	map.insert(Block::QuartzBlock ( QuartzBlock {} ), map.len());
	map.insert(Block::ChiseledQuartzBlock ( ChiseledQuartzBlock {} ), map.len());
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::QuartzPillar ( QuartzPillar {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::QuartzStairs ( QuartzStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#powered in bool::possible_values() {
		for r#shape in property_enums::Shape::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::ActivatorRail ( ActivatorRail {r#powered: r#powered.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing::possible_values() {
		for r#triggered in bool::possible_values() {
			map.insert(Block::Dropper ( Dropper {r#facing: r#facing.clone(), r#triggered: r#triggered.clone(), } ), map.len());
		}
	}
	map.insert(Block::WhiteTerracotta ( WhiteTerracotta {} ), map.len());
	map.insert(Block::OrangeTerracotta ( OrangeTerracotta {} ), map.len());
	map.insert(Block::MagentaTerracotta ( MagentaTerracotta {} ), map.len());
	map.insert(Block::LightBlueTerracotta ( LightBlueTerracotta {} ), map.len());
	map.insert(Block::YellowTerracotta ( YellowTerracotta {} ), map.len());
	map.insert(Block::LimeTerracotta ( LimeTerracotta {} ), map.len());
	map.insert(Block::PinkTerracotta ( PinkTerracotta {} ), map.len());
	map.insert(Block::GrayTerracotta ( GrayTerracotta {} ), map.len());
	map.insert(Block::LightGrayTerracotta ( LightGrayTerracotta {} ), map.len());
	map.insert(Block::CyanTerracotta ( CyanTerracotta {} ), map.len());
	map.insert(Block::PurpleTerracotta ( PurpleTerracotta {} ), map.len());
	map.insert(Block::BlueTerracotta ( BlueTerracotta {} ), map.len());
	map.insert(Block::BrownTerracotta ( BrownTerracotta {} ), map.len());
	map.insert(Block::GreenTerracotta ( GreenTerracotta {} ), map.len());
	map.insert(Block::RedTerracotta ( RedTerracotta {} ), map.len());
	map.insert(Block::BlackTerracotta ( BlackTerracotta {} ), map.len());
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::WhiteStainedGlassPane ( WhiteStainedGlassPane {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::OrangeStainedGlassPane ( OrangeStainedGlassPane {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::MagentaStainedGlassPane ( MagentaStainedGlassPane {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::LightBlueStainedGlassPane ( LightBlueStainedGlassPane {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::YellowStainedGlassPane ( YellowStainedGlassPane {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::LimeStainedGlassPane ( LimeStainedGlassPane {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::PinkStainedGlassPane ( PinkStainedGlassPane {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::GrayStainedGlassPane ( GrayStainedGlassPane {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::LightGrayStainedGlassPane ( LightGrayStainedGlassPane {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::CyanStainedGlassPane ( CyanStainedGlassPane {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::PurpleStainedGlassPane ( PurpleStainedGlassPane {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::BlueStainedGlassPane ( BlueStainedGlassPane {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::BrownStainedGlassPane ( BrownStainedGlassPane {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::GreenStainedGlassPane ( GreenStainedGlassPane {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::RedStainedGlassPane ( RedStainedGlassPane {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::BlackStainedGlassPane ( BlackStainedGlassPane {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::AcaciaStairs ( AcaciaStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::DarkOakStairs ( DarkOakStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::MangroveStairs ( MangroveStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	map.insert(Block::SlimeBlock ( SlimeBlock {} ), map.len());
	map.insert(Block::Barrier ( Barrier {} ), map.len());
	for r#level in ConstrainedInt::<0, 15>::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::Light ( Light {r#level: r#level.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						map.insert(Block::IronTrapdoor ( IronTrapdoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
					}
				}
			}
		}
	}
	map.insert(Block::Prismarine ( Prismarine {} ), map.len());
	map.insert(Block::PrismarineBricks ( PrismarineBricks {} ), map.len());
	map.insert(Block::DarkPrismarine ( DarkPrismarine {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::PrismarineStairs ( PrismarineStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::PrismarineBrickStairs ( PrismarineBrickStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::DarkPrismarineStairs ( DarkPrismarineStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::PrismarineSlab ( PrismarineSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::PrismarineBrickSlab ( PrismarineBrickSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::DarkPrismarineSlab ( DarkPrismarineSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	map.insert(Block::SeaLantern ( SeaLantern {} ), map.len());
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::HayBlock ( HayBlock {r#axis: r#axis.clone(), } ), map.len());
	}
	map.insert(Block::WhiteCarpet ( WhiteCarpet {} ), map.len());
	map.insert(Block::OrangeCarpet ( OrangeCarpet {} ), map.len());
	map.insert(Block::MagentaCarpet ( MagentaCarpet {} ), map.len());
	map.insert(Block::LightBlueCarpet ( LightBlueCarpet {} ), map.len());
	map.insert(Block::YellowCarpet ( YellowCarpet {} ), map.len());
	map.insert(Block::LimeCarpet ( LimeCarpet {} ), map.len());
	map.insert(Block::PinkCarpet ( PinkCarpet {} ), map.len());
	map.insert(Block::GrayCarpet ( GrayCarpet {} ), map.len());
	map.insert(Block::LightGrayCarpet ( LightGrayCarpet {} ), map.len());
	map.insert(Block::CyanCarpet ( CyanCarpet {} ), map.len());
	map.insert(Block::PurpleCarpet ( PurpleCarpet {} ), map.len());
	map.insert(Block::BlueCarpet ( BlueCarpet {} ), map.len());
	map.insert(Block::BrownCarpet ( BrownCarpet {} ), map.len());
	map.insert(Block::GreenCarpet ( GreenCarpet {} ), map.len());
	map.insert(Block::RedCarpet ( RedCarpet {} ), map.len());
	map.insert(Block::BlackCarpet ( BlackCarpet {} ), map.len());
	map.insert(Block::Terracotta ( Terracotta {} ), map.len());
	map.insert(Block::CoalBlock ( CoalBlock {} ), map.len());
	map.insert(Block::PackedIce ( PackedIce {} ), map.len());
	for r#half in property_enums::Half::possible_values() {
		map.insert(Block::Sunflower ( Sunflower {r#half: r#half.clone(), } ), map.len());
	}
	for r#half in property_enums::Half::possible_values() {
		map.insert(Block::Lilac ( Lilac {r#half: r#half.clone(), } ), map.len());
	}
	for r#half in property_enums::Half::possible_values() {
		map.insert(Block::RoseBush ( RoseBush {r#half: r#half.clone(), } ), map.len());
	}
	for r#half in property_enums::Half::possible_values() {
		map.insert(Block::Peony ( Peony {r#half: r#half.clone(), } ), map.len());
	}
	for r#half in property_enums::Half::possible_values() {
		map.insert(Block::TallGrass ( TallGrass {r#half: r#half.clone(), } ), map.len());
	}
	for r#half in property_enums::Half::possible_values() {
		map.insert(Block::LargeFern ( LargeFern {r#half: r#half.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::WhiteBanner ( WhiteBanner {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::OrangeBanner ( OrangeBanner {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::MagentaBanner ( MagentaBanner {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::LightBlueBanner ( LightBlueBanner {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::YellowBanner ( YellowBanner {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::LimeBanner ( LimeBanner {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::PinkBanner ( PinkBanner {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::GrayBanner ( GrayBanner {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::LightGrayBanner ( LightGrayBanner {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::CyanBanner ( CyanBanner {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::PurpleBanner ( PurpleBanner {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::BlueBanner ( BlueBanner {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::BrownBanner ( BrownBanner {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::GreenBanner ( GreenBanner {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::RedBanner ( RedBanner {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::BlackBanner ( BlackBanner {r#rotation: r#rotation.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::WhiteWallBanner ( WhiteWallBanner {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::OrangeWallBanner ( OrangeWallBanner {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::MagentaWallBanner ( MagentaWallBanner {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::LightBlueWallBanner ( LightBlueWallBanner {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::YellowWallBanner ( YellowWallBanner {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::LimeWallBanner ( LimeWallBanner {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::PinkWallBanner ( PinkWallBanner {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::GrayWallBanner ( GrayWallBanner {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::LightGrayWallBanner ( LightGrayWallBanner {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::CyanWallBanner ( CyanWallBanner {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::PurpleWallBanner ( PurpleWallBanner {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::BlueWallBanner ( BlueWallBanner {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::BrownWallBanner ( BrownWallBanner {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::GreenWallBanner ( GreenWallBanner {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::RedWallBanner ( RedWallBanner {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::BlackWallBanner ( BlackWallBanner {r#facing: r#facing.clone(), } ), map.len());
	}
	map.insert(Block::RedSandstone ( RedSandstone {} ), map.len());
	map.insert(Block::ChiseledRedSandstone ( ChiseledRedSandstone {} ), map.len());
	map.insert(Block::CutRedSandstone ( CutRedSandstone {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::RedSandstoneStairs ( RedSandstoneStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::OakSlab ( OakSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::SpruceSlab ( SpruceSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::BirchSlab ( BirchSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::JungleSlab ( JungleSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::AcaciaSlab ( AcaciaSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::DarkOakSlab ( DarkOakSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::MangroveSlab ( MangroveSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::StoneSlab ( StoneSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::SmoothStoneSlab ( SmoothStoneSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::SandstoneSlab ( SandstoneSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::CutSandstoneSlab ( CutSandstoneSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::PetrifiedOakSlab ( PetrifiedOakSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::CobblestoneSlab ( CobblestoneSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::BrickSlab ( BrickSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::StoneBrickSlab ( StoneBrickSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::MudBrickSlab ( MudBrickSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::NetherBrickSlab ( NetherBrickSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::QuartzSlab ( QuartzSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::RedSandstoneSlab ( RedSandstoneSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::CutRedSandstoneSlab ( CutRedSandstoneSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::PurpurSlab ( PurpurSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	map.insert(Block::SmoothStone ( SmoothStone {} ), map.len());
	map.insert(Block::SmoothSandstone ( SmoothSandstone {} ), map.len());
	map.insert(Block::SmoothQuartz ( SmoothQuartz {} ), map.len());
	map.insert(Block::SmoothRedSandstone ( SmoothRedSandstone {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		for r#in_wall in bool::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					map.insert(Block::SpruceFenceGate ( SpruceFenceGate {r#facing: r#facing.clone(), r#in_wall: r#in_wall.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#in_wall in bool::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					map.insert(Block::BirchFenceGate ( BirchFenceGate {r#facing: r#facing.clone(), r#in_wall: r#in_wall.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#in_wall in bool::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					map.insert(Block::JungleFenceGate ( JungleFenceGate {r#facing: r#facing.clone(), r#in_wall: r#in_wall.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#in_wall in bool::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					map.insert(Block::AcaciaFenceGate ( AcaciaFenceGate {r#facing: r#facing.clone(), r#in_wall: r#in_wall.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#in_wall in bool::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					map.insert(Block::DarkOakFenceGate ( DarkOakFenceGate {r#facing: r#facing.clone(), r#in_wall: r#in_wall.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#in_wall in bool::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					map.insert(Block::MangroveFenceGate ( MangroveFenceGate {r#facing: r#facing.clone(), r#in_wall: r#in_wall.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::SpruceFence ( SpruceFence {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::BirchFence ( BirchFence {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::JungleFence ( JungleFence {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::AcaciaFence ( AcaciaFence {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::DarkOakFence ( DarkOakFence {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::MangroveFence ( MangroveFence {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half::possible_values() {
			for r#hinge in property_enums::Hinge::possible_values() {
				for r#open in bool::possible_values() {
					for r#powered in bool::possible_values() {
						map.insert(Block::SpruceDoor ( SpruceDoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#hinge: r#hinge.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half::possible_values() {
			for r#hinge in property_enums::Hinge::possible_values() {
				for r#open in bool::possible_values() {
					for r#powered in bool::possible_values() {
						map.insert(Block::BirchDoor ( BirchDoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#hinge: r#hinge.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half::possible_values() {
			for r#hinge in property_enums::Hinge::possible_values() {
				for r#open in bool::possible_values() {
					for r#powered in bool::possible_values() {
						map.insert(Block::JungleDoor ( JungleDoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#hinge: r#hinge.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half::possible_values() {
			for r#hinge in property_enums::Hinge::possible_values() {
				for r#open in bool::possible_values() {
					for r#powered in bool::possible_values() {
						map.insert(Block::AcaciaDoor ( AcaciaDoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#hinge: r#hinge.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half::possible_values() {
			for r#hinge in property_enums::Hinge::possible_values() {
				for r#open in bool::possible_values() {
					for r#powered in bool::possible_values() {
						map.insert(Block::DarkOakDoor ( DarkOakDoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#hinge: r#hinge.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half::possible_values() {
			for r#hinge in property_enums::Hinge::possible_values() {
				for r#open in bool::possible_values() {
					for r#powered in bool::possible_values() {
						map.insert(Block::MangroveDoor ( MangroveDoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#hinge: r#hinge.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::EndRod ( EndRod {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#down in bool::possible_values() {
		for r#east in bool::possible_values() {
			for r#north in bool::possible_values() {
				for r#south in bool::possible_values() {
					for r#up in bool::possible_values() {
						for r#west in bool::possible_values() {
							map.insert(Block::ChorusPlant ( ChorusPlant {r#down: r#down.clone(), r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#age in ConstrainedInt::<0, 5>::possible_values() {
		map.insert(Block::ChorusFlower ( ChorusFlower {r#age: r#age.clone(), } ), map.len());
	}
	map.insert(Block::PurpurBlock ( PurpurBlock {} ), map.len());
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::PurpurPillar ( PurpurPillar {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::PurpurStairs ( PurpurStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	map.insert(Block::EndStoneBricks ( EndStoneBricks {} ), map.len());
	for r#age in ConstrainedInt::<0, 3>::possible_values() {
		map.insert(Block::Beetroots ( Beetroots {r#age: r#age.clone(), } ), map.len());
	}
	map.insert(Block::DirtPath ( DirtPath {} ), map.len());
	map.insert(Block::EndGateway ( EndGateway {} ), map.len());
	for r#conditional in bool::possible_values() {
		for r#facing in property_enums::Facing::possible_values() {
			map.insert(Block::RepeatingCommandBlock ( RepeatingCommandBlock {r#conditional: r#conditional.clone(), r#facing: r#facing.clone(), } ), map.len());
		}
	}
	for r#conditional in bool::possible_values() {
		for r#facing in property_enums::Facing::possible_values() {
			map.insert(Block::ChainCommandBlock ( ChainCommandBlock {r#conditional: r#conditional.clone(), r#facing: r#facing.clone(), } ), map.len());
		}
	}
	for r#age in ConstrainedInt::<0, 3>::possible_values() {
		map.insert(Block::FrostedIce ( FrostedIce {r#age: r#age.clone(), } ), map.len());
	}
	map.insert(Block::MagmaBlock ( MagmaBlock {} ), map.len());
	map.insert(Block::NetherWartBlock ( NetherWartBlock {} ), map.len());
	map.insert(Block::RedNetherBricks ( RedNetherBricks {} ), map.len());
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::BoneBlock ( BoneBlock {r#axis: r#axis.clone(), } ), map.len());
	}
	map.insert(Block::StructureVoid ( StructureVoid {} ), map.len());
	for r#facing in property_enums::Facing::possible_values() {
		for r#powered in bool::possible_values() {
			map.insert(Block::Observer ( Observer {r#facing: r#facing.clone(), r#powered: r#powered.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::ShulkerBox ( ShulkerBox {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::WhiteShulkerBox ( WhiteShulkerBox {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::OrangeShulkerBox ( OrangeShulkerBox {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::MagentaShulkerBox ( MagentaShulkerBox {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::LightBlueShulkerBox ( LightBlueShulkerBox {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::YellowShulkerBox ( YellowShulkerBox {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::LimeShulkerBox ( LimeShulkerBox {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::PinkShulkerBox ( PinkShulkerBox {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::GrayShulkerBox ( GrayShulkerBox {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::LightGrayShulkerBox ( LightGrayShulkerBox {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::CyanShulkerBox ( CyanShulkerBox {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::PurpleShulkerBox ( PurpleShulkerBox {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::BlueShulkerBox ( BlueShulkerBox {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::BrownShulkerBox ( BrownShulkerBox {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::GreenShulkerBox ( GreenShulkerBox {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::RedShulkerBox ( RedShulkerBox {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing::possible_values() {
		map.insert(Block::BlackShulkerBox ( BlackShulkerBox {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::WhiteGlazedTerracotta ( WhiteGlazedTerracotta {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::OrangeGlazedTerracotta ( OrangeGlazedTerracotta {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::MagentaGlazedTerracotta ( MagentaGlazedTerracotta {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::LightBlueGlazedTerracotta ( LightBlueGlazedTerracotta {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::YellowGlazedTerracotta ( YellowGlazedTerracotta {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::LimeGlazedTerracotta ( LimeGlazedTerracotta {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::PinkGlazedTerracotta ( PinkGlazedTerracotta {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::GrayGlazedTerracotta ( GrayGlazedTerracotta {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::LightGrayGlazedTerracotta ( LightGrayGlazedTerracotta {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::CyanGlazedTerracotta ( CyanGlazedTerracotta {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::PurpleGlazedTerracotta ( PurpleGlazedTerracotta {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::BlueGlazedTerracotta ( BlueGlazedTerracotta {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::BrownGlazedTerracotta ( BrownGlazedTerracotta {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::GreenGlazedTerracotta ( GreenGlazedTerracotta {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::RedGlazedTerracotta ( RedGlazedTerracotta {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::BlackGlazedTerracotta ( BlackGlazedTerracotta {r#facing: r#facing.clone(), } ), map.len());
	}
	map.insert(Block::WhiteConcrete ( WhiteConcrete {} ), map.len());
	map.insert(Block::OrangeConcrete ( OrangeConcrete {} ), map.len());
	map.insert(Block::MagentaConcrete ( MagentaConcrete {} ), map.len());
	map.insert(Block::LightBlueConcrete ( LightBlueConcrete {} ), map.len());
	map.insert(Block::YellowConcrete ( YellowConcrete {} ), map.len());
	map.insert(Block::LimeConcrete ( LimeConcrete {} ), map.len());
	map.insert(Block::PinkConcrete ( PinkConcrete {} ), map.len());
	map.insert(Block::GrayConcrete ( GrayConcrete {} ), map.len());
	map.insert(Block::LightGrayConcrete ( LightGrayConcrete {} ), map.len());
	map.insert(Block::CyanConcrete ( CyanConcrete {} ), map.len());
	map.insert(Block::PurpleConcrete ( PurpleConcrete {} ), map.len());
	map.insert(Block::BlueConcrete ( BlueConcrete {} ), map.len());
	map.insert(Block::BrownConcrete ( BrownConcrete {} ), map.len());
	map.insert(Block::GreenConcrete ( GreenConcrete {} ), map.len());
	map.insert(Block::RedConcrete ( RedConcrete {} ), map.len());
	map.insert(Block::BlackConcrete ( BlackConcrete {} ), map.len());
	map.insert(Block::WhiteConcretePowder ( WhiteConcretePowder {} ), map.len());
	map.insert(Block::OrangeConcretePowder ( OrangeConcretePowder {} ), map.len());
	map.insert(Block::MagentaConcretePowder ( MagentaConcretePowder {} ), map.len());
	map.insert(Block::LightBlueConcretePowder ( LightBlueConcretePowder {} ), map.len());
	map.insert(Block::YellowConcretePowder ( YellowConcretePowder {} ), map.len());
	map.insert(Block::LimeConcretePowder ( LimeConcretePowder {} ), map.len());
	map.insert(Block::PinkConcretePowder ( PinkConcretePowder {} ), map.len());
	map.insert(Block::GrayConcretePowder ( GrayConcretePowder {} ), map.len());
	map.insert(Block::LightGrayConcretePowder ( LightGrayConcretePowder {} ), map.len());
	map.insert(Block::CyanConcretePowder ( CyanConcretePowder {} ), map.len());
	map.insert(Block::PurpleConcretePowder ( PurpleConcretePowder {} ), map.len());
	map.insert(Block::BlueConcretePowder ( BlueConcretePowder {} ), map.len());
	map.insert(Block::BrownConcretePowder ( BrownConcretePowder {} ), map.len());
	map.insert(Block::GreenConcretePowder ( GreenConcretePowder {} ), map.len());
	map.insert(Block::RedConcretePowder ( RedConcretePowder {} ), map.len());
	map.insert(Block::BlackConcretePowder ( BlackConcretePowder {} ), map.len());
	for r#age in ConstrainedInt::<0, 25>::possible_values() {
		map.insert(Block::Kelp ( Kelp {r#age: r#age.clone(), } ), map.len());
	}
	map.insert(Block::KelpPlant ( KelpPlant {} ), map.len());
	map.insert(Block::DriedKelpBlock ( DriedKelpBlock {} ), map.len());
	for r#eggs in ConstrainedInt::<1, 4>::possible_values() {
		for r#hatch in ConstrainedInt::<0, 2>::possible_values() {
			map.insert(Block::TurtleEgg ( TurtleEgg {r#eggs: r#eggs.clone(), r#hatch: r#hatch.clone(), } ), map.len());
		}
	}
	map.insert(Block::DeadTubeCoralBlock ( DeadTubeCoralBlock {} ), map.len());
	map.insert(Block::DeadBrainCoralBlock ( DeadBrainCoralBlock {} ), map.len());
	map.insert(Block::DeadBubbleCoralBlock ( DeadBubbleCoralBlock {} ), map.len());
	map.insert(Block::DeadFireCoralBlock ( DeadFireCoralBlock {} ), map.len());
	map.insert(Block::DeadHornCoralBlock ( DeadHornCoralBlock {} ), map.len());
	map.insert(Block::TubeCoralBlock ( TubeCoralBlock {} ), map.len());
	map.insert(Block::BrainCoralBlock ( BrainCoralBlock {} ), map.len());
	map.insert(Block::BubbleCoralBlock ( BubbleCoralBlock {} ), map.len());
	map.insert(Block::FireCoralBlock ( FireCoralBlock {} ), map.len());
	map.insert(Block::HornCoralBlock ( HornCoralBlock {} ), map.len());
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::DeadTubeCoral ( DeadTubeCoral {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::DeadBrainCoral ( DeadBrainCoral {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::DeadBubbleCoral ( DeadBubbleCoral {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::DeadFireCoral ( DeadFireCoral {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::DeadHornCoral ( DeadHornCoral {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::TubeCoral ( TubeCoral {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::BrainCoral ( BrainCoral {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::BubbleCoral ( BubbleCoral {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::FireCoral ( FireCoral {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::HornCoral ( HornCoral {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::DeadTubeCoralFan ( DeadTubeCoralFan {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::DeadBrainCoralFan ( DeadBrainCoralFan {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::DeadBubbleCoralFan ( DeadBubbleCoralFan {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::DeadFireCoralFan ( DeadFireCoralFan {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::DeadHornCoralFan ( DeadHornCoralFan {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::TubeCoralFan ( TubeCoralFan {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::BrainCoralFan ( BrainCoralFan {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::BubbleCoralFan ( BubbleCoralFan {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::FireCoralFan ( FireCoralFan {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::HornCoralFan ( HornCoralFan {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::DeadTubeCoralWallFan ( DeadTubeCoralWallFan {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::DeadBrainCoralWallFan ( DeadBrainCoralWallFan {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::DeadBubbleCoralWallFan ( DeadBubbleCoralWallFan {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::DeadFireCoralWallFan ( DeadFireCoralWallFan {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::DeadHornCoralWallFan ( DeadHornCoralWallFan {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::TubeCoralWallFan ( TubeCoralWallFan {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::BrainCoralWallFan ( BrainCoralWallFan {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::BubbleCoralWallFan ( BubbleCoralWallFan {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::FireCoralWallFan ( FireCoralWallFan {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::HornCoralWallFan ( HornCoralWallFan {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#pickles in ConstrainedInt::<1, 4>::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::SeaPickle ( SeaPickle {r#pickles: r#pickles.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	map.insert(Block::BlueIce ( BlueIce {} ), map.len());
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::Conduit ( Conduit {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	map.insert(Block::BambooSapling ( BambooSapling {} ), map.len());
	for r#age in ConstrainedInt::<0, 1>::possible_values() {
		for r#leaves in property_enums::Leaves::possible_values() {
			for r#stage in ConstrainedInt::<0, 1>::possible_values() {
				map.insert(Block::Bamboo ( Bamboo {r#age: r#age.clone(), r#leaves: r#leaves.clone(), r#stage: r#stage.clone(), } ), map.len());
			}
		}
	}
	map.insert(Block::PottedBamboo ( PottedBamboo {} ), map.len());
	map.insert(Block::VoidAir ( VoidAir {} ), map.len());
	map.insert(Block::CaveAir ( CaveAir {} ), map.len());
	for r#drag in bool::possible_values() {
		map.insert(Block::BubbleColumn ( BubbleColumn {r#drag: r#drag.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::PolishedGraniteStairs ( PolishedGraniteStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::SmoothRedSandstoneStairs ( SmoothRedSandstoneStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::MossyStoneBrickStairs ( MossyStoneBrickStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::PolishedDioriteStairs ( PolishedDioriteStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::MossyCobblestoneStairs ( MossyCobblestoneStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::EndStoneBrickStairs ( EndStoneBrickStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::StoneStairs ( StoneStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::SmoothSandstoneStairs ( SmoothSandstoneStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::SmoothQuartzStairs ( SmoothQuartzStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::GraniteStairs ( GraniteStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::AndesiteStairs ( AndesiteStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::RedNetherBrickStairs ( RedNetherBrickStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::PolishedAndesiteStairs ( PolishedAndesiteStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::DioriteStairs ( DioriteStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::PolishedGraniteSlab ( PolishedGraniteSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::SmoothRedSandstoneSlab ( SmoothRedSandstoneSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::MossyStoneBrickSlab ( MossyStoneBrickSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::PolishedDioriteSlab ( PolishedDioriteSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::MossyCobblestoneSlab ( MossyCobblestoneSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::EndStoneBrickSlab ( EndStoneBrickSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::SmoothSandstoneSlab ( SmoothSandstoneSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::SmoothQuartzSlab ( SmoothQuartzSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::GraniteSlab ( GraniteSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::AndesiteSlab ( AndesiteSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::RedNetherBrickSlab ( RedNetherBrickSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::PolishedAndesiteSlab ( PolishedAndesiteSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::DioriteSlab ( DioriteSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::BrickWall ( BrickWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::PrismarineWall ( PrismarineWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::RedSandstoneWall ( RedSandstoneWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::MossyStoneBrickWall ( MossyStoneBrickWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::GraniteWall ( GraniteWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::StoneBrickWall ( StoneBrickWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::MudBrickWall ( MudBrickWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::NetherBrickWall ( NetherBrickWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::AndesiteWall ( AndesiteWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::RedNetherBrickWall ( RedNetherBrickWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::SandstoneWall ( SandstoneWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::EndStoneBrickWall ( EndStoneBrickWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::DioriteWall ( DioriteWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#bottom in bool::possible_values() {
		for r#distance in ConstrainedInt::<0, 7>::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::Scaffolding ( Scaffolding {r#bottom: r#bottom.clone(), r#distance: r#distance.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::Loom ( Loom {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing::possible_values() {
		for r#open in bool::possible_values() {
			map.insert(Block::Barrel ( Barrel {r#facing: r#facing.clone(), r#open: r#open.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#lit in bool::possible_values() {
			map.insert(Block::Smoker ( Smoker {r#facing: r#facing.clone(), r#lit: r#lit.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#lit in bool::possible_values() {
			map.insert(Block::BlastFurnace ( BlastFurnace {r#facing: r#facing.clone(), r#lit: r#lit.clone(), } ), map.len());
		}
	}
	map.insert(Block::CartographyTable ( CartographyTable {} ), map.len());
	map.insert(Block::FletchingTable ( FletchingTable {} ), map.len());
	for r#face in property_enums::Face::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			map.insert(Block::Grindstone ( Grindstone {r#face: r#face.clone(), r#facing: r#facing.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#has_book in bool::possible_values() {
			for r#powered in bool::possible_values() {
				map.insert(Block::Lectern ( Lectern {r#facing: r#facing.clone(), r#has_book: r#has_book.clone(), r#powered: r#powered.clone(), } ), map.len());
			}
		}
	}
	map.insert(Block::SmithingTable ( SmithingTable {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		map.insert(Block::Stonecutter ( Stonecutter {r#facing: r#facing.clone(), } ), map.len());
	}
	for r#attachment in property_enums::Attachment::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			for r#powered in bool::possible_values() {
				map.insert(Block::Bell ( Bell {r#attachment: r#attachment.clone(), r#facing: r#facing.clone(), r#powered: r#powered.clone(), } ), map.len());
			}
		}
	}
	for r#hanging in bool::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::Lantern ( Lantern {r#hanging: r#hanging.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#hanging in bool::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::SoulLantern ( SoulLantern {r#hanging: r#hanging.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#lit in bool::possible_values() {
			for r#signal_fire in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::Campfire ( Campfire {r#facing: r#facing.clone(), r#lit: r#lit.clone(), r#signal_fire: r#signal_fire.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#lit in bool::possible_values() {
			for r#signal_fire in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::SoulCampfire ( SoulCampfire {r#facing: r#facing.clone(), r#lit: r#lit.clone(), r#signal_fire: r#signal_fire.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#age in ConstrainedInt::<0, 3>::possible_values() {
		map.insert(Block::SweetBerryBush ( SweetBerryBush {r#age: r#age.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::WarpedStem ( WarpedStem {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedWarpedStem ( StrippedWarpedStem {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::WarpedHyphae ( WarpedHyphae {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedWarpedHyphae ( StrippedWarpedHyphae {r#axis: r#axis.clone(), } ), map.len());
	}
	map.insert(Block::WarpedNylium ( WarpedNylium {} ), map.len());
	map.insert(Block::WarpedFungus ( WarpedFungus {} ), map.len());
	map.insert(Block::WarpedWartBlock ( WarpedWartBlock {} ), map.len());
	map.insert(Block::WarpedRoots ( WarpedRoots {} ), map.len());
	map.insert(Block::NetherSprouts ( NetherSprouts {} ), map.len());
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::CrimsonStem ( CrimsonStem {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedCrimsonStem ( StrippedCrimsonStem {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::CrimsonHyphae ( CrimsonHyphae {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::StrippedCrimsonHyphae ( StrippedCrimsonHyphae {r#axis: r#axis.clone(), } ), map.len());
	}
	map.insert(Block::CrimsonNylium ( CrimsonNylium {} ), map.len());
	map.insert(Block::CrimsonFungus ( CrimsonFungus {} ), map.len());
	map.insert(Block::Shroomlight ( Shroomlight {} ), map.len());
	for r#age in ConstrainedInt::<0, 25>::possible_values() {
		map.insert(Block::WeepingVines ( WeepingVines {r#age: r#age.clone(), } ), map.len());
	}
	map.insert(Block::WeepingVinesPlant ( WeepingVinesPlant {} ), map.len());
	for r#age in ConstrainedInt::<0, 25>::possible_values() {
		map.insert(Block::TwistingVines ( TwistingVines {r#age: r#age.clone(), } ), map.len());
	}
	map.insert(Block::TwistingVinesPlant ( TwistingVinesPlant {} ), map.len());
	map.insert(Block::CrimsonRoots ( CrimsonRoots {} ), map.len());
	map.insert(Block::CrimsonPlanks ( CrimsonPlanks {} ), map.len());
	map.insert(Block::WarpedPlanks ( WarpedPlanks {} ), map.len());
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::CrimsonSlab ( CrimsonSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::WarpedSlab ( WarpedSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#powered in bool::possible_values() {
		map.insert(Block::CrimsonPressurePlate ( CrimsonPressurePlate {r#powered: r#powered.clone(), } ), map.len());
	}
	for r#powered in bool::possible_values() {
		map.insert(Block::WarpedPressurePlate ( WarpedPressurePlate {r#powered: r#powered.clone(), } ), map.len());
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::CrimsonFence ( CrimsonFence {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#east in bool::possible_values() {
		for r#north in bool::possible_values() {
			for r#south in bool::possible_values() {
				for r#waterlogged in bool::possible_values() {
					for r#west in bool::possible_values() {
						map.insert(Block::WarpedFence ( WarpedFence {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						map.insert(Block::CrimsonTrapdoor ( CrimsonTrapdoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						map.insert(Block::WarpedTrapdoor ( WarpedTrapdoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#in_wall in bool::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					map.insert(Block::CrimsonFenceGate ( CrimsonFenceGate {r#facing: r#facing.clone(), r#in_wall: r#in_wall.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#in_wall in bool::possible_values() {
			for r#open in bool::possible_values() {
				for r#powered in bool::possible_values() {
					map.insert(Block::WarpedFenceGate ( WarpedFenceGate {r#facing: r#facing.clone(), r#in_wall: r#in_wall.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::CrimsonStairs ( CrimsonStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::WarpedStairs ( WarpedStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#face in property_enums::Face::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			for r#powered in bool::possible_values() {
				map.insert(Block::CrimsonButton ( CrimsonButton {r#face: r#face.clone(), r#facing: r#facing.clone(), r#powered: r#powered.clone(), } ), map.len());
			}
		}
	}
	for r#face in property_enums::Face::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			for r#powered in bool::possible_values() {
				map.insert(Block::WarpedButton ( WarpedButton {r#face: r#face.clone(), r#facing: r#facing.clone(), r#powered: r#powered.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half::possible_values() {
			for r#hinge in property_enums::Hinge::possible_values() {
				for r#open in bool::possible_values() {
					for r#powered in bool::possible_values() {
						map.insert(Block::CrimsonDoor ( CrimsonDoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#hinge: r#hinge.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half::possible_values() {
			for r#hinge in property_enums::Hinge::possible_values() {
				for r#open in bool::possible_values() {
					for r#powered in bool::possible_values() {
						map.insert(Block::WarpedDoor ( WarpedDoor {r#facing: r#facing.clone(), r#half: r#half.clone(), r#hinge: r#hinge.clone(), r#open: r#open.clone(), r#powered: r#powered.clone(), } ), map.len());
					}
				}
			}
		}
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::CrimsonSign ( CrimsonSign {r#rotation: r#rotation.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#rotation in ConstrainedInt::<0, 15>::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::WarpedSign ( WarpedSign {r#rotation: r#rotation.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::CrimsonWallSign ( CrimsonWallSign {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::WarpedWallSign ( WarpedWallSign {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#mode in property_enums::Mode1::possible_values() {
		map.insert(Block::StructureBlock ( StructureBlock {r#mode: r#mode.clone(), } ), map.len());
	}
	for r#orientation in property_enums::Orientation::possible_values() {
		map.insert(Block::Jigsaw ( Jigsaw {r#orientation: r#orientation.clone(), } ), map.len());
	}
	for r#level in ConstrainedInt::<0, 8>::possible_values() {
		map.insert(Block::Composter ( Composter {r#level: r#level.clone(), } ), map.len());
	}
	for r#power in ConstrainedInt::<0, 15>::possible_values() {
		map.insert(Block::Target ( Target {r#power: r#power.clone(), } ), map.len());
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#honey_level in ConstrainedInt::<0, 5>::possible_values() {
			map.insert(Block::BeeNest ( BeeNest {r#facing: r#facing.clone(), r#honey_level: r#honey_level.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#honey_level in ConstrainedInt::<0, 5>::possible_values() {
			map.insert(Block::Beehive ( Beehive {r#facing: r#facing.clone(), r#honey_level: r#honey_level.clone(), } ), map.len());
		}
	}
	map.insert(Block::HoneyBlock ( HoneyBlock {} ), map.len());
	map.insert(Block::HoneycombBlock ( HoneycombBlock {} ), map.len());
	map.insert(Block::NetheriteBlock ( NetheriteBlock {} ), map.len());
	map.insert(Block::AncientDebris ( AncientDebris {} ), map.len());
	map.insert(Block::CryingObsidian ( CryingObsidian {} ), map.len());
	for r#charges in ConstrainedInt::<0, 4>::possible_values() {
		map.insert(Block::RespawnAnchor ( RespawnAnchor {r#charges: r#charges.clone(), } ), map.len());
	}
	map.insert(Block::PottedCrimsonFungus ( PottedCrimsonFungus {} ), map.len());
	map.insert(Block::PottedWarpedFungus ( PottedWarpedFungus {} ), map.len());
	map.insert(Block::PottedCrimsonRoots ( PottedCrimsonRoots {} ), map.len());
	map.insert(Block::PottedWarpedRoots ( PottedWarpedRoots {} ), map.len());
	map.insert(Block::Lodestone ( Lodestone {} ), map.len());
	map.insert(Block::Blackstone ( Blackstone {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::BlackstoneStairs ( BlackstoneStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::BlackstoneWall ( BlackstoneWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::BlackstoneSlab ( BlackstoneSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	map.insert(Block::PolishedBlackstone ( PolishedBlackstone {} ), map.len());
	map.insert(Block::PolishedBlackstoneBricks ( PolishedBlackstoneBricks {} ), map.len());
	map.insert(Block::CrackedPolishedBlackstoneBricks ( CrackedPolishedBlackstoneBricks {} ), map.len());
	map.insert(Block::ChiseledPolishedBlackstone ( ChiseledPolishedBlackstone {} ), map.len());
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::PolishedBlackstoneBrickSlab ( PolishedBlackstoneBrickSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::PolishedBlackstoneBrickStairs ( PolishedBlackstoneBrickStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::PolishedBlackstoneBrickWall ( PolishedBlackstoneBrickWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	map.insert(Block::GildedBlackstone ( GildedBlackstone {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::PolishedBlackstoneStairs ( PolishedBlackstoneStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::PolishedBlackstoneSlab ( PolishedBlackstoneSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#powered in bool::possible_values() {
		map.insert(Block::PolishedBlackstonePressurePlate ( PolishedBlackstonePressurePlate {r#powered: r#powered.clone(), } ), map.len());
	}
	for r#face in property_enums::Face::possible_values() {
		for r#facing in property_enums::Facing1::possible_values() {
			for r#powered in bool::possible_values() {
				map.insert(Block::PolishedBlackstoneButton ( PolishedBlackstoneButton {r#face: r#face.clone(), r#facing: r#facing.clone(), r#powered: r#powered.clone(), } ), map.len());
			}
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::PolishedBlackstoneWall ( PolishedBlackstoneWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	map.insert(Block::ChiseledNetherBricks ( ChiseledNetherBricks {} ), map.len());
	map.insert(Block::CrackedNetherBricks ( CrackedNetherBricks {} ), map.len());
	map.insert(Block::QuartzBricks ( QuartzBricks {} ), map.len());
	for r#candles in ConstrainedInt::<1, 4>::possible_values() {
		for r#lit in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::Candle ( Candle {r#candles: r#candles.clone(), r#lit: r#lit.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#candles in ConstrainedInt::<1, 4>::possible_values() {
		for r#lit in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::WhiteCandle ( WhiteCandle {r#candles: r#candles.clone(), r#lit: r#lit.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#candles in ConstrainedInt::<1, 4>::possible_values() {
		for r#lit in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::OrangeCandle ( OrangeCandle {r#candles: r#candles.clone(), r#lit: r#lit.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#candles in ConstrainedInt::<1, 4>::possible_values() {
		for r#lit in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::MagentaCandle ( MagentaCandle {r#candles: r#candles.clone(), r#lit: r#lit.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#candles in ConstrainedInt::<1, 4>::possible_values() {
		for r#lit in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::LightBlueCandle ( LightBlueCandle {r#candles: r#candles.clone(), r#lit: r#lit.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#candles in ConstrainedInt::<1, 4>::possible_values() {
		for r#lit in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::YellowCandle ( YellowCandle {r#candles: r#candles.clone(), r#lit: r#lit.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#candles in ConstrainedInt::<1, 4>::possible_values() {
		for r#lit in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::LimeCandle ( LimeCandle {r#candles: r#candles.clone(), r#lit: r#lit.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#candles in ConstrainedInt::<1, 4>::possible_values() {
		for r#lit in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::PinkCandle ( PinkCandle {r#candles: r#candles.clone(), r#lit: r#lit.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#candles in ConstrainedInt::<1, 4>::possible_values() {
		for r#lit in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::GrayCandle ( GrayCandle {r#candles: r#candles.clone(), r#lit: r#lit.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#candles in ConstrainedInt::<1, 4>::possible_values() {
		for r#lit in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::LightGrayCandle ( LightGrayCandle {r#candles: r#candles.clone(), r#lit: r#lit.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#candles in ConstrainedInt::<1, 4>::possible_values() {
		for r#lit in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::CyanCandle ( CyanCandle {r#candles: r#candles.clone(), r#lit: r#lit.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#candles in ConstrainedInt::<1, 4>::possible_values() {
		for r#lit in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::PurpleCandle ( PurpleCandle {r#candles: r#candles.clone(), r#lit: r#lit.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#candles in ConstrainedInt::<1, 4>::possible_values() {
		for r#lit in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::BlueCandle ( BlueCandle {r#candles: r#candles.clone(), r#lit: r#lit.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#candles in ConstrainedInt::<1, 4>::possible_values() {
		for r#lit in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::BrownCandle ( BrownCandle {r#candles: r#candles.clone(), r#lit: r#lit.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#candles in ConstrainedInt::<1, 4>::possible_values() {
		for r#lit in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::GreenCandle ( GreenCandle {r#candles: r#candles.clone(), r#lit: r#lit.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#candles in ConstrainedInt::<1, 4>::possible_values() {
		for r#lit in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::RedCandle ( RedCandle {r#candles: r#candles.clone(), r#lit: r#lit.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#candles in ConstrainedInt::<1, 4>::possible_values() {
		for r#lit in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::BlackCandle ( BlackCandle {r#candles: r#candles.clone(), r#lit: r#lit.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::CandleCake ( CandleCake {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::WhiteCandleCake ( WhiteCandleCake {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::OrangeCandleCake ( OrangeCandleCake {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::MagentaCandleCake ( MagentaCandleCake {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::LightBlueCandleCake ( LightBlueCandleCake {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::YellowCandleCake ( YellowCandleCake {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::LimeCandleCake ( LimeCandleCake {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::PinkCandleCake ( PinkCandleCake {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::GrayCandleCake ( GrayCandleCake {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::LightGrayCandleCake ( LightGrayCandleCake {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::CyanCandleCake ( CyanCandleCake {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::PurpleCandleCake ( PurpleCandleCake {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::BlueCandleCake ( BlueCandleCake {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::BrownCandleCake ( BrownCandleCake {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::GreenCandleCake ( GreenCandleCake {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::RedCandleCake ( RedCandleCake {r#lit: r#lit.clone(), } ), map.len());
	}
	for r#lit in bool::possible_values() {
		map.insert(Block::BlackCandleCake ( BlackCandleCake {r#lit: r#lit.clone(), } ), map.len());
	}
	map.insert(Block::AmethystBlock ( AmethystBlock {} ), map.len());
	map.insert(Block::BuddingAmethyst ( BuddingAmethyst {} ), map.len());
	for r#facing in property_enums::Facing::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::AmethystCluster ( AmethystCluster {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::LargeAmethystBud ( LargeAmethystBud {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::MediumAmethystBud ( MediumAmethystBud {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::SmallAmethystBud ( SmallAmethystBud {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	map.insert(Block::Tuff ( Tuff {} ), map.len());
	map.insert(Block::Calcite ( Calcite {} ), map.len());
	map.insert(Block::TintedGlass ( TintedGlass {} ), map.len());
	map.insert(Block::PowderSnow ( PowderSnow {} ), map.len());
	for r#power in ConstrainedInt::<0, 15>::possible_values() {
		for r#sculk_sensor_phase in property_enums::SculkSensorPhase::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::SculkSensor ( SculkSensor {r#power: r#power.clone(), r#sculk_sensor_phase: r#sculk_sensor_phase.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	map.insert(Block::Sculk ( Sculk {} ), map.len());
	for r#down in bool::possible_values() {
		for r#east in bool::possible_values() {
			for r#north in bool::possible_values() {
				for r#south in bool::possible_values() {
					for r#up in bool::possible_values() {
						for r#waterlogged in bool::possible_values() {
							for r#west in bool::possible_values() {
								map.insert(Block::SculkVein ( SculkVein {r#down: r#down.clone(), r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
							}
						}
					}
				}
			}
		}
	}
	for r#bloom in bool::possible_values() {
		map.insert(Block::SculkCatalyst ( SculkCatalyst {r#bloom: r#bloom.clone(), } ), map.len());
	}
	for r#can_summon in bool::possible_values() {
		for r#shrieking in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::SculkShrieker ( SculkShrieker {r#can_summon: r#can_summon.clone(), r#shrieking: r#shrieking.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	map.insert(Block::OxidizedCopper ( OxidizedCopper {} ), map.len());
	map.insert(Block::WeatheredCopper ( WeatheredCopper {} ), map.len());
	map.insert(Block::ExposedCopper ( ExposedCopper {} ), map.len());
	map.insert(Block::CopperBlock ( CopperBlock {} ), map.len());
	map.insert(Block::CopperOre ( CopperOre {} ), map.len());
	map.insert(Block::DeepslateCopperOre ( DeepslateCopperOre {} ), map.len());
	map.insert(Block::OxidizedCutCopper ( OxidizedCutCopper {} ), map.len());
	map.insert(Block::WeatheredCutCopper ( WeatheredCutCopper {} ), map.len());
	map.insert(Block::ExposedCutCopper ( ExposedCutCopper {} ), map.len());
	map.insert(Block::CutCopper ( CutCopper {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::OxidizedCutCopperStairs ( OxidizedCutCopperStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::WeatheredCutCopperStairs ( WeatheredCutCopperStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::ExposedCutCopperStairs ( ExposedCutCopperStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::CutCopperStairs ( CutCopperStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::OxidizedCutCopperSlab ( OxidizedCutCopperSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::WeatheredCutCopperSlab ( WeatheredCutCopperSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::ExposedCutCopperSlab ( ExposedCutCopperSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::CutCopperSlab ( CutCopperSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	map.insert(Block::WaxedCopperBlock ( WaxedCopperBlock {} ), map.len());
	map.insert(Block::WaxedWeatheredCopper ( WaxedWeatheredCopper {} ), map.len());
	map.insert(Block::WaxedExposedCopper ( WaxedExposedCopper {} ), map.len());
	map.insert(Block::WaxedOxidizedCopper ( WaxedOxidizedCopper {} ), map.len());
	map.insert(Block::WaxedOxidizedCutCopper ( WaxedOxidizedCutCopper {} ), map.len());
	map.insert(Block::WaxedWeatheredCutCopper ( WaxedWeatheredCutCopper {} ), map.len());
	map.insert(Block::WaxedExposedCutCopper ( WaxedExposedCutCopper {} ), map.len());
	map.insert(Block::WaxedCutCopper ( WaxedCutCopper {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::WaxedOxidizedCutCopperStairs ( WaxedOxidizedCutCopperStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::WaxedWeatheredCutCopperStairs ( WaxedWeatheredCutCopperStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::WaxedExposedCutCopperStairs ( WaxedExposedCutCopperStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::WaxedCutCopperStairs ( WaxedCutCopperStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::WaxedOxidizedCutCopperSlab ( WaxedOxidizedCutCopperSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::WaxedWeatheredCutCopperSlab ( WaxedWeatheredCutCopperSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::WaxedExposedCutCopperSlab ( WaxedExposedCutCopperSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::WaxedCutCopperSlab ( WaxedCutCopperSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing::possible_values() {
		for r#powered in bool::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::LightningRod ( LightningRod {r#facing: r#facing.clone(), r#powered: r#powered.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#thickness in property_enums::Thickness::possible_values() {
		for r#vertical_direction in property_enums::VerticalDirection::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::PointedDripstone ( PointedDripstone {r#thickness: r#thickness.clone(), r#vertical_direction: r#vertical_direction.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	map.insert(Block::DripstoneBlock ( DripstoneBlock {} ), map.len());
	for r#age in ConstrainedInt::<0, 25>::possible_values() {
		for r#berries in bool::possible_values() {
			map.insert(Block::CaveVines ( CaveVines {r#age: r#age.clone(), r#berries: r#berries.clone(), } ), map.len());
		}
	}
	for r#berries in bool::possible_values() {
		map.insert(Block::CaveVinesPlant ( CaveVinesPlant {r#berries: r#berries.clone(), } ), map.len());
	}
	map.insert(Block::SporeBlossom ( SporeBlossom {} ), map.len());
	map.insert(Block::Azalea ( Azalea {} ), map.len());
	map.insert(Block::FloweringAzalea ( FloweringAzalea {} ), map.len());
	map.insert(Block::MossCarpet ( MossCarpet {} ), map.len());
	map.insert(Block::MossBlock ( MossBlock {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		for r#tilt in property_enums::Tilt::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::BigDripleaf ( BigDripleaf {r#facing: r#facing.clone(), r#tilt: r#tilt.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::BigDripleafStem ( BigDripleafStem {r#facing: r#facing.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half::possible_values() {
			for r#waterlogged in bool::possible_values() {
				map.insert(Block::SmallDripleaf ( SmallDripleaf {r#facing: r#facing.clone(), r#half: r#half.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
			}
		}
	}
	for r#waterlogged in bool::possible_values() {
		map.insert(Block::HangingRoots ( HangingRoots {r#waterlogged: r#waterlogged.clone(), } ), map.len());
	}
	map.insert(Block::RootedDirt ( RootedDirt {} ), map.len());
	map.insert(Block::Mud ( Mud {} ), map.len());
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::Deepslate ( Deepslate {r#axis: r#axis.clone(), } ), map.len());
	}
	map.insert(Block::CobbledDeepslate ( CobbledDeepslate {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::CobbledDeepslateStairs ( CobbledDeepslateStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::CobbledDeepslateSlab ( CobbledDeepslateSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::CobbledDeepslateWall ( CobbledDeepslateWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	map.insert(Block::PolishedDeepslate ( PolishedDeepslate {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::PolishedDeepslateStairs ( PolishedDeepslateStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::PolishedDeepslateSlab ( PolishedDeepslateSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::PolishedDeepslateWall ( PolishedDeepslateWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	map.insert(Block::DeepslateTiles ( DeepslateTiles {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::DeepslateTileStairs ( DeepslateTileStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::DeepslateTileSlab ( DeepslateTileSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::DeepslateTileWall ( DeepslateTileWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	map.insert(Block::DeepslateBricks ( DeepslateBricks {} ), map.len());
	for r#facing in property_enums::Facing1::possible_values() {
		for r#half in property_enums::Half1::possible_values() {
			for r#shape in property_enums::Shape1::possible_values() {
				for r#waterlogged in bool::possible_values() {
					map.insert(Block::DeepslateBrickStairs ( DeepslateBrickStairs {r#facing: r#facing.clone(), r#half: r#half.clone(), r#shape: r#shape.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
				}
			}
		}
	}
	for r#type in property_enums::Type2::possible_values() {
		for r#waterlogged in bool::possible_values() {
			map.insert(Block::DeepslateBrickSlab ( DeepslateBrickSlab {r#type: r#type.clone(), r#waterlogged: r#waterlogged.clone(), } ), map.len());
		}
	}
	for r#east in property_enums::East1::possible_values() {
		for r#north in property_enums::North1::possible_values() {
			for r#south in property_enums::South1::possible_values() {
				for r#up in bool::possible_values() {
					for r#waterlogged in bool::possible_values() {
						for r#west in property_enums::West1::possible_values() {
							map.insert(Block::DeepslateBrickWall ( DeepslateBrickWall {r#east: r#east.clone(), r#north: r#north.clone(), r#south: r#south.clone(), r#up: r#up.clone(), r#waterlogged: r#waterlogged.clone(), r#west: r#west.clone(), } ), map.len());
						}
					}
				}
			}
		}
	}
	map.insert(Block::ChiseledDeepslate ( ChiseledDeepslate {} ), map.len());
	map.insert(Block::CrackedDeepslateBricks ( CrackedDeepslateBricks {} ), map.len());
	map.insert(Block::CrackedDeepslateTiles ( CrackedDeepslateTiles {} ), map.len());
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::InfestedDeepslate ( InfestedDeepslate {r#axis: r#axis.clone(), } ), map.len());
	}
	map.insert(Block::SmoothBasalt ( SmoothBasalt {} ), map.len());
	map.insert(Block::RawIronBlock ( RawIronBlock {} ), map.len());
	map.insert(Block::RawCopperBlock ( RawCopperBlock {} ), map.len());
	map.insert(Block::RawGoldBlock ( RawGoldBlock {} ), map.len());
	map.insert(Block::PottedAzaleaBush ( PottedAzaleaBush {} ), map.len());
	map.insert(Block::PottedFloweringAzaleaBush ( PottedFloweringAzaleaBush {} ), map.len());
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::OchreFroglight ( OchreFroglight {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::VerdantFroglight ( VerdantFroglight {r#axis: r#axis.clone(), } ), map.len());
	}
	for r#axis in property_enums::Axis::possible_values() {
		map.insert(Block::PearlescentFroglight ( PearlescentFroglight {r#axis: r#axis.clone(), } ), map.len());
	}
	map.insert(Block::Frogspawn ( Frogspawn {} ), map.len());
	map.insert(Block::ReinforcedDeepslate ( ReinforcedDeepslate {} ), map.len());
	map
}
